Object.defineProperty(exports,`__esModule`,{value:!0});var e=Object.create,t=Object.defineProperty,n=Object.getOwnPropertyDescriptor,r=Object.getOwnPropertyNames,i=Object.getPrototypeOf,a=Object.prototype.hasOwnProperty,o=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),s=(e,n)=>{for(var r in n)t(e,r,{get:n[r],enumerable:!0})},c=(e,i,o,s)=>{if(i&&typeof i==`object`||typeof i==`function`)for(var c=r(i),l=0,u=c.length,d;l<u;l++)d=c[l],!a.call(e,d)&&d!==o&&t(e,d,{get:(e=>i[e]).bind(null,d),enumerable:!(s=n(i,d))||s.enumerable});return e},l=(n,r,a)=>(a=n==null?{}:e(i(n)),c(r||!n||!n.__esModule?t(a,`default`,{value:n,enumerable:!0}):a,n));const u=l(require(`obsidian`));require(`electron`);
/**
* @vue/shared v3.5.17
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
/*! #__NO_SIDE_EFFECTS__ */
function d(e){let t=Object.create(null);for(let n of e.split(`,`))t[n]=1;return e=>e in t}const f=process.env.NODE_ENV===`production`?{}:Object.freeze({}),p=process.env.NODE_ENV===`production`?[]:Object.freeze([]),m=()=>{},h=()=>!1,g=e=>e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&(e.charCodeAt(2)>122||e.charCodeAt(2)<97),_=e=>e.startsWith(`onUpdate:`),v=Object.assign,y=(e,t)=>{let n=e.indexOf(t);n>-1&&e.splice(n,1)},b=Object.prototype.hasOwnProperty,x=(e,t)=>b.call(e,t),S=Array.isArray,C=e=>ae(e)===`[object Map]`,w=e=>ae(e)===`[object Set]`,ee=e=>ae(e)===`[object Date]`,te=e=>ae(e)===`[object RegExp]`,T=e=>typeof e==`function`,E=e=>typeof e==`string`,ne=e=>typeof e==`symbol`,D=e=>typeof e==`object`&&!!e,re=e=>(D(e)||T(e))&&T(e.then)&&T(e.catch),ie=Object.prototype.toString,ae=e=>ie.call(e),O=e=>ae(e).slice(8,-1),oe=e=>ae(e)===`[object Object]`,se=e=>E(e)&&e!==`NaN`&&e[0]!==`-`&&``+parseInt(e,10)===e,ce=d(`,key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted`),le=d(`bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo`),ue=e=>{let t=Object.create(null);return n=>{let r=t[n];return r||(t[n]=e(n))}},de=/-(\w)/g,k=ue(e=>e.replace(de,(e,t)=>t?t.toUpperCase():``)),fe=/\B([A-Z])/g,A=ue(e=>e.replace(fe,`-$1`).toLowerCase()),pe=ue(e=>e.charAt(0).toUpperCase()+e.slice(1)),me=ue(e=>{let t=e?`on${pe(e)}`:``;return t}),he=(e,t)=>!Object.is(e,t),ge=(e,...t)=>{for(let n=0;n<e.length;n++)e[n](...t)},_e=(e,t,n,r=!1)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,writable:r,value:n})},ve=e=>{let t=parseFloat(e);return isNaN(t)?e:t},ye=e=>{let t=E(e)?Number(e):NaN;return isNaN(t)?e:t};let be;const xe=()=>be||=typeof globalThis<`u`?globalThis:typeof self<`u`?self:typeof window<`u`?window:typeof global<`u`?global:{},Se=`Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console,Error,Symbol`,Ce=d(Se);function we(e){if(S(e)){let t={};for(let n=0;n<e.length;n++){let r=e[n],i=E(r)?Oe(r):we(r);if(i)for(let e in i)t[e]=i[e]}return t}else if(E(e)||D(e))return e}const Te=/;(?![^(]*\))/g,Ee=/:([^]+)/,De=/\/\*[^]*?\*\//g;function Oe(e){let t={};return e.replace(De,``).split(Te).forEach(e=>{if(e){let n=e.split(Ee);n.length>1&&(t[n[0].trim()]=n[1].trim())}}),t}function ke(e){if(!e)return``;if(E(e))return e;let t=``;for(let n in e){let r=e[n];if(E(r)||typeof r==`number`){let e=n.startsWith(`--`)?n:A(n);t+=`${e}:${r};`}}return t}function j(e){let t=``;if(E(e))t=e;else if(S(e))for(let n=0;n<e.length;n++){let r=j(e[n]);r&&(t+=r+` `)}else if(D(e))for(let n in e)e[n]&&(t+=n+` `);return t.trim()}function Ae(e){if(!e)return null;let{class:t,style:n}=e;return t&&!E(t)&&(e.class=j(t)),n&&(e.style=we(n)),e}const je=`html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot`,Me=`svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view`,Ne=`annotation,annotation-xml,maction,maligngroup,malignmark,math,menclose,merror,mfenced,mfrac,mfraction,mglyph,mi,mlabeledtr,mlongdiv,mmultiscripts,mn,mo,mover,mpadded,mphantom,mprescripts,mroot,mrow,ms,mscarries,mscarry,msgroup,msline,mspace,msqrt,msrow,mstack,mstyle,msub,msubsup,msup,mtable,mtd,mtext,mtr,munder,munderover,none,semantics`,Pe=d(je),Fe=d(Me),Ie=d(Ne),Le=`itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`,Re=d(Le),ze=d(Le+`,async,autofocus,autoplay,controls,default,defer,disabled,hidden,inert,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`);function Be(e){return!!e||e===``}const Ve=d(`accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,inert,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap`),He=d(`xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xmlns:xlink,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`);function Ue(e){if(e==null)return!1;let t=typeof e;return t===`string`||t===`number`||t===`boolean`}const We=/[ !"#$%&'()*+,./:;<=>?@[\\\]^`{|}~]/g;function Ge(e,t){return e.replace(We,e=>t?e===`"`?`\\\\\\"`:`\\\\${e}`:`\\${e}`)}function Ke(e,t){if(e.length!==t.length)return!1;let n=!0;for(let r=0;n&&r<e.length;r++)n=qe(e[r],t[r]);return n}function qe(e,t){if(e===t)return!0;let n=ee(e),r=ee(t);if(n||r)return n&&r?e.getTime()===t.getTime():!1;if(n=ne(e),r=ne(t),n||r)return e===t;if(n=S(e),r=S(t),n||r)return n&&r?Ke(e,t):!1;if(n=D(e),r=D(t),n||r){if(!n||!r)return!1;let i=Object.keys(e).length,a=Object.keys(t).length;if(i!==a)return!1;for(let n in e){let r=e.hasOwnProperty(n),i=t.hasOwnProperty(n);if(r&&!i||!r&&i||!qe(e[n],t[n]))return!1}}return String(e)===String(t)}function Je(e,t){return e.findIndex(e=>qe(e,t))}const Ye=e=>!!(e&&e.__v_isRef===!0),Xe=e=>E(e)?e:e==null?``:S(e)||D(e)&&(e.toString===ie||!T(e.toString))?Ye(e)?Xe(e.value):JSON.stringify(e,Ze,2):String(e),Ze=(e,t)=>Ye(t)?Ze(e,t.value):C(t)?{[`Map(${t.size})`]:[...t.entries()].reduce((e,[t,n],r)=>(e[Qe(t,r)+` =>`]=n,e),{})}:w(t)?{[`Set(${t.size})`]:[...t.values()].map(e=>Qe(e))}:ne(t)?Qe(t):D(t)&&!S(t)&&!oe(t)?String(t):t,Qe=(e,t=``)=>{var n;return ne(e)?`Symbol(${(n=e.description)??t})`:e};function $e(e,...t){console.warn(`[Vue warn] ${e}`,...t)}let et;var tt=class{constructor(e=!1){this.detached=e,this._active=!0,this._on=0,this.effects=[],this.cleanups=[],this._isPaused=!1,this.parent=et,!e&&et&&(this.index=(et.scopes||=[]).push(this)-1)}get active(){return this._active}pause(){if(this._active){this._isPaused=!0;let e,t;if(this.scopes)for(e=0,t=this.scopes.length;e<t;e++)this.scopes[e].pause();for(e=0,t=this.effects.length;e<t;e++)this.effects[e].pause()}}resume(){if(this._active&&this._isPaused){this._isPaused=!1;let e,t;if(this.scopes)for(e=0,t=this.scopes.length;e<t;e++)this.scopes[e].resume();for(e=0,t=this.effects.length;e<t;e++)this.effects[e].resume()}}run(e){if(this._active){let t=et;try{return et=this,e()}finally{et=t}}else process.env.NODE_ENV!==`production`&&$e(`cannot run an inactive effect scope.`)}on(){++this._on===1&&(this.prevScope=et,et=this)}off(){this._on>0&&--this._on===0&&(et=this.prevScope,this.prevScope=void 0)}stop(e){if(this._active){this._active=!1;let t,n;for(t=0,n=this.effects.length;t<n;t++)this.effects[t].stop();for(this.effects.length=0,t=0,n=this.cleanups.length;t<n;t++)this.cleanups[t]();if(this.cleanups.length=0,this.scopes){for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].stop(!0);this.scopes.length=0}if(!this.detached&&this.parent&&!e){let e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.parent=void 0}}};function nt(e){return new tt(e)}function rt(){return et}function it(e,t=!1){et?et.cleanups.push(e):process.env.NODE_ENV!==`production`&&!t&&$e(`onScopeDispose() is called when there is no active effect scope to be associated with.`)}let M;const at=new WeakSet;var ot=class{constructor(e){this.fn=e,this.deps=void 0,this.depsTail=void 0,this.flags=5,this.next=void 0,this.cleanup=void 0,this.scheduler=void 0,et&&et.active&&et.effects.push(this)}pause(){this.flags|=64}resume(){this.flags&64&&(this.flags&=-65,at.has(this)&&(at.delete(this),this.trigger()))}notify(){this.flags&2&&!(this.flags&32)||this.flags&8||ut(this)}run(){if(!(this.flags&1))return this.fn();this.flags|=2,Tt(this),pt(this);let e=M,t=xt;M=this,xt=!0;try{return this.fn()}finally{process.env.NODE_ENV!==`production`&&M!==this&&$e(`Active effect was not restored correctly - this is likely a Vue internal bug.`),mt(this),M=e,xt=t,this.flags&=-3}}stop(){if(this.flags&1){for(let e=this.deps;e;e=e.nextDep)_t(e);this.deps=this.depsTail=void 0,Tt(this),this.onStop&&this.onStop(),this.flags&=-2}}trigger(){this.flags&64?at.add(this):this.scheduler?this.scheduler():this.runIfDirty()}runIfDirty(){ht(this)&&this.run()}get dirty(){return ht(this)}};let st=0,ct,lt;function ut(e,t=!1){if(e.flags|=8,t){e.next=lt,lt=e;return}e.next=ct,ct=e}function dt(){st++}function ft(){if(--st>0)return;if(lt){let e=lt;for(lt=void 0;e;){let t=e.next;e.next=void 0,e.flags&=-9,e=t}}let e;for(;ct;){let t=ct;for(ct=void 0;t;){let n=t.next;if(t.next=void 0,t.flags&=-9,t.flags&1)try{t.trigger()}catch(t){e||=t}t=n}}if(e)throw e}function pt(e){for(let t=e.deps;t;t=t.nextDep)t.version=-1,t.prevActiveLink=t.dep.activeLink,t.dep.activeLink=t}function mt(e){let t,n=e.depsTail,r=n;for(;r;){let e=r.prevDep;r.version===-1?(r===n&&(n=e),_t(r),vt(r)):t=r,r.dep.activeLink=r.prevActiveLink,r.prevActiveLink=void 0,r=e}e.deps=t,e.depsTail=n}function ht(e){for(let t=e.deps;t;t=t.nextDep)if(t.dep.version!==t.version||t.dep.computed&&(gt(t.dep.computed)||t.dep.version!==t.version))return!0;return!!e._dirty}function gt(e){if(e.flags&4&&!(e.flags&16)||(e.flags&=-17,e.globalVersion===Et)||(e.globalVersion=Et,!e.isSSR&&e.flags&128&&(!e.deps&&!e._dirty||!ht(e))))return;e.flags|=2;let t=e.dep,n=M,r=xt;M=e,xt=!0;try{pt(e);let n=e.fn(e._value);(t.version===0||he(n,e._value))&&(e.flags|=128,e._value=n,t.version++)}catch(e){throw t.version++,e}finally{M=n,xt=r,mt(e),e.flags&=-3}}function _t(e,t=!1){let{dep:n,prevSub:r,nextSub:i}=e;if(r&&(r.nextSub=i,e.prevSub=void 0),i&&(i.prevSub=r,e.nextSub=void 0),process.env.NODE_ENV!==`production`&&n.subsHead===e&&(n.subsHead=i),n.subs===e&&(n.subs=r,!r&&n.computed)){n.computed.flags&=-5;for(let e=n.computed.deps;e;e=e.nextDep)_t(e,!0)}!t&&!--n.sc&&n.map&&n.map.delete(n.key)}function vt(e){let{prevDep:t,nextDep:n}=e;t&&(t.nextDep=n,e.prevDep=void 0),n&&(n.prevDep=t,e.nextDep=void 0)}function yt(e,t){e.effect instanceof ot&&(e=e.effect.fn);let n=new ot(e);t&&v(n,t);try{n.run()}catch(e){throw n.stop(),e}let r=n.run.bind(n);return r.effect=n,r}function bt(e){e.effect.stop()}let xt=!0;const St=[];function Ct(){St.push(xt),xt=!1}function wt(){let e=St.pop();xt=e===void 0?!0:e}function Tt(e){let{cleanup:t}=e;if(e.cleanup=void 0,t){let e=M;M=void 0;try{t()}finally{M=e}}}let Et=0;var Dt=class{constructor(e,t){this.sub=e,this.dep=t,this.version=t.version,this.nextDep=this.prevDep=this.nextSub=this.prevSub=this.prevActiveLink=void 0}},Ot=class{constructor(e){this.computed=e,this.version=0,this.activeLink=void 0,this.subs=void 0,this.map=void 0,this.key=void 0,this.sc=0,this.__v_skip=!0,process.env.NODE_ENV!==`production`&&(this.subsHead=void 0)}track(e){if(!M||!xt||M===this.computed)return;let t=this.activeLink;if(t===void 0||t.sub!==M)t=this.activeLink=new Dt(M,this),M.deps?(t.prevDep=M.depsTail,M.depsTail.nextDep=t,M.depsTail=t):M.deps=M.depsTail=t,kt(t);else if(t.version===-1&&(t.version=this.version,t.nextDep)){let e=t.nextDep;e.prevDep=t.prevDep,t.prevDep&&(t.prevDep.nextDep=e),t.prevDep=M.depsTail,t.nextDep=void 0,M.depsTail.nextDep=t,M.depsTail=t,M.deps===t&&(M.deps=e)}return process.env.NODE_ENV!==`production`&&M.onTrack&&M.onTrack(v({effect:M},e)),t}trigger(e){this.version++,Et++,this.notify(e)}notify(e){dt();try{if(process.env.NODE_ENV!==`production`)for(let t=this.subsHead;t;t=t.nextSub)t.sub.onTrigger&&!(t.sub.flags&8)&&t.sub.onTrigger(v({effect:t.sub},e));for(let e=this.subs;e;e=e.prevSub)e.sub.notify()&&e.sub.dep.notify()}finally{ft()}}};function kt(e){if(e.dep.sc++,e.sub.flags&4){let t=e.dep.computed;if(t&&!e.dep.subs){t.flags|=20;for(let e=t.deps;e;e=e.nextDep)kt(e)}let n=e.dep.subs;n!==e&&(e.prevSub=n,n&&(n.nextSub=e)),process.env.NODE_ENV!==`production`&&e.dep.subsHead===void 0&&(e.dep.subsHead=e),e.dep.subs=e}}const At=new WeakMap,jt=Symbol(process.env.NODE_ENV===`production`?``:`Object iterate`),Mt=Symbol(process.env.NODE_ENV===`production`?``:`Map keys iterate`),Nt=Symbol(process.env.NODE_ENV===`production`?``:`Array iterate`);function Pt(e,t,n){if(xt&&M){let r=At.get(e);r||At.set(e,r=new Map);let i=r.get(n);i||(r.set(n,i=new Ot),i.map=r,i.key=n),process.env.NODE_ENV===`production`?i.track():i.track({target:e,type:t,key:n})}}function Ft(e,t,n,r,i,a){let o=At.get(e);if(!o){Et++;return}let s=o=>{o&&(process.env.NODE_ENV===`production`?o.trigger():o.trigger({target:e,type:t,key:n,newValue:r,oldValue:i,oldTarget:a}))};if(dt(),t===`clear`)o.forEach(s);else{let i=S(e),a=i&&se(n);if(i&&n===`length`){let e=Number(r);o.forEach((t,n)=>{(n===`length`||n===Nt||!ne(n)&&n>=e)&&s(t)})}else switch((n!==void 0||o.has(void 0))&&s(o.get(n)),a&&s(o.get(Nt)),t){case`add`:i?a&&s(o.get(`length`)):(s(o.get(jt)),C(e)&&s(o.get(Mt)));break;case`delete`:i||(s(o.get(jt)),C(e)&&s(o.get(Mt)));break;case`set`:C(e)&&s(o.get(jt));break}}ft()}function It(e,t){let n=At.get(e);return n&&n.get(t)}function Lt(e){let t=N(e);return t===e?t:(Pt(t,`iterate`,Nt),Dn(e)?t:t.map(An))}function Rt(e){return Pt(e=N(e),`iterate`,Nt),e}const zt={__proto__:null,[Symbol.iterator](){return Bt(this,Symbol.iterator,An)},concat(...e){return Lt(this).concat(...e.map(e=>S(e)?Lt(e):e))},entries(){return Bt(this,`entries`,e=>(e[1]=An(e[1]),e))},every(e,t){return Ht(this,`every`,e,t,void 0,arguments)},filter(e,t){return Ht(this,`filter`,e,t,e=>e.map(An),arguments)},find(e,t){return Ht(this,`find`,e,t,An,arguments)},findIndex(e,t){return Ht(this,`findIndex`,e,t,void 0,arguments)},findLast(e,t){return Ht(this,`findLast`,e,t,An,arguments)},findLastIndex(e,t){return Ht(this,`findLastIndex`,e,t,void 0,arguments)},forEach(e,t){return Ht(this,`forEach`,e,t,void 0,arguments)},includes(...e){return Wt(this,`includes`,e)},indexOf(...e){return Wt(this,`indexOf`,e)},join(e){return Lt(this).join(e)},lastIndexOf(...e){return Wt(this,`lastIndexOf`,e)},map(e,t){return Ht(this,`map`,e,t,void 0,arguments)},pop(){return Gt(this,`pop`)},push(...e){return Gt(this,`push`,e)},reduce(e,...t){return Ut(this,`reduce`,e,t)},reduceRight(e,...t){return Ut(this,`reduceRight`,e,t)},shift(){return Gt(this,`shift`)},some(e,t){return Ht(this,`some`,e,t,void 0,arguments)},splice(...e){return Gt(this,`splice`,e)},toReversed(){return Lt(this).toReversed()},toSorted(e){return Lt(this).toSorted(e)},toSpliced(...e){return Lt(this).toSpliced(...e)},unshift(...e){return Gt(this,`unshift`,e)},values(){return Bt(this,`values`,An)}};function Bt(e,t,n){let r=Rt(e),i=r[t]();return r!==e&&!Dn(e)&&(i._next=i.next,i.next=()=>{let e=i._next();return e.value&&=n(e.value),e}),i}const Vt=Array.prototype;function Ht(e,t,n,r,i,a){let o=Rt(e),s=o!==e&&!Dn(e),c=o[t];if(c!==Vt[t]){let t=c.apply(e,a);return s?An(t):t}let l=n;o!==e&&(s?l=function(t,r){return n.call(this,An(t),r,e)}:n.length>2&&(l=function(t,r){return n.call(this,t,r,e)}));let u=c.call(o,l,r);return s&&i?i(u):u}function Ut(e,t,n,r){let i=Rt(e),a=n;return i!==e&&(Dn(e)?n.length>3&&(a=function(t,r,i){return n.call(this,t,r,i,e)}):a=function(t,r,i){return n.call(this,t,An(r),i,e)}),i[t](a,...r)}function Wt(e,t,n){let r=N(e);Pt(r,`iterate`,Nt);let i=r[t](...n);return(i===-1||i===!1)&&On(n[0])?(n[0]=N(n[0]),r[t](...n)):i}function Gt(e,t,n=[]){Ct(),dt();let r=N(e)[t].apply(e,n);return ft(),wt(),r}const Kt=d(`__proto__,__v_isRef,__isVue`),qt=new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!==`arguments`&&e!==`caller`).map(e=>Symbol[e]).filter(ne));function Jt(e){ne(e)||(e=String(e));let t=N(this);return Pt(t,`has`,e),t.hasOwnProperty(e)}var Yt=class{constructor(e=!1,t=!1){this._isReadonly=e,this._isShallow=t}get(e,t,n){if(t===`__v_skip`)return e.__v_skip;let r=this._isReadonly,i=this._isShallow;if(t===`__v_isReactive`)return!r;if(t===`__v_isReadonly`)return r;if(t===`__v_isShallow`)return i;if(t===`__v_raw`)return n===(r?i?_n:gn:i?hn:mn).get(e)||Object.getPrototypeOf(e)===Object.getPrototypeOf(n)?e:void 0;let a=S(e);if(!r){let e;if(a&&(e=zt[t]))return e;if(t===`hasOwnProperty`)return Jt}let o=Reflect.get(e,t,P(e)?e:n);return(ne(t)?qt.has(t):Kt(t))||(r||Pt(e,`get`,t),i)?o:P(o)?a&&se(t)?o:o.value:D(o)?r?Sn(o):bn(o):o}},Xt=class extends Yt{constructor(e=!1){super(!1,e)}set(e,t,n,r){let i=e[t];if(!this._isShallow){let t=En(i);if(!Dn(n)&&!En(n)&&(i=N(i),n=N(n)),!S(e)&&P(i)&&!P(n))return t?!1:(i.value=n,!0)}let a=S(e)&&se(t)?Number(t)<e.length:x(e,t),o=Reflect.set(e,t,n,P(e)?e:r);return e===N(r)&&(a?he(n,i)&&Ft(e,`set`,t,n,i):Ft(e,`add`,t,n)),o}deleteProperty(e,t){let n=x(e,t),r=e[t],i=Reflect.deleteProperty(e,t);return i&&n&&Ft(e,`delete`,t,void 0,r),i}has(e,t){let n=Reflect.has(e,t);return(!ne(t)||!qt.has(t))&&Pt(e,`has`,t),n}ownKeys(e){return Pt(e,`iterate`,S(e)?`length`:jt),Reflect.ownKeys(e)}},Zt=class extends Yt{constructor(e=!1){super(!0,e)}set(e,t){return process.env.NODE_ENV!==`production`&&$e(`Set operation on key "${String(t)}" failed: target is readonly.`,e),!0}deleteProperty(e,t){return process.env.NODE_ENV!==`production`&&$e(`Delete operation on key "${String(t)}" failed: target is readonly.`,e),!0}};const Qt=new Xt,$t=new Zt,en=new Xt(!0),tn=new Zt(!0),nn=e=>e,rn=e=>Reflect.getPrototypeOf(e);function an(e,t,n){return function(...r){let i=this.__v_raw,a=N(i),o=C(a),s=e===`entries`||e===Symbol.iterator&&o,c=e===`keys`&&o,l=i[e](...r),u=n?nn:t?jn:An;return!t&&Pt(a,`iterate`,c?Mt:jt),{next(){let{value:e,done:t}=l.next();return t?{value:e,done:t}:{value:s?[u(e[0]),u(e[1])]:u(e),done:t}},[Symbol.iterator](){return this}}}}function on(e){return function(...t){if(process.env.NODE_ENV!==`production`){let n=t[0]?`on key "${t[0]}" `:``;$e(`${pe(e)} operation ${n}failed: target is readonly.`,N(this))}return e===`delete`?!1:e===`clear`?void 0:this}}function sn(e,t){let n={get(n){let r=this.__v_raw,i=N(r),a=N(n);e||(he(n,a)&&Pt(i,`get`,n),Pt(i,`get`,a));let{has:o}=rn(i),s=t?nn:e?jn:An;if(o.call(i,n))return s(r.get(n));if(o.call(i,a))return s(r.get(a));r!==i&&r.get(n)},get size(){let t=this.__v_raw;return!e&&Pt(N(t),`iterate`,jt),Reflect.get(t,`size`,t)},has(t){let n=this.__v_raw,r=N(n),i=N(t);return e||(he(t,i)&&Pt(r,`has`,t),Pt(r,`has`,i)),t===i?n.has(t):n.has(t)||n.has(i)},forEach(n,r){let i=this,a=i.__v_raw,o=N(a),s=t?nn:e?jn:An;return!e&&Pt(o,`iterate`,jt),a.forEach((e,t)=>n.call(r,s(e),s(t),i))}};v(n,e?{add:on(`add`),set:on(`set`),delete:on(`delete`),clear:on(`clear`)}:{add(e){!t&&!Dn(e)&&!En(e)&&(e=N(e));let n=N(this),r=rn(n),i=r.has.call(n,e);return i||(n.add(e),Ft(n,`add`,e,e)),this},set(e,n){!t&&!Dn(n)&&!En(n)&&(n=N(n));let r=N(this),{has:i,get:a}=rn(r),o=i.call(r,e);o?process.env.NODE_ENV!==`production`&&pn(r,i,e):(e=N(e),o=i.call(r,e));let s=a.call(r,e);return r.set(e,n),o?he(n,s)&&Ft(r,`set`,e,n,s):Ft(r,`add`,e,n),this},delete(e){let t=N(this),{has:n,get:r}=rn(t),i=n.call(t,e);i?process.env.NODE_ENV!==`production`&&pn(t,n,e):(e=N(e),i=n.call(t,e));let a=r?r.call(t,e):void 0,o=t.delete(e);return i&&Ft(t,`delete`,e,void 0,a),o},clear(){let e=N(this),t=e.size!==0,n=process.env.NODE_ENV===`production`?void 0:C(e)?new Map(e):new Set(e),r=e.clear();return t&&Ft(e,`clear`,void 0,void 0,n),r}});let r=[`keys`,`values`,`entries`,Symbol.iterator];return r.forEach(r=>{n[r]=an(r,e,t)}),n}function cn(e,t){let n=sn(e,t);return(t,r,i)=>r===`__v_isReactive`?!e:r===`__v_isReadonly`?e:r===`__v_raw`?t:Reflect.get(x(n,r)&&r in t?n:t,r,i)}const ln={get:cn(!1,!1)},un={get:cn(!1,!0)},dn={get:cn(!0,!1)},fn={get:cn(!0,!0)};function pn(e,t,n){let r=N(n);if(r!==n&&t.call(e,r)){let t=O(e);$e(`Reactive ${t} contains both the raw and reactive versions of the same object${t===`Map`?` as keys`:``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`)}}const mn=new WeakMap,hn=new WeakMap,gn=new WeakMap,_n=new WeakMap;function vn(e){switch(e){case`Object`:case`Array`:return 1;case`Map`:case`Set`:case`WeakMap`:case`WeakSet`:return 2;default:return 0}}function yn(e){return e.__v_skip||!Object.isExtensible(e)?0:vn(O(e))}function bn(e){return En(e)?e:wn(e,!1,Qt,ln,mn)}function xn(e){return wn(e,!1,en,un,hn)}function Sn(e){return wn(e,!0,$t,dn,gn)}function Cn(e){return wn(e,!0,tn,fn,_n)}function wn(e,t,n,r,i){if(!D(e))return process.env.NODE_ENV!==`production`&&$e(`value cannot be made ${t?`readonly`:`reactive`}: ${String(e)}`),e;if(e.__v_raw&&!(t&&e.__v_isReactive))return e;let a=yn(e);if(a===0)return e;let o=i.get(e);if(o)return o;let s=new Proxy(e,a===2?r:n);return i.set(e,s),s}function Tn(e){return En(e)?Tn(e.__v_raw):!!(e&&e.__v_isReactive)}function En(e){return!!(e&&e.__v_isReadonly)}function Dn(e){return!!(e&&e.__v_isShallow)}function On(e){return e?!!e.__v_raw:!1}function N(e){let t=e&&e.__v_raw;return t?N(t):e}function kn(e){return!x(e,`__v_skip`)&&Object.isExtensible(e)&&_e(e,`__v_skip`,!0),e}const An=e=>D(e)?bn(e):e,jn=e=>D(e)?Sn(e):e;function P(e){return e?e.__v_isRef===!0:!1}function F(e){return Nn(e,!1)}function Mn(e){return Nn(e,!0)}function Nn(e,t){return P(e)?e:new Pn(e,t)}var Pn=class{constructor(e,t){this.dep=new Ot,this.__v_isRef=!0,this.__v_isShallow=!1,this._rawValue=t?e:N(e),this._value=t?e:An(e),this.__v_isShallow=t}get value(){return process.env.NODE_ENV===`production`?this.dep.track():this.dep.track({target:this,type:`get`,key:`value`}),this._value}set value(e){let t=this._rawValue,n=this.__v_isShallow||Dn(e)||En(e);e=n?e:N(e),he(e,t)&&(this._rawValue=e,this._value=n?e:An(e),process.env.NODE_ENV===`production`?this.dep.trigger():this.dep.trigger({target:this,type:`set`,key:`value`,newValue:e,oldValue:t}))}};function Fn(e){e.dep&&(process.env.NODE_ENV===`production`?e.dep.trigger():e.dep.trigger({target:e,type:`set`,key:`value`,newValue:e._value}))}function I(e){return P(e)?e.value:e}function In(e){return T(e)?e():I(e)}const Ln={get:(e,t,n)=>t===`__v_raw`?e:I(Reflect.get(e,t,n)),set:(e,t,n,r)=>{let i=e[t];return P(i)&&!P(n)?(i.value=n,!0):Reflect.set(e,t,n,r)}};function Rn(e){return Tn(e)?e:new Proxy(e,Ln)}var zn=class{constructor(e){this.__v_isRef=!0,this._value=void 0;let t=this.dep=new Ot,{get:n,set:r}=e(t.track.bind(t),t.trigger.bind(t));this._get=n,this._set=r}get value(){return this._value=this._get()}set value(e){this._set(e)}};function Bn(e){return new zn(e)}function Vn(e){process.env.NODE_ENV!==`production`&&!On(e)&&$e(`toRefs() expects a reactive object but received a plain one.`);let t=S(e)?Array(e.length):{};for(let n in e)t[n]=Gn(e,n);return t}var Hn=class{constructor(e,t,n){this._object=e,this._key=t,this._defaultValue=n,this.__v_isRef=!0,this._value=void 0}get value(){let e=this._object[this._key];return this._value=e===void 0?this._defaultValue:e}set value(e){this._object[this._key]=e}get dep(){return It(N(this._object),this._key)}},Un=class{constructor(e){this._getter=e,this.__v_isRef=!0,this.__v_isReadonly=!0,this._value=void 0}get value(){return this._value=this._getter()}};function Wn(e,t,n){return P(e)?e:T(e)?new Un(e):D(e)&&arguments.length>1?Gn(e,t,n):F(e)}function Gn(e,t,n){let r=e[t];return P(r)?r:new Hn(e,t,n)}var Kn=class{constructor(e,t,n){this.fn=e,this.setter=t,this._value=void 0,this.dep=new Ot(this),this.__v_isRef=!0,this.deps=void 0,this.depsTail=void 0,this.flags=16,this.globalVersion=Et-1,this.next=void 0,this.effect=this,this.__v_isReadonly=!t,this.isSSR=n}notify(){if(this.flags|=16,!(this.flags&8)&&M!==this)return ut(this,!0),!0;process.env.NODE_ENV}get value(){let e=process.env.NODE_ENV===`production`?this.dep.track():this.dep.track({target:this,type:`get`,key:`value`});return gt(this),e&&(e.version=this.dep.version),this._value}set value(e){this.setter?this.setter(e):process.env.NODE_ENV!==`production`&&$e(`Write operation failed: computed value is readonly`)}};function qn(e,t,n=!1){let r,i;T(e)?r=e:(r=e.get,i=e.set);let a=new Kn(r,i,n);return process.env.NODE_ENV!==`production`&&t&&!n&&(a.onTrack=t.onTrack,a.onTrigger=t.onTrigger),a}const Jn={GET:`get`,HAS:`has`,ITERATE:`iterate`},Yn={SET:`set`,ADD:`add`,DELETE:`delete`,CLEAR:`clear`},Xn={},Zn=new WeakMap;let Qn;function $n(){return Qn}function er(e,t=!1,n=Qn){if(n){let t=Zn.get(n);t||Zn.set(n,t=[]),t.push(e)}else process.env.NODE_ENV!==`production`&&!t&&$e(`onWatcherCleanup() was called when there was no active watcher to associate with.`)}function tr(e,t,n=f){let{immediate:r,deep:i,once:a,scheduler:o,augmentJob:s,call:c}=n,l=e=>{(n.onWarn||$e)(`Invalid watch source: `,e,`A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.`)},u=e=>i?e:Dn(e)||i===!1||i===0?nr(e,1):nr(e),d,p,h,g,_=!1,v=!1;if(P(e)?(p=()=>e.value,_=Dn(e)):Tn(e)?(p=()=>u(e),_=!0):S(e)?(v=!0,_=e.some(e=>Tn(e)||Dn(e)),p=()=>e.map(e=>{if(P(e))return e.value;if(Tn(e))return u(e);if(T(e))return c?c(e,2):e();process.env.NODE_ENV!==`production`&&l(e)})):T(e)?p=t?c?()=>c(e,2):e:()=>{if(h){Ct();try{h()}finally{wt()}}let t=Qn;Qn=d;try{return c?c(e,3,[g]):e(g)}finally{Qn=t}}:(p=m,process.env.NODE_ENV!==`production`&&l(e)),t&&i){let e=p,t=i===!0?1/0:i;p=()=>nr(e(),t)}let b=rt(),x=()=>{d.stop(),b&&b.active&&y(b.effects,d)};if(a&&t){let e=t;t=(...t)=>{e(...t),x()}}let C=v?Array(e.length).fill(Xn):Xn,w=e=>{if(!(!(d.flags&1)||!d.dirty&&!e))if(t){let e=d.run();if(i||_||(v?e.some((e,t)=>he(e,C[t])):he(e,C))){h&&h();let n=Qn;Qn=d;try{let n=[e,C===Xn?void 0:v&&C[0]===Xn?[]:C,g];C=e,c?c(t,3,n):t(...n)}finally{Qn=n}}}else d.run()};return s&&s(w),d=new ot(p),d.scheduler=o?()=>o(w,!1):w,g=e=>er(e,!1,d),h=d.onStop=()=>{let e=Zn.get(d);if(e){if(c)c(e,4);else for(let t of e)t();Zn.delete(d)}},process.env.NODE_ENV!==`production`&&(d.onTrack=n.onTrack,d.onTrigger=n.onTrigger),t?r?w(!0):C=d.run():o?o(w.bind(null,!0),!0):d.run(),x.pause=d.pause.bind(d),x.resume=d.resume.bind(d),x.stop=x,x}function nr(e,t=1/0,n){if(t<=0||!D(e)||e.__v_skip||(n||=new Set,n.has(e)))return e;if(n.add(e),t--,P(e))nr(e.value,t,n);else if(S(e))for(let r=0;r<e.length;r++)nr(e[r],t,n);else if(w(e)||C(e))e.forEach(e=>{nr(e,t,n)});else if(oe(e)){for(let r in e)nr(e[r],t,n);for(let r of Object.getOwnPropertySymbols(e))Object.prototype.propertyIsEnumerable.call(e,r)&&nr(e[r],t,n)}return e}const rr=[];function ir(e){rr.push(e)}function ar(){rr.pop()}let or=!1;function L(e,...t){if(or)return;or=!0,Ct();let n=rr.length?rr[rr.length-1].component:null,r=n&&n.appContext.config.warnHandler,i=sr();if(r)hr(r,n,11,[e+t.map(e=>{var t,n;return(n=(t=e.toString)?.call(e))??JSON.stringify(e)}).join(``),n&&n.proxy,i.map(({vnode:e})=>`at <${Pl(n,e.type)}>`).join(`
`),i]);else{let n=[`[Vue warn]: ${e}`,...t];i.length&&n.push(`
`,...cr(i)),console.warn(...n)}wt(),or=!1}function sr(){let e=rr[rr.length-1];if(!e)return[];let t=[];for(;e;){let n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});let r=e.component&&e.component.parent;e=r&&r.vnode}return t}function cr(e){let t=[];return e.forEach((e,n)=>{t.push(...n===0?[]:[`
`],...lr(e))}),t}function lr({vnode:e,recurseCount:t}){let n=t>0?`... (${t} recursive calls)`:``,r=e.component?e.component.parent==null:!1,i=` at <${Pl(e.component,e.type,r)}`,a=`>`+n;return e.props?[i,...ur(e.props),a]:[i+a]}function ur(e){let t=[],n=Object.keys(e);return n.slice(0,3).forEach(n=>{t.push(...dr(n,e[n]))}),n.length>3&&t.push(` ...`),t}function dr(e,t,n){return E(t)?(t=JSON.stringify(t),n?t:[`${e}=${t}`]):typeof t==`number`||typeof t==`boolean`||t==null?n?t:[`${e}=${t}`]:P(t)?(t=dr(e,N(t.value),!0),n?t:[`${e}=Ref<`,t,`>`]):T(t)?[`${e}=fn${t.name?`<${t.name}>`:``}`]:(t=N(t),n?t:[`${e}=`,t])}function fr(e,t){process.env.NODE_ENV!==`production`&&e!==void 0&&(typeof e==`number`?isNaN(e)&&L(`${t} is NaN - the duration expression might be incorrect.`):L(`${t} is not a valid number - got ${JSON.stringify(e)}.`))}const pr={SETUP_FUNCTION:0,0:`SETUP_FUNCTION`,RENDER_FUNCTION:1,1:`RENDER_FUNCTION`,NATIVE_EVENT_HANDLER:5,5:`NATIVE_EVENT_HANDLER`,COMPONENT_EVENT_HANDLER:6,6:`COMPONENT_EVENT_HANDLER`,VNODE_HOOK:7,7:`VNODE_HOOK`,DIRECTIVE_HOOK:8,8:`DIRECTIVE_HOOK`,TRANSITION_HOOK:9,9:`TRANSITION_HOOK`,APP_ERROR_HANDLER:10,10:`APP_ERROR_HANDLER`,APP_WARN_HANDLER:11,11:`APP_WARN_HANDLER`,FUNCTION_REF:12,12:`FUNCTION_REF`,ASYNC_COMPONENT_LOADER:13,13:`ASYNC_COMPONENT_LOADER`,SCHEDULER:14,14:`SCHEDULER`,COMPONENT_UPDATE:15,15:`COMPONENT_UPDATE`,APP_UNMOUNT_CLEANUP:16,16:`APP_UNMOUNT_CLEANUP`},mr={sp:`serverPrefetch hook`,bc:`beforeCreate hook`,c:`created hook`,bm:`beforeMount hook`,m:`mounted hook`,bu:`beforeUpdate hook`,u:`updated`,bum:`beforeUnmount hook`,um:`unmounted hook`,a:`activated hook`,da:`deactivated hook`,ec:`errorCaptured hook`,rtc:`renderTracked hook`,rtg:`renderTriggered hook`,0:`setup function`,1:`render function`,2:`watcher getter`,3:`watcher callback`,4:`watcher cleanup function`,5:`native event handler`,6:`component event handler`,7:`vnode hook`,8:`directive hook`,9:`transition hook`,10:`app errorHandler`,11:`app warnHandler`,12:`ref function`,13:`async component loader`,14:`scheduler flush`,15:`component update`,16:`app unmount cleanup function`};function hr(e,t,n,r){try{return r?e(...r):e()}catch(e){_r(e,t,n)}}function gr(e,t,n,r){if(T(e)){let i=hr(e,t,n,r);return i&&re(i)&&i.catch(e=>{_r(e,t,n)}),i}if(S(e)){let i=[];for(let a=0;a<e.length;a++)i.push(gr(e[a],t,n,r));return i}else process.env.NODE_ENV!==`production`&&L(`Invalid value type passed to callWithAsyncErrorHandling(): ${typeof e}`)}function _r(e,t,n,r=!0){let i=t?t.vnode:null,{errorHandler:a,throwUnhandledErrorInProduction:o}=t&&t.appContext.config||f;if(t){let r=t.parent,i=t.proxy,o=process.env.NODE_ENV===`production`?`https://vuejs.org/error-reference/#runtime-${n}`:mr[n];for(;r;){let t=r.ec;if(t){for(let n=0;n<t.length;n++)if(t[n](e,i,o)===!1)return}r=r.parent}if(a){Ct(),hr(a,null,10,[e,i,o]),wt();return}}vr(e,n,i,r,o)}function vr(e,t,n,r=!0,i=!1){if(process.env.NODE_ENV!==`production`){let i=mr[t];if(n&&ir(n),L(`Unhandled error${i?` during execution of ${i}`:``}`),n&&ar(),r)throw e;console.error(e)}else if(i)throw e;else console.error(e)}const yr=[];let br=-1;const xr=[];let Sr=null,Cr=0;const wr=Promise.resolve();let Tr=null;const Er=100;function Dr(e){let t=Tr||wr;return e?t.then(this?e.bind(this):e):t}function Or(e){let t=br+1,n=yr.length;for(;t<n;){let r=t+n>>>1,i=yr[r],a=Pr(i);a<e||a===e&&i.flags&2?t=r+1:n=r}return t}function kr(e){if(!(e.flags&1)){let t=Pr(e),n=yr[yr.length-1];!n||!(e.flags&2)&&t>=Pr(n)?yr.push(e):yr.splice(Or(t),0,e),e.flags|=1,Ar()}}function Ar(){Tr||=wr.then(Fr)}function jr(e){S(e)?xr.push(...e):Sr&&e.id===-1?Sr.splice(Cr+1,0,e):e.flags&1||(xr.push(e),e.flags|=1),Ar()}function Mr(e,t,n=br+1){for(process.env.NODE_ENV!==`production`&&(t||=new Map);n<yr.length;n++){let r=yr[n];if(r&&r.flags&2){if(e&&r.id!==e.uid||process.env.NODE_ENV!==`production`&&Ir(t,r))continue;yr.splice(n,1),n--,r.flags&4&&(r.flags&=-2),r(),r.flags&4||(r.flags&=-2)}}}function Nr(e){if(xr.length){let t=[...new Set(xr)].sort((e,t)=>Pr(e)-Pr(t));if(xr.length=0,Sr){Sr.push(...t);return}for(Sr=t,process.env.NODE_ENV!==`production`&&(e||=new Map),Cr=0;Cr<Sr.length;Cr++){let t=Sr[Cr];process.env.NODE_ENV!==`production`&&Ir(e,t)||(t.flags&4&&(t.flags&=-2),t.flags&8||t(),t.flags&=-2)}Sr=null,Cr=0}}const Pr=e=>e.id==null?e.flags&2?-1:1/0:e.id;function Fr(e){process.env.NODE_ENV!==`production`&&(e||=new Map);let t=process.env.NODE_ENV===`production`?m:t=>Ir(e,t);try{for(br=0;br<yr.length;br++){let e=yr[br];if(e&&!(e.flags&8)){if(process.env.NODE_ENV!==`production`&&t(e))continue;e.flags&4&&(e.flags&=-2),hr(e,e.i,e.i?15:14),e.flags&4||(e.flags&=-2)}}}finally{for(;br<yr.length;br++){let e=yr[br];e&&(e.flags&=-2)}br=-1,yr.length=0,Nr(e),Tr=null,(yr.length||xr.length)&&Fr(e)}}function Ir(e,t){let n=e.get(t)||0;if(n>Er){let e=t.i,n=e&&Nl(e.type);return _r(`Maximum recursive updates exceeded${n?` in component <${n}>`:``}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`,null,10),!0}return e.set(t,n+1),!1}let Lr=!1;const Rr=new Map;process.env.NODE_ENV!==`production`&&(xe().__VUE_HMR_RUNTIME__={createRecord:qr(Hr),rerender:qr(Wr),reload:qr(Gr)});const zr=new Map;function Br(e){let t=e.type.__hmrId,n=zr.get(t);n||(Hr(t,e.type),n=zr.get(t)),n.instances.add(e)}function Vr(e){zr.get(e.type.__hmrId).instances.delete(e)}function Hr(e,t){return zr.has(e)?!1:(zr.set(e,{initialDef:Ur(t),instances:new Set}),!0)}function Ur(e){return Fl(e)?e.__vccOpts:e}function Wr(e,t){let n=zr.get(e);n&&(n.initialDef.render=t,[...n.instances].forEach(e=>{t&&(e.render=t,Ur(e.type).render=t),e.renderCache=[],Lr=!0,e.update(),Lr=!1}))}function Gr(e,t){let n=zr.get(e);if(!n)return;t=Ur(t),Kr(n.initialDef,t);let r=[...n.instances];for(let e=0;e<r.length;e++){let i=r[e],a=Ur(i.type),o=Rr.get(a);o||(a!==n.initialDef&&Kr(a,t),Rr.set(a,o=new Set)),o.add(i),i.appContext.propsCache.delete(i.type),i.appContext.emitsCache.delete(i.type),i.appContext.optionsCache.delete(i.type),i.ceReload?(o.add(i),i.ceReload(t.styles),o.delete(i)):i.parent?kr(()=>{Lr=!0,i.parent.update(),Lr=!1,o.delete(i)}):i.appContext.reload?i.appContext.reload():typeof window<`u`?window.location.reload():console.warn(`[HMR] Root or manually mounted instance modified. Full reload required.`),i.root.ce&&i!==i.root&&i.root.ce._removeChildStyle(a)}jr(()=>{Rr.clear()})}function Kr(e,t){for(let n in v(e,t),e)n!==`__file`&&!(n in t)&&delete e[n]}function qr(e){return(t,n)=>{try{return e(t,n)}catch(e){console.error(e),console.warn(`[HMR] Something went wrong during Vue component hot-reload. Full reload required.`)}}}let Jr,Yr=[],Xr=!1;function Zr(e,...t){Jr?Jr.emit(e,...t):Xr||Yr.push({event:e,args:t})}function Qr(e,t){var n,r;if(Jr=e,Jr)Jr.enabled=!0,Yr.forEach(({event:e,args:t})=>Jr.emit(e,...t)),Yr=[];else if(typeof window<`u`&&window.HTMLElement&&!(r=(n=window.navigator)?.userAgent)?.includes(`jsdom`)){let e=t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[];e.push(e=>{Qr(e,t)}),setTimeout(()=>{Jr||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,Xr=!0,Yr=[])},3e3)}else Xr=!0,Yr=[]}function $r(e,t){Zr(`app:init`,e,t,{Fragment:B,Text:Pc,Comment:V,Static:Fc})}function ei(e){Zr(`app:unmount`,e)}const ti=ai(`component:added`),ni=ai(`component:updated`),ri=ai(`component:removed`),ii=e=>{Jr&&typeof Jr.cleanupBuffer==`function`&&!Jr.cleanupBuffer(e)&&ri(e)};
/*! #__NO_SIDE_EFFECTS__ */
function ai(e){return t=>{Zr(e,t.appContext.app,t.uid,t.parent?t.parent.uid:void 0,t)}}const oi=ci(`perf:start`),si=ci(`perf:end`);function ci(e){return(t,n,r)=>{Zr(e,t.appContext.app,t.uid,t,n,r)}}function li(e,t,n){Zr(`component:emit`,e.appContext.app,e,t,n)}let ui=null,di=null;function fi(e){let t=ui;return ui=e,di=e&&e.type.__scopeId||null,t}function pi(e){di=e}function mi(){di=null}const hi=e=>R;function R(e,t=ui,n){if(!t||e._n)return e;let r=(...n)=>{r._d&&Bc(-1);let i=fi(t),a;try{a=e(...n)}finally{fi(i),r._d&&Bc(1)}return process.env.NODE_ENV!==`production`&&ni(t),a};return r._n=!0,r._c=!0,r._d=!0,r}function gi(e){le(e)&&L(`Do not use built-in directive ids as custom directive id: `+e)}function _i(e,t){if(ui===null)return process.env.NODE_ENV!==`production`&&L(`withDirectives can only be used inside render functions.`),e;let n=Al(ui),r=e.dirs||=[];for(let e=0;e<t.length;e++){let[i,a,o,s=f]=t[e];i&&(T(i)&&(i={mounted:i,updated:i}),i.deep&&nr(a),r.push({dir:i,instance:n,value:a,oldValue:void 0,arg:o,modifiers:s}))}return e}function vi(e,t,n,r){let i=e.dirs,a=t&&t.dirs;for(let o=0;o<i.length;o++){let s=i[o];a&&(s.oldValue=a[o].value);let c=s.dir[r];c&&(Ct(),gr(c,n,8,[e.el,s,e,t]),wt())}}const yi=Symbol(`_vte`),bi=e=>e.__isTeleport,xi=e=>e&&(e.disabled||e.disabled===``),Si=e=>e&&(e.defer||e.defer===``),Ci=e=>typeof SVGElement<`u`&&e instanceof SVGElement,wi=e=>typeof MathMLElement==`function`&&e instanceof MathMLElement,Ti=(e,t)=>{let n=e&&e.to;if(E(n))if(t){let r=t(n);return process.env.NODE_ENV!==`production`&&!r&&!xi(e)&&L(`Failed to locate Teleport target with selector "${n}". Note the target element must exist before the component is mounted - i.e. the target cannot be rendered by the component itself, and ideally should be outside of the entire Vue component tree.`),r}else return process.env.NODE_ENV!==`production`&&L(`Current renderer does not support string target for Teleports. (missing querySelector renderer option)`),null;else return process.env.NODE_ENV!==`production`&&!n&&!xi(e)&&L(`Invalid Teleport target: ${n}`),n},Ei={name:`Teleport`,__isTeleport:!0,process(e,t,n,r,i,a,o,s,c,l){let{mc:u,pc:d,pbc:f,o:{insert:p,querySelector:m,createText:h,createComment:g}}=l,_=xi(t.props),{shapeFlag:v,children:y,dynamicChildren:b}=t;if(process.env.NODE_ENV!==`production`&&Lr&&(c=!1,b=null),e==null){let e=t.el=process.env.NODE_ENV===`production`?h(``):g(`teleport start`),l=t.anchor=process.env.NODE_ENV===`production`?h(``):g(`teleport end`);p(e,n,r),p(l,n,r);let d=(e,t)=>{v&16&&(i&&i.isCE&&(i.ce._teleportTarget=e),u(y,e,t,i,a,o,s,c))},f=()=>{let e=t.target=Ti(t.props,m),n=ji(e,t,h,p);e?(o!==`svg`&&Ci(e)?o=`svg`:o!==`mathml`&&wi(e)&&(o=`mathml`),_||(d(e,n),Ai(t,!1))):process.env.NODE_ENV!==`production`&&!_&&L(`Invalid Teleport target on mount:`,e,`(${typeof e})`)};_&&(d(n,l),Ai(t,!0)),Si(t.props)?(t.el.__isMounted=!1,Ls(()=>{f(),delete t.el.__isMounted},a)):f()}else{if(Si(t.props)&&e.el.__isMounted===!1){Ls(()=>{Ei.process(e,t,n,r,i,a,o,s,c,l)},a);return}t.el=e.el,t.targetStart=e.targetStart;let u=t.anchor=e.anchor,p=t.target=e.target,h=t.targetAnchor=e.targetAnchor,g=xi(e.props),v=g?n:p,y=g?u:h;if(o===`svg`||Ci(p)?o=`svg`:(o===`mathml`||wi(p))&&(o=`mathml`),b?(f(e.dynamicChildren,b,v,i,a,o,s),Ws(e,t,process.env.NODE_ENV===`production`)):c||d(e,t,v,y,i,a,o,s,!1),_)g?t.props&&e.props&&t.props.to!==e.props.to&&(t.props.to=e.props.to):Di(t,n,u,l,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){let e=t.target=Ti(t.props,m);e?Di(t,e,null,l,0):process.env.NODE_ENV!==`production`&&L(`Invalid Teleport target on update:`,p,`(${typeof p})`)}else g&&Di(t,p,h,l,1);Ai(t,_)}},remove(e,t,n,{um:r,o:{remove:i}},a){let{shapeFlag:o,children:s,anchor:c,targetStart:l,targetAnchor:u,target:d,props:f}=e;if(d&&(i(l),i(u)),a&&i(c),o&16){let e=a||!xi(f);for(let i=0;i<s.length;i++){let a=s[i];r(a,t,n,e,!!a.dynamicChildren)}}},move:Di,hydrate:Oi};function Di(e,t,n,{o:{insert:r},m:i},a=2){a===0&&r(e.targetAnchor,t,n);let{el:o,anchor:s,shapeFlag:c,children:l,props:u}=e,d=a===2;if(d&&r(o,t,n),(!d||xi(u))&&c&16)for(let e=0;e<l.length;e++)i(l[e],t,n,2);d&&r(s,t,n)}function Oi(e,t,n,r,i,a,{o:{nextSibling:o,parentNode:s,querySelector:c,insert:l,createText:u}},d){let f=t.target=Ti(t.props,c);if(f){let c=xi(t.props),p=f._lpa||f.firstChild;if(t.shapeFlag&16)if(c)t.anchor=d(o(e),t,s(e),n,r,i,a),t.targetStart=p,t.targetAnchor=p&&o(p);else{t.anchor=o(e);let s=p;for(;s;){if(s&&s.nodeType===8){if(s.data===`teleport start anchor`)t.targetStart=s;else if(s.data===`teleport anchor`){t.targetAnchor=s,f._lpa=t.targetAnchor&&o(t.targetAnchor);break}}s=o(s)}t.targetAnchor||ji(f,t,u,l),d(p&&o(p),t,f,n,r,i,a)}Ai(t,c)}return t.anchor&&o(t.anchor)}const ki=Ei;function Ai(e,t){let n=e.ctx;if(n&&n.ut){let r,i;for(t?(r=e.el,i=e.anchor):(r=e.targetStart,i=e.targetAnchor);r&&r!==i;)r.nodeType===1&&r.setAttribute(`data-v-owner`,n.uid),r=r.nextSibling;n.ut()}}function ji(e,t,n,r){let i=t.targetStart=n(``),a=t.targetAnchor=n(``);return i[yi]=a,e&&(r(i,e),r(a,e)),a}const Mi=Symbol(`_leaveCb`),Ni=Symbol(`_enterCb`);function Pi(){let e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return Ra(()=>{e.isMounted=!0}),Va(()=>{e.isUnmounting=!0}),e}const Fi=[Function,Array],Ii={mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:Fi,onEnter:Fi,onAfterEnter:Fi,onEnterCancelled:Fi,onBeforeLeave:Fi,onLeave:Fi,onAfterLeave:Fi,onLeaveCancelled:Fi,onBeforeAppear:Fi,onAppear:Fi,onAfterAppear:Fi,onAppearCancelled:Fi},Li=e=>{let t=e.subTree;return t.component?Li(t.component):t},Ri={name:`BaseTransition`,props:Ii,setup(e,{slots:t}){let n=ul(),r=Pi();return()=>{let i=t.default&&Ki(t.default(),!0);if(!i||!i.length)return;let a=zi(i),o=N(e),{mode:s}=o;if(process.env.NODE_ENV!==`production`&&s&&s!==`in-out`&&s!==`out-in`&&s!==`default`&&L(`invalid <transition> mode: ${s}`),r.isLeaving)return Ui(a);let c=Wi(a);if(!c)return Ui(a);let l=Hi(c,o,r,n,e=>l=e);c.type!==V&&Gi(c,l);let u=n.subTree&&Wi(n.subTree);if(u&&u.type!==V&&!Uc(c,u)&&Li(n).type!==V){let e=Hi(u,o,r,n);if(Gi(u,e),s===`out-in`&&c.type!==V)return r.isLeaving=!0,e.afterLeave=()=>{r.isLeaving=!1,n.job.flags&8||n.update(),delete e.afterLeave,u=void 0},Ui(a);s===`in-out`&&c.type!==V?e.delayLeave=(e,t,n)=>{let i=Vi(r,u);i[String(u.key)]=u,e[Mi]=()=>{t(),e[Mi]=void 0,delete l.delayedLeave,u=void 0},l.delayedLeave=()=>{n(),delete l.delayedLeave,u=void 0}}:u=void 0}else u&&=void 0;return a}}};function zi(e){let t=e[0];if(e.length>1){let n=!1;for(let r of e)if(r.type!==V){if(process.env.NODE_ENV!==`production`&&n){L(`<transition> can only be used on a single element or component. Use <transition-group> for lists.`);break}if(t=r,n=!0,process.env.NODE_ENV===`production`)break}}return t}const Bi=Ri;function Vi(e,t){let{leavingVNodes:n}=e,r=n.get(t.type);return r||(r=Object.create(null),n.set(t.type,r)),r}function Hi(e,t,n,r,i){let{appear:a,mode:o,persisted:s=!1,onBeforeEnter:c,onEnter:l,onAfterEnter:u,onEnterCancelled:d,onBeforeLeave:f,onLeave:p,onAfterLeave:m,onLeaveCancelled:h,onBeforeAppear:g,onAppear:_,onAfterAppear:v,onAppearCancelled:y}=t,b=String(e.key),x=Vi(n,e),C=(e,t)=>{e&&gr(e,r,9,t)},w=(e,t)=>{let n=t[1];C(e,t),S(e)?e.every(e=>e.length<=1)&&n():e.length<=1&&n()},ee={mode:o,persisted:s,beforeEnter(t){let r=c;if(!n.isMounted)if(a)r=g||c;else return;t[Mi]&&t[Mi](!0);let i=x[b];i&&Uc(e,i)&&i.el[Mi]&&i.el[Mi](),C(r,[t])},enter(e){let t=l,r=u,i=d;if(!n.isMounted)if(a)t=_||l,r=v||u,i=y||d;else return;let o=!1,s=e[Ni]=t=>{o||(o=!0,C(t?i:r,[e]),ee.delayedLeave&&ee.delayedLeave(),e[Ni]=void 0)};t?w(t,[e,s]):s()},leave(t,r){let i=String(e.key);if(t[Ni]&&t[Ni](!0),n.isUnmounting)return r();C(f,[t]);let a=!1,o=t[Mi]=n=>{a||(a=!0,r(),C(n?h:m,[t]),t[Mi]=void 0,x[i]===e&&delete x[i])};x[i]=e,p?w(p,[t,o]):o()},clone(e){let a=Hi(e,t,n,r,i);return i&&i(a),a}};return ee}function Ui(e){if(Ta(e))return e=Zc(e),e.children=null,e}function Wi(e){if(!Ta(e))return bi(e.type)&&e.children?zi(e.children):e;if(e.component)return e.component.subTree;let{shapeFlag:t,children:n}=e;if(n){if(t&16)return n[0];if(t&32&&T(n.default))return n.default()}}function Gi(e,t){e.shapeFlag&6&&e.component?(e.transition=t,Gi(e.component.subTree,t)):e.shapeFlag&128?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Ki(e,t=!1,n){let r=[],i=0;for(let a=0;a<e.length;a++){let o=e[a],s=n==null?o.key:String(n)+String(o.key==null?a:o.key);o.type===B?(o.patchFlag&128&&i++,r=r.concat(Ki(o.children,t,s))):(t||o.type!==V)&&r.push(s==null?o:Zc(o,{key:s}))}if(i>1)for(let e=0;e<r.length;e++)r[e].patchFlag=-2;return r}
/*! #__NO_SIDE_EFFECTS__ */
function z(e,t){return T(e)?(()=>v({name:e.name},t,{setup:e}))():e}function qi(){let e=ul();return e?(e.appContext.config.idPrefix||`v`)+`-`+e.ids[0]+ e.ids[1]++:(process.env.NODE_ENV!==`production`&&L(`useId() is called when there is no active component instance to be associated with.`),``)}function Ji(e){e.ids=[e.ids[0]+ e.ids[2]+++`-`,0,0]}const Yi=new WeakSet;function Xi(e){let t=ul(),n=Mn(null);if(t){let r=t.refs===f?t.refs={}:t.refs,i;process.env.NODE_ENV!==`production`&&(i=Object.getOwnPropertyDescriptor(r,e))&&!i.configurable?L(`useTemplateRef('${e}') already exists.`):Object.defineProperty(r,e,{enumerable:!0,get:()=>n.value,set:e=>n.value=e})}else process.env.NODE_ENV!==`production`&&L(`useTemplateRef() is called when there is no active component instance to be associated with.`);let r=process.env.NODE_ENV===`production`?n:Sn(n);return process.env.NODE_ENV!==`production`&&Yi.add(r),r}function Zi(e,t,n,r,i=!1){if(S(e)){e.forEach((e,a)=>Zi(e,t&&(S(t)?t[a]:t),n,r,i));return}if(Sa(r)&&!i){r.shapeFlag&512&&r.type.__asyncResolved&&r.component.subTree.component&&Zi(e,t,n,r.component.subTree);return}let a=r.shapeFlag&4?Al(r.component):r.el,o=i?null:a,{i:s,r:c}=e;if(process.env.NODE_ENV!==`production`&&!s){L(`Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.`);return}let l=t&&t.r,u=s.refs===f?s.refs={}:s.refs,d=s.setupState,p=N(d),m=d===f?()=>!1:e=>process.env.NODE_ENV!==`production`&&(x(p,e)&&!P(p[e])&&L(`Template ref "${e}" used on a non-ref value. It will not work in the production build.`),Yi.has(p[e]))?!1:x(p,e);if(l!=null&&l!==c&&(E(l)?(u[l]=null,m(l)&&(d[l]=null)):P(l)&&(l.value=null)),T(c))hr(c,s,12,[o,u]);else{let t=E(c),r=P(c);if(t||r){let s=()=>{if(e.f){let n=t?m(c)?d[c]:u[c]:c.value;i?S(n)&&y(n,a):S(n)?n.includes(a)||n.push(a):t?(u[c]=[a],m(c)&&(d[c]=u[c])):(c.value=[a],e.k&&(u[e.k]=c.value))}else t?(u[c]=o,m(c)&&(d[c]=o)):r?(c.value=o,e.k&&(u[e.k]=o)):process.env.NODE_ENV!==`production`&&L(`Invalid template ref type:`,c,`(${typeof c})`)};o?(s.id=-1,Ls(s,n)):s()}else process.env.NODE_ENV!==`production`&&L(`Invalid template ref type:`,c,`(${typeof c})`)}}let Qi=!1;const $i=()=>{Qi||(console.error(`Hydration completed but contains mismatches.`),Qi=!0)},ea=e=>e.namespaceURI.includes(`svg`)&&e.tagName!==`foreignObject`,ta=e=>e.namespaceURI.includes(`MathML`),na=e=>{if(e.nodeType===1){if(ea(e))return`svg`;if(ta(e))return`mathml`}},ra=e=>e.nodeType===8;function ia(e){let{mt:t,p:n,o:{patchProp:r,createText:i,nextSibling:a,parentNode:o,remove:s,insert:c,createComment:l}}=e,u=(e,t)=>{if(!t.hasChildNodes()){process.env.NODE_ENV!==`production`&&L(`Attempting to hydrate existing markup but container is empty. Performing full mount instead.`),n(null,e,t),Nr(),t._vnode=e;return}d(t.firstChild,e,null,null,null),Nr(),t._vnode=e},d=(n,r,s,l,u,g=!1)=>{g||=!!r.dynamicChildren;let b=ra(n)&&n.data===`[`,x=()=>h(n,r,s,l,u,b),{type:S,ref:C,shapeFlag:w,patchFlag:ee}=r,te=n.nodeType;r.el=n,process.env.NODE_ENV!==`production`&&(_e(n,`__vnode`,r,!0),_e(n,`__vueParentComponent`,s,!0)),ee===-2&&(g=!1,r.dynamicChildren=null);let T=null;switch(S){case Pc:te===3?(n.data!==r.children&&(process.env.NODE_ENV!==`production`&&L(`Hydration text mismatch in`,n.parentNode,`
  - rendered on server: ${JSON.stringify(n.data)}
  - expected on client: ${JSON.stringify(r.children)}`),$i(),n.data=r.children),T=a(n)):r.children===``?(c(r.el=i(``),o(n),n),T=n):T=x();break;case V:y(n)?(T=a(n),v(r.el=n.content.firstChild,n,s)):T=te!==8||b?x():a(n);break;case Fc:if(b&&(n=a(n),te=n.nodeType),te===1||te===3){T=n;let e=!r.children.length;for(let t=0;t<r.staticCount;t++)e&&(r.children+=T.nodeType===1?T.outerHTML:T.data),t===r.staticCount-1&&(r.anchor=T),T=a(T);return b?a(T):T}else x();break;case B:T=b?m(n,r,s,l,u,g):x();break;default:if(w&1)T=(te!==1||r.type.toLowerCase()!==n.tagName.toLowerCase())&&!y(n)?x():f(n,r,s,l,u,g);else if(w&6){r.slotScopeIds=u;let e=o(n);if(T=b?_(n):ra(n)&&n.data===`teleport start`?_(n,n.data,`teleport end`):a(n),t(r,e,null,s,l,na(e),g),Sa(r)&&!r.type.__asyncResolved){let t;b?(t=K(B),t.anchor=T?T.previousSibling:e.lastChild):t=n.nodeType===3?q(``):K(`div`),t.el=n,r.component.subTree=t}}else w&64?T=te===8?r.type.hydrate(n,r,s,l,u,g,e,p):x():w&128?T=r.type.hydrate(n,r,s,l,na(o(n)),u,g,e,d):process.env.NODE_ENV!==`production`&&L(`Invalid HostVNode type:`,S,`(${typeof S})`)}return C!=null&&Zi(C,null,l,r),T},f=(e,t,n,i,a,o)=>{o||=!!t.dynamicChildren;let{type:c,props:l,patchFlag:u,shapeFlag:d,dirs:f,transition:m}=t,h=c===`input`||c===`option`;if(process.env.NODE_ENV!==`production`||h||u!==-1){f&&vi(t,null,n,`created`);let c=!1;if(y(e)){c=Us(null,m)&&n&&n.vnode.props&&n.vnode.props.appear;let r=e.content.firstChild;if(c){let e=r.getAttribute(`class`);e&&(r.$cls=e),m.beforeEnter(r)}v(r,e,n),t.el=e=r}if(d&16&&!(l&&(l.innerHTML||l.textContent))){let r=p(e.firstChild,t,e,n,i,a,o),c=!1;for(;r;){pa(e,1)||(process.env.NODE_ENV!==`production`&&!c&&(L(`Hydration children mismatch on`,e,`
Server rendered element contains more child nodes than client vdom.`),c=!0),$i());let t=r;r=r.nextSibling,s(t)}}else if(d&8){let n=t.children;n[0]===`
`&&(e.tagName===`PRE`||e.tagName===`TEXTAREA`)&&(n=n.slice(1)),e.textContent!==n&&(pa(e,0)||(process.env.NODE_ENV!==`production`&&L(`Hydration text content mismatch on`,e,`
  - rendered on server: ${e.textContent}
  - expected on client: ${t.children}`),$i()),e.textContent=t.children)}if(l){if(process.env.NODE_ENV!==`production`||h||!o||u&48){let i=e.tagName.includes(`-`);for(let a in l)process.env.NODE_ENV!==`production`&&!(f&&f.some(e=>e.dir.created))&&aa(e,a,l[a],t,n)&&$i(),(h&&(a.endsWith(`value`)||a===`indeterminate`)||g(a)&&!ce(a)||a[0]===`.`||i)&&r(e,a,null,l[a],void 0,n)}else if(l.onClick)r(e,`onClick`,null,l.onClick,void 0,n);else if(u&4&&Tn(l.style))for(let e in l.style)l.style[e]}let _;(_=l&&l.onVnodeBeforeMount)&&al(_,n,t),f&&vi(t,null,n,`beforeMount`),((_=l&&l.onVnodeMounted)||f||c)&&jc(()=>{_&&al(_,n,t),c&&m.enter(e),f&&vi(t,null,n,`mounted`)},i)}return e.nextSibling},p=(e,t,r,o,s,l,u)=>{u||=!!t.dynamicChildren;let f=t.children,p=f.length,m=!1;for(let t=0;t<p;t++){let h=u?f[t]:f[t]=tl(f[t]),g=h.type===Pc;e?(g&&!u&&t+1<p&&tl(f[t+1]).type===Pc&&(c(i(e.data.slice(h.children.length)),r,a(e)),e.data=h.children),e=d(e,h,o,s,l,u)):g&&!h.children?c(h.el=i(``),r):(pa(r,1)||(process.env.NODE_ENV!==`production`&&!m&&(L(`Hydration children mismatch on`,r,`
Server rendered element contains fewer child nodes than client vdom.`),m=!0),$i()),n(null,h,r,null,o,s,na(r),l))}return e},m=(e,t,n,r,i,s)=>{let{slotScopeIds:u}=t;u&&(i=i?i.concat(u):u);let d=o(e),f=p(a(e),t,d,n,r,i,s);return f&&ra(f)&&f.data===`]`?a(t.anchor=f):($i(),c(t.anchor=l(`]`),d,f),f)},h=(e,t,r,i,c,l)=>{if(pa(e.parentElement,1)||(process.env.NODE_ENV!==`production`&&L(`Hydration node mismatch:
- rendered on server:`,e,e.nodeType===3?`(text)`:ra(e)&&e.data===`[`?`(start of fragment)`:``,`
- expected on client:`,t.type),$i()),t.el=null,l){let t=_(e);for(;;){let n=a(e);if(n&&n!==t)s(n);else break}}let u=a(e),d=o(e);return s(e),n(null,t,d,u,r,i,na(d),c),r&&(r.vnode.el=t.el,vc(r,t.el)),u},_=(e,t=`[`,n=`]`)=>{let r=0;for(;e;)if(e=a(e),e&&ra(e)&&(e.data===t&&r++,e.data===n)){if(r===0)return a(e);r--}return e},v=(e,t,n)=>{let r=t.parentNode;r&&r.replaceChild(e,t);let i=n;for(;i;)i.vnode.el===t&&(i.vnode.el=i.subTree.el=e),i=i.parent},y=e=>e.nodeType===1&&e.tagName===`TEMPLATE`;return[u,d]}function aa(e,t,n,r,i){let a,o,s,c;if(t===`class`)e.$cls?(s=e.$cls,delete e.$cls):s=e.getAttribute(`class`),c=j(n),sa(oa(s||``),oa(c))||(a=2,o=`class`);else if(t===`style`){s=e.getAttribute(`style`)||``,c=E(n)?n:ke(we(n));let t=ca(s),l=ca(c);if(r.dirs)for(let{dir:e,value:t}of r.dirs)e.name===`show`&&!t&&l.set(`display`,`none`);i&&ua(i,r,l),la(t,l)||(a=3,o=`style`)}else (e instanceof SVGElement&&He(t)||e instanceof HTMLElement&&(ze(t)||Ve(t)))&&(ze(t)?(s=e.hasAttribute(t),c=Be(n)):n==null?(s=e.hasAttribute(t),c=!1):(s=e.hasAttribute(t)?e.getAttribute(t):t===`value`&&e.tagName===`TEXTAREA`?e.value:!1,c=Ue(n)?String(n):!1),s!==c&&(a=4,o=t));if(a!=null&&!pa(e,a)){let t=e=>e===!1?`(not rendered)`:`${o}="${e}"`,n=`Hydration ${fa[a]} mismatch on`,r=`
  - rendered on server: ${t(s)}
  - expected on client: ${t(c)}
  Note: this mismatch is check-only. The DOM will not be rectified in production due to performance overhead.
  You should fix the source of the mismatch.`;return L(n,e,r),!0}return!1}function oa(e){return new Set(e.trim().split(/\s+/))}function sa(e,t){if(e.size!==t.size)return!1;for(let n of e)if(!t.has(n))return!1;return!0}function ca(e){let t=new Map;for(let n of e.split(`;`)){let[e,r]=n.split(`:`);e=e.trim(),r&&=r.trim(),e&&r&&t.set(e,r)}return t}function la(e,t){if(e.size!==t.size)return!1;for(let[n,r]of e)if(r!==t.get(n))return!1;return!0}function ua(e,t,n){let r=e.subTree;if(e.getCssVars&&(t===r||r&&r.type===B&&r.children.includes(t))){let t=e.getCssVars();for(let e in t)n.set(`--${Ge(e,!1)}`,String(t[e]))}t===r&&e.parent&&ua(e.parent,e.vnode,n)}const da=`data-allow-mismatch`,fa={0:`text`,1:`children`,2:`class`,3:`style`,4:`attribute`};function pa(e,t){if(t===0||t===1)for(;e&&!e.hasAttribute(da);)e=e.parentElement;let n=e&&e.getAttribute(da);if(n==null)return!1;if(n===``)return!0;{let e=n.split(`,`);return t===0&&e.includes(`children`)?!0:e.includes(fa[t])}}const ma=xe().requestIdleCallback||(e=>setTimeout(e,1)),ha=xe().cancelIdleCallback||(e=>clearTimeout(e)),ga=(e=1e4)=>t=>{let n=ma(t,{timeout:e});return()=>ha(n)};function _a(e){let{top:t,left:n,bottom:r,right:i}=e.getBoundingClientRect(),{innerHeight:a,innerWidth:o}=window;return(t>0&&t<a||r>0&&r<a)&&(n>0&&n<o||i>0&&i<o)}const va=e=>(t,n)=>{let r=new IntersectionObserver(e=>{for(let n of e){if(!n.isIntersecting)continue;r.disconnect(),t();break}},e);return n(e=>{if(e instanceof Element){if(_a(e))return t(),r.disconnect(),!1;r.observe(e)}}),()=>r.disconnect()},ya=e=>t=>{if(e){let n=matchMedia(e);if(n.matches)t();else return n.addEventListener(`change`,t,{once:!0}),()=>n.removeEventListener(`change`,t)}},ba=(e=[])=>(t,n)=>{E(e)&&(e=[e]);let r=!1,i=e=>{r||(r=!0,a(),t(),e.target.dispatchEvent(new e.constructor(e.type,e)))},a=()=>{n(t=>{for(let n of e)t.removeEventListener(n,i)})};return n(t=>{for(let n of e)t.addEventListener(n,i,{once:!0})}),a};function xa(e,t){if(ra(e)&&e.data===`[`){let n=1,r=e.nextSibling;for(;r;){if(r.nodeType===1){let e=t(r);if(e===!1)break}else if(ra(r))if(r.data===`]`){if(--n===0)break}else r.data===`[`&&n++;r=r.nextSibling}}else t(e)}const Sa=e=>!!e.type.__asyncLoader;
/*! #__NO_SIDE_EFFECTS__ */
function Ca(e){T(e)&&(e={loader:e});let{loader:t,loadingComponent:n,errorComponent:r,delay:i=200,hydrate:a,timeout:o,suspensible:s=!0,onError:c}=e,l=null,u,d=0,f=()=>(d++,l=null,p()),p=()=>{let e;return l||(e=l=t().catch(e=>{if(e=e instanceof Error?e:Error(String(e)),c)return new Promise((t,n)=>{let r=()=>t(f()),i=()=>n(e);c(e,r,i,d+1)});throw e}).then(t=>{if(e!==l&&l)return l;if(process.env.NODE_ENV!==`production`&&!t&&L(`Async component loader resolved to undefined. If you are using retry(), make sure to return its return value.`),t&&(t.__esModule||t[Symbol.toStringTag]===`Module`)&&(t=t.default),process.env.NODE_ENV!==`production`&&t&&!D(t)&&!T(t))throw Error(`Invalid async component load result: ${t}`);return u=t,t}))};return z({name:`AsyncComponentWrapper`,__asyncLoader:p,__asyncHydrate(e,t,n){let r=!1,i=a?()=>{let i=()=>{if(process.env.NODE_ENV!==`production`&&r){L(`Skipping lazy hydration for component '${Nl(u)}': it was updated before lazy hydration performed.`);return}n()},o=a(i,t=>xa(e,t));o&&(t.bum||=[]).push(o),(t.u||=[]).push(()=>r=!0)}:n;u?i():p().then(()=>!t.isUnmounted&&i())},get __asyncResolved(){return u},setup(){let e=ll;if(Ji(e),u)return()=>wa(u,e);let t=t=>{l=null,_r(t,e,13,!r)};if(s&&e.suspense||vl)return p().then(t=>()=>wa(t,e)).catch(e=>(t(e),()=>r?K(r,{error:e}):null));let a=F(!1),c=F(),d=F(!!i);return i&&setTimeout(()=>{d.value=!1},i),o!=null&&setTimeout(()=>{if(!a.value&&!c.value){let e=Error(`Async component timed out after ${o}ms.`);t(e),c.value=e}},o),p().then(()=>{a.value=!0,e.parent&&Ta(e.parent.vnode)&&e.parent.update()}).catch(e=>{t(e),c.value=e}),()=>{if(a.value&&u)return wa(u,e);if(c.value&&r)return K(r,{error:c.value});if(n&&!d.value)return K(n)}}})}function wa(e,t){let{ref:n,props:r,children:i,ce:a}=t.vnode,o=K(e,r,i);return o.ref=n,o.ce=a,delete t.vnode.ce,o}const Ta=e=>e.type.__isKeepAlive,Ea={name:`KeepAlive`,__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){let n=ul(),r=n.ctx;if(!r.renderer)return()=>{let e=t.default&&t.default();return e&&e.length===1?e[0]:e};let i=new Map,a=new Set,o=null;process.env.NODE_ENV!==`production`&&(n.__v_cache=i);let s=n.suspense,{renderer:{p:c,m:l,um:u,o:{createElement:d}}}=r,f=d(`div`);r.activate=(e,t,n,r,i)=>{let a=e.component;l(e,t,n,0,s),c(a.vnode,e,t,n,a,s,r,e.slotScopeIds,i),Ls(()=>{a.isDeactivated=!1,a.a&&ge(a.a);let t=e.props&&e.props.onVnodeMounted;t&&al(t,a.parent,e)},s),process.env.NODE_ENV!==`production`&&ti(a)},r.deactivate=e=>{let t=e.component;qs(t.m),qs(t.a),l(e,f,null,1,s),Ls(()=>{t.da&&ge(t.da);let n=e.props&&e.props.onVnodeUnmounted;n&&al(n,t.parent,e),t.isDeactivated=!0},s),process.env.NODE_ENV!==`production`&&ti(t),process.env.NODE_ENV!==`production`&&(t.__keepAliveStorageContainer=f)};function p(e){Na(e),u(e,n,s,!0)}function m(e){i.forEach((t,n)=>{let r=Nl(t.type);r&&!e(r)&&h(n)})}function h(e){let t=i.get(e);t&&(!o||!Uc(t,o))?p(t):o&&Na(o),i.delete(e),a.delete(e)}$s(()=>[e.include,e.exclude],([e,t])=>{e&&m(t=>Oa(e,t)),t&&m(e=>!Oa(t,e))},{flush:`post`,deep:!0});let g=null,_=()=>{g!=null&&(yc(n.subTree.type)?Ls(()=>{i.set(g,Pa(n.subTree))},n.subTree.suspense):i.set(g,Pa(n.subTree)))};return Ra(_),Ba(_),Va(()=>{i.forEach(e=>{let{subTree:t,suspense:r}=n,i=Pa(t);if(e.type===i.type&&e.key===i.key){Na(i);let e=i.component.da;e&&Ls(e,r);return}p(e)})}),()=>{if(g=null,!t.default)return o=null;let n=t.default(),r=n[0];if(n.length>1)return process.env.NODE_ENV!==`production`&&L(`KeepAlive should contain exactly one component child.`),o=null,n;if(!Hc(r)||!(r.shapeFlag&4)&&!(r.shapeFlag&128))return o=null,r;let s=Pa(r);if(s.type===V)return o=null,s;let c=s.type,l=Nl(Sa(s)?s.type.__asyncResolved||{}:c),{include:u,exclude:d,max:f}=e;if(u&&(!l||!Oa(u,l))||d&&l&&Oa(d,l))return s.shapeFlag&=-257,o=s,r;let p=s.key==null?c:s.key,m=i.get(p);return s.el&&(s=Zc(s),r.shapeFlag&128&&(r.ssContent=s)),g=p,m?(s.el=m.el,s.component=m.component,s.transition&&Gi(s,s.transition),s.shapeFlag|=512,a.delete(p),a.add(p)):(a.add(p),f&&a.size>parseInt(f,10)&&h(a.values().next().value)),s.shapeFlag|=256,o=s,yc(r.type)?r:s}}},Da=Ea;function Oa(e,t){return S(e)?e.some(e=>Oa(e,t)):E(e)?e.split(`,`).includes(t):te(e)?(e.lastIndex=0,e.test(t)):!1}function ka(e,t){ja(e,`a`,t)}function Aa(e,t){ja(e,`da`,t)}function ja(e,t,n=ll){let r=e.__wdc||=()=>{let t=n;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()};if(Fa(t,r,n),n){let e=n.parent;for(;e&&e.parent;)Ta(e.parent.vnode)&&Ma(r,t,n,e),e=e.parent}}function Ma(e,t,n,r){let i=Fa(t,e,r,!0);Ha(()=>{y(r[t],i)},n)}function Na(e){e.shapeFlag&=-257,e.shapeFlag&=-513}function Pa(e){return e.shapeFlag&128?e.ssContent:e}function Fa(e,t,n=ll,r=!1){if(n){let i=n[e]||(n[e]=[]),a=t.__weh||=(...r)=>{Ct();let i=pl(n),a=gr(t,n,e,r);return i(),wt(),a};return r?i.unshift(a):i.push(a),a}else if(process.env.NODE_ENV!==`production`){let t=me(mr[e].replace(/ hook$/,``));L(`${t} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup(). If you are using async setup(), make sure to register lifecycle hooks before the first await statement.`)}}const Ia=e=>(t,n=ll)=>{(!vl||e===`sp`)&&Fa(e,(...e)=>t(...e),n)},La=Ia(`bm`),Ra=Ia(`m`),za=Ia(`bu`),Ba=Ia(`u`),Va=Ia(`bum`),Ha=Ia(`um`),Ua=Ia(`sp`),Wa=Ia(`rtg`),Ga=Ia(`rtc`);function Ka(e,t=ll){Fa(`ec`,e,t)}const qa=`components`,Ja=`directives`;function Ya(e,t){return $a(qa,e,!0,t)||e}const Xa=Symbol.for(`v-ndc`);function Za(e){return E(e)?$a(qa,e,!1)||e:e||Xa}function Qa(e){return $a(Ja,e)}function $a(e,t,n=!0,r=!1){let i=ui||ll;if(i){let a=i.type;if(e===qa){let e=Nl(a,!1);if(e&&(e===t||e===k(t)||e===pe(k(t))))return a}let o=eo(i[e]||a[e],t)||eo(i.appContext[e],t);if(!o&&r)return a;if(process.env.NODE_ENV!==`production`&&n&&!o){let n=e===qa?`
If this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement.`:``;L(`Failed to resolve ${e.slice(0,-1)}: ${t}${n}`)}return o}else process.env.NODE_ENV!==`production`&&L(`resolve${pe(e.slice(0,-1))} can only be used in render() or setup().`)}function eo(e,t){return e&&(e[t]||e[k(t)]||e[pe(k(t))])}function to(e,t,n,r){let i,a=n&&n[r],o=S(e);if(o||E(e)){let n=o&&Tn(e),r=!1,s=!1;n&&(r=!Dn(e),s=En(e),e=Rt(e)),i=Array(e.length);for(let n=0,o=e.length;n<o;n++)i[n]=t(r?s?jn(An(e[n])):An(e[n]):e[n],n,void 0,a&&a[n])}else if(typeof e==`number`){process.env.NODE_ENV!==`production`&&!Number.isInteger(e)&&L(`The v-for range expect an integer value but got ${e}.`),i=Array(e);for(let n=0;n<e;n++)i[n]=t(n+1,n,void 0,a&&a[n])}else if(D(e))if(e[Symbol.iterator])i=Array.from(e,(e,n)=>t(e,n,void 0,a&&a[n]));else{let n=Object.keys(e);i=Array(n.length);for(let r=0,o=n.length;r<o;r++){let o=n[r];i[r]=t(e[o],o,r,a&&a[r])}}else i=[];return n&&(n[r]=i),i}function no(e,t){for(let n=0;n<t.length;n++){let r=t[n];if(S(r))for(let t=0;t<r.length;t++)e[r[t].name]=r[t].fn;else r&&(e[r.name]=r.key?(...e)=>{let t=r.fn(...e);return t&&(t.key=r.key),t}:r.fn)}return e}function ro(e,t,n={},r,i){if(ui.ce||ui.parent&&Sa(ui.parent)&&ui.parent.ce)return t!==`default`&&(n.name=t),H(),W(B,null,[K(`slot`,n,r&&r())],64);let a=e[t];process.env.NODE_ENV!==`production`&&a&&a.length>1&&(L(`SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template.`),a=()=>[]),a&&a._c&&(a._d=!1),H();let o=a&&io(a(n)),s=n.key||o&&o.key,c=W(B,{key:(s&&!ne(s)?s:`_${t}`)+(!o&&r?`_fb`:``)},o||(r?r():[]),o&&e._===1?64:-2);return!i&&c.scopeId&&(c.slotScopeIds=[c.scopeId+`-s`]),a&&a._c&&(a._d=!0),c}function io(e){return e.some(e=>Hc(e)?!(e.type===V||e.type===B&&!io(e.children)):!0)?e:null}function ao(e,t){let n={};if(process.env.NODE_ENV!==`production`&&!D(e))return L(`v-on with no argument expects an object value.`),n;for(let r in e)n[t&&/[A-Z]/.test(r)?`on:${r}`:me(r)]=e[r];return n}const oo=e=>e?_l(e)?Al(e):oo(e.parent):null,so=v(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>process.env.NODE_ENV===`production`?e.props:Cn(e.props),$attrs:e=>process.env.NODE_ENV===`production`?e.attrs:Cn(e.attrs),$slots:e=>process.env.NODE_ENV===`production`?e.slots:Cn(e.slots),$refs:e=>process.env.NODE_ENV===`production`?e.refs:Cn(e.refs),$parent:e=>oo(e.parent),$root:e=>oo(e.root),$host:e=>e.ce,$emit:e=>e.emit,$options:e=>Ro(e),$forceUpdate:e=>e.f||=()=>{kr(e.update)},$nextTick:e=>e.n||=Dr.bind(e.proxy),$watch:e=>tc.bind(e)}),co=e=>e===`_`||e===`$`,lo=(e,t)=>e!==f&&!e.__isScriptSetup&&x(e,t),uo={get({_:e},t){if(t===`__v_skip`)return!0;let{ctx:n,setupState:r,data:i,props:a,accessCache:o,type:s,appContext:c}=e;if(process.env.NODE_ENV!==`production`&&t===`__isVue`)return!0;let l;if(t[0]!==`$`){let s=o[t];if(s!==void 0)switch(s){case 1:return r[t];case 2:return i[t];case 4:return n[t];case 3:return a[t]}else if(lo(r,t))return o[t]=1,r[t];else if(i!==f&&x(i,t))return o[t]=2,i[t];else if((l=e.propsOptions[0])&&x(l,t))return o[t]=3,a[t];else if(n!==f&&x(n,t))return o[t]=4,n[t];else No&&(o[t]=0)}let u=so[t],d,p;if(u)return t===`$attrs`?(Pt(e.attrs,`get`,``),process.env.NODE_ENV!==`production`&&lc()):process.env.NODE_ENV!==`production`&&t===`$slots`&&Pt(e,`get`,t),u(e);if((d=s.__cssModules)&&(d=d[t]))return d;if(n!==f&&x(n,t))return o[t]=4,n[t];if(p=c.config.globalProperties,x(p,t))return p[t];process.env.NODE_ENV!==`production`&&ui&&(!E(t)||t.indexOf(`__v`)!==0)&&(i!==f&&co(t[0])&&x(i,t)?L(`Property ${JSON.stringify(t)} must be accessed via $data because it starts with a reserved character ("$" or "_") and is not proxied on the render context.`):e===ui&&L(`Property ${JSON.stringify(t)} was accessed during render but is not defined on instance.`))},set({_:e},t,n){let{data:r,setupState:i,ctx:a}=e;return lo(i,t)?(i[t]=n,!0):process.env.NODE_ENV!==`production`&&i.__isScriptSetup&&x(i,t)?(L(`Cannot mutate <script setup> binding "${t}" from Options API.`),!1):r!==f&&x(r,t)?(r[t]=n,!0):x(e.props,t)?(process.env.NODE_ENV!==`production`&&L(`Attempting to mutate prop "${t}". Props are readonly.`),!1):t[0]===`$`&&t.slice(1)in e?(process.env.NODE_ENV!==`production`&&L(`Attempting to mutate public property "${t}". Properties starting with $ are reserved and readonly.`),!1):(process.env.NODE_ENV!==`production`&&t in e.appContext.config.globalProperties?Object.defineProperty(a,t,{enumerable:!0,configurable:!0,value:n}):a[t]=n,!0)},has({_:{data:e,setupState:t,accessCache:n,ctx:r,appContext:i,propsOptions:a}},o){let s;return!!n[o]||e!==f&&x(e,o)||lo(t,o)||(s=a[0])&&x(s,o)||x(r,o)||x(so,o)||x(i.config.globalProperties,o)},defineProperty(e,t,n){return n.get==null?x(n,`value`)&&this.set(e,t,n.value,null):e._.accessCache[t]=0,Reflect.defineProperty(e,t,n)}};process.env.NODE_ENV!==`production`&&(uo.ownKeys=e=>(L(`Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead.`),Reflect.ownKeys(e)));const fo=v({},uo,{get(e,t){if(t!==Symbol.unscopables)return uo.get(e,t,e)},has(e,t){let n=t[0]!==`_`&&!Ce(t);return process.env.NODE_ENV!==`production`&&!n&&uo.has(e,t)&&L(`Property ${JSON.stringify(t)} should not start with _ which is a reserved prefix for Vue internals.`),n}});function po(e){let t={};return Object.defineProperty(t,`_`,{configurable:!0,enumerable:!1,get:()=>e}),Object.keys(so).forEach(n=>{Object.defineProperty(t,n,{configurable:!0,enumerable:!1,get:()=>so[n](e),set:m})}),t}function mo(e){let{ctx:t,propsOptions:[n]}=e;n&&Object.keys(n).forEach(n=>{Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:()=>e.props[n],set:m})})}function ho(e){let{ctx:t,setupState:n}=e;Object.keys(N(n)).forEach(e=>{if(!n.__isScriptSetup){if(co(e[0])){L(`setup() return property ${JSON.stringify(e)} should not start with "$" or "_" which are reserved prefixes for Vue internals.`);return}Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:()=>n[e],set:m})}})}const go=e=>L(`${e}() is a compiler-hint helper that is only usable inside <script setup> of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.`);function _o(){return process.env.NODE_ENV!==`production`&&go(`defineProps`),null}function vo(){return process.env.NODE_ENV!==`production`&&go(`defineEmits`),null}function yo(e){process.env.NODE_ENV!==`production`&&go(`defineExpose`)}function bo(e){process.env.NODE_ENV!==`production`&&go(`defineOptions`)}function xo(){return process.env.NODE_ENV!==`production`&&go(`defineSlots`),null}function So(){process.env.NODE_ENV!==`production`&&go(`defineModel`)}function Co(e,t){return process.env.NODE_ENV!==`production`&&go(`withDefaults`),null}function wo(){return Eo().slots}function To(){return Eo().attrs}function Eo(){let e=ul();return process.env.NODE_ENV!==`production`&&!e&&L(`useContext() called without active instance.`),e.setupContext||=kl(e)}function Do(e){return S(e)?e.reduce((e,t)=>(e[t]=null,e),{}):e}function Oo(e,t){let n=Do(e);for(let e in t){if(e.startsWith(`__skip`))continue;let r=n[e];r?S(r)||T(r)?r=n[e]={type:r,default:t[e]}:r.default=t[e]:r===null?r=n[e]={default:t[e]}:process.env.NODE_ENV!==`production`&&L(`props default key "${e}" has no corresponding declaration.`),r&&t[`__skip_${e}`]&&(r.skipFactory=!0)}return n}function ko(e,t){return!e||!t?e||t:S(e)&&S(t)?e.concat(t):v({},Do(e),Do(t))}function Ao(e,t){let n={};for(let r in e)t.includes(r)||Object.defineProperty(n,r,{enumerable:!0,get:()=>e[r]});return n}function jo(e){let t=ul();process.env.NODE_ENV!==`production`&&!t&&L(`withAsyncContext called without active current instance. This is likely a bug.`);let n=e();return ml(),re(n)&&(n=n.catch(e=>{throw pl(t),e})),[n,()=>pl(t)]}function Mo(){let e=Object.create(null);return(t,n)=>{e[n]?L(`${t} property "${n}" is already defined in ${e[n]}.`):e[n]=t}}let No=!0;function Po(e){let t=Ro(e),n=e.proxy,r=e.ctx;No=!1,t.beforeCreate&&Io(t.beforeCreate,e,`bc`);let{data:i,computed:a,methods:o,watch:s,provide:c,inject:l,created:u,beforeMount:d,mounted:f,beforeUpdate:p,updated:h,activated:g,deactivated:_,beforeDestroy:v,beforeUnmount:y,destroyed:b,unmounted:x,render:C,renderTracked:w,renderTriggered:ee,errorCaptured:te,serverPrefetch:E,expose:ne,inheritAttrs:ie,components:ae,directives:O,filters:oe}=t,se=process.env.NODE_ENV===`production`?null:Mo();if(process.env.NODE_ENV!==`production`){let[t]=e.propsOptions;if(t)for(let e in t)se(`Props`,e)}if(l&&Fo(l,r,se),o)for(let e in o){let t=o[e];T(t)?(process.env.NODE_ENV===`production`?r[e]=t.bind(n):Object.defineProperty(r,e,{value:t.bind(n),configurable:!0,enumerable:!0,writable:!0}),process.env.NODE_ENV!==`production`&&se(`Methods`,e)):process.env.NODE_ENV!==`production`&&L(`Method "${e}" has type "${typeof t}" in the component definition. Did you reference the function correctly?`)}if(i){process.env.NODE_ENV!==`production`&&!T(i)&&L(`The data option must be a function. Plain object usage is no longer supported.`);let t=i.call(n,n);if(process.env.NODE_ENV!==`production`&&re(t)&&L(`data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>.`),!D(t))process.env.NODE_ENV!==`production`&&L(`data() should return an object.`);else if(e.data=bn(t),process.env.NODE_ENV!==`production`)for(let e in t)se(`Data`,e),co(e[0])||Object.defineProperty(r,e,{configurable:!0,enumerable:!0,get:()=>t[e],set:m})}if(No=!0,a)for(let e in a){let t=a[e],i=T(t)?t.bind(n,n):T(t.get)?t.get.bind(n,n):m;process.env.NODE_ENV!==`production`&&i===m&&L(`Computed property "${e}" has no getter.`);let o=!T(t)&&T(t.set)?t.set.bind(n):process.env.NODE_ENV===`production`?m:()=>{L(`Write operation failed: computed property "${e}" is readonly.`)},s=J({get:i,set:o});Object.defineProperty(r,e,{enumerable:!0,configurable:!0,get:()=>s.value,set:e=>s.value=e}),process.env.NODE_ENV!==`production`&&se(`Computed`,e)}if(s)for(let e in s)Lo(s[e],r,n,e);if(c){let e=T(c)?c.call(n):c;Reflect.ownKeys(e).forEach(t=>{Qo(t,e[t])})}u&&Io(u,e,`c`);function ce(e,t){S(t)?t.forEach(t=>e(t.bind(n))):t&&e(t.bind(n))}if(ce(La,d),ce(Ra,f),ce(za,p),ce(Ba,h),ce(ka,g),ce(Aa,_),ce(Ka,te),ce(Ga,w),ce(Wa,ee),ce(Va,y),ce(Ha,x),ce(Ua,E),S(ne))if(ne.length){let t=e.exposed||={};ne.forEach(e=>{Object.defineProperty(t,e,{get:()=>n[e],set:t=>n[e]=t})})}else e.exposed||={};C&&e.render===m&&(e.render=C),ie!=null&&(e.inheritAttrs=ie),ae&&(e.components=ae),O&&(e.directives=O),E&&Ji(e)}function Fo(e,t,n=m){for(let r in S(e)&&(e=Uo(e)),e){let i=e[r],a;a=D(i)?`default`in i?$o(i.from||r,i.default,!0):$o(i.from||r):$o(i),P(a)?Object.defineProperty(t,r,{enumerable:!0,configurable:!0,get:()=>a.value,set:e=>a.value=e}):t[r]=a,process.env.NODE_ENV!==`production`&&n(`Inject`,r)}}function Io(e,t,n){gr(S(e)?e.map(e=>e.bind(t.proxy)):e.bind(t.proxy),t,n)}function Lo(e,t,n,r){let i=r.includes(`.`)?nc(n,r):()=>n[r];if(E(e)){let n=t[e];T(n)?$s(i,n):process.env.NODE_ENV!==`production`&&L(`Invalid watch handler specified by key "${e}"`,n)}else if(T(e))$s(i,e.bind(n));else if(D(e))if(S(e))e.forEach(e=>Lo(e,t,n,r));else{let r=T(e.handler)?e.handler.bind(n):t[e.handler];T(r)?$s(i,r,e):process.env.NODE_ENV!==`production`&&L(`Invalid watch handler specified by key "${e.handler}"`,r)}else process.env.NODE_ENV!==`production`&&L(`Invalid watch option: "${r}"`,e)}function Ro(e){let t=e.type,{mixins:n,extends:r}=t,{mixins:i,optionsCache:a,config:{optionMergeStrategies:o}}=e.appContext,s=a.get(t),c;return s?c=s:!i.length&&!n&&!r?c=t:(c={},i.length&&i.forEach(e=>zo(c,e,o,!0)),zo(c,t,o)),D(t)&&a.set(t,c),c}function zo(e,t,n,r=!1){let{mixins:i,extends:a}=t;for(let o in a&&zo(e,a,n,!0),i&&i.forEach(t=>zo(e,t,n,!0)),t)if(r&&o===`expose`)process.env.NODE_ENV!==`production`&&L(`"expose" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.`);else{let r=Bo[o]||n&&n[o];e[o]=r?r(e[o],t[o]):t[o]}return e}const Bo={data:Vo,props:Ko,emits:Ko,methods:Go,computed:Go,beforeCreate:Wo,created:Wo,beforeMount:Wo,mounted:Wo,beforeUpdate:Wo,updated:Wo,beforeDestroy:Wo,beforeUnmount:Wo,destroyed:Wo,unmounted:Wo,activated:Wo,deactivated:Wo,errorCaptured:Wo,serverPrefetch:Wo,components:Go,directives:Go,watch:qo,provide:Vo,inject:Ho};function Vo(e,t){return t?e?function(){return v(T(e)?e.call(this,this):e,T(t)?t.call(this,this):t)}:t:e}function Ho(e,t){return Go(Uo(e),Uo(t))}function Uo(e){if(S(e)){let t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function Wo(e,t){return e?[...new Set([].concat(e,t))]:t}function Go(e,t){return e?v(Object.create(null),e,t):t}function Ko(e,t){return e?S(e)&&S(t)?[...new Set([...e,...t])]:v(Object.create(null),Do(e),Do(t??{})):t}function qo(e,t){if(!e)return t;if(!t)return e;let n=v(Object.create(null),e);for(let r in t)n[r]=Wo(e[r],t[r]);return n}function Jo(){return{app:null,config:{isNativeTag:h,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let Yo=0;function Xo(e,t){return function(n,r=null){T(n)||(n=v({},n)),r!=null&&!D(r)&&(process.env.NODE_ENV!==`production`&&L(`root props passed to app.mount() must be an object.`),r=null);let i=Jo(),a=new WeakSet,o=[],s=!1,c=i.app={_uid:Yo++,_component:n,_props:r,_container:null,_context:i,_instance:null,version:Bl,get config(){return i.config},set config(e){process.env.NODE_ENV!==`production`&&L(`app.config cannot be replaced. Modify individual options instead.`)},use(e,...t){return a.has(e)?process.env.NODE_ENV!==`production`&&L(`Plugin has already been applied to target app.`):e&&T(e.install)?(a.add(e),e.install(c,...t)):T(e)?(a.add(e),e(c,...t)):process.env.NODE_ENV!==`production`&&L(`A plugin must either be a function or an object with an "install" function.`),c},mixin(e){return i.mixins.includes(e)?process.env.NODE_ENV!==`production`&&L(`Mixin has already been applied to target app`+(e.name?`: ${e.name}`:``)):i.mixins.push(e),c},component(e,t){return process.env.NODE_ENV!==`production`&&gl(e,i.config),t?(process.env.NODE_ENV!==`production`&&i.components[e]&&L(`Component "${e}" has already been registered in target app.`),i.components[e]=t,c):i.components[e]},directive(e,t){return process.env.NODE_ENV!==`production`&&gi(e),t?(process.env.NODE_ENV!==`production`&&i.directives[e]&&L(`Directive "${e}" has already been registered in target app.`),i.directives[e]=t,c):i.directives[e]},mount(a,o,l){if(s)process.env.NODE_ENV!==`production`&&L("App has already been mounted.\nIf you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. `const createMyApp = () => createApp(App)`");else{process.env.NODE_ENV!==`production`&&a.__vue_app__&&L("There is already an app instance mounted on the host container.\n If you want to mount another app on the same host container, you need to unmount the previous app by calling `app.unmount()` first.");let u=c._ceVNode||K(n,r);return u.appContext=i,l===!0?l=`svg`:l===!1&&(l=void 0),process.env.NODE_ENV!==`production`&&(i.reload=()=>{let t=Zc(u);t.el=null,e(t,a,l)}),o&&t?t(u,a):e(u,a,l),s=!0,c._container=a,a.__vue_app__=c,process.env.NODE_ENV!==`production`&&(c._instance=u.component,$r(c,Bl)),Al(u.component)}},onUnmount(e){process.env.NODE_ENV!==`production`&&typeof e!=`function`&&L(`Expected function as first argument to app.onUnmount(), but got ${typeof e}`),o.push(e)},unmount(){s?(gr(o,c._instance,16),e(null,c._container),process.env.NODE_ENV!==`production`&&(c._instance=null,ei(c)),delete c._container.__vue_app__):process.env.NODE_ENV!==`production`&&L(`Cannot unmount an app that is not mounted.`)},provide(e,t){return process.env.NODE_ENV!==`production`&&e in i.provides&&(x(i.provides,e)?L(`App already provides property with key "${String(e)}". It will be overwritten with the new value.`):L(`App already provides property with key "${String(e)}" inherited from its parent element. It will be overwritten with the new value.`)),i.provides[e]=t,c},runWithContext(e){let t=Zo;Zo=c;try{return e()}finally{Zo=t}}};return c}}let Zo=null;function Qo(e,t){if(!ll)process.env.NODE_ENV!==`production`&&L(`provide() can only be used inside setup().`);else{let n=ll.provides,r=ll.parent&&ll.parent.provides;r===n&&(n=ll.provides=Object.create(r)),n[e]=t}}function $o(e,t,n=!1){let r=ll||ui;if(r||Zo){let i=Zo?Zo._context.provides:r?r.parent==null||r.ce?r.vnode.appContext&&r.vnode.appContext.provides:r.parent.provides:void 0;if(i&&e in i)return i[e];if(arguments.length>1)return n&&T(t)?t.call(r&&r.proxy):t;process.env.NODE_ENV!==`production`&&L(`injection "${String(e)}" not found.`)}else process.env.NODE_ENV!==`production`&&L(`inject() can only be used inside setup() or functional components.`)}function es(){return!!(ll||ui||Zo)}const ts={},ns=()=>Object.create(ts),rs=e=>Object.getPrototypeOf(e)===ts;function os(e,t,n,r=!1){let i={},a=ns();for(let n in e.propsDefaults=Object.create(null),ls(e,t,i,a),e.propsOptions[0])n in i||(i[n]=void 0);process.env.NODE_ENV!==`production`&&hs(t||{},i,e),n?e.props=r?i:xn(i):e.type.props?e.props=i:e.props=a,e.attrs=a}function ss(e){for(;e;){if(e.type.__hmrId)return!0;e=e.parent}}function cs(e,t,n,r){let{props:i,attrs:a,vnode:{patchFlag:o}}=e,s=N(i),[c]=e.propsOptions,l=!1;if(!(process.env.NODE_ENV!==`production`&&ss(e))&&(r||o>0)&&!(o&16)){if(o&8){let n=e.vnode.dynamicProps;for(let r=0;r<n.length;r++){let o=n[r];if(sc(e.emitsOptions,o))continue;let u=t[o];if(c)if(x(a,o))u!==a[o]&&(a[o]=u,l=!0);else{let t=k(o);i[t]=us(c,s,t,u,e,!1)}else u!==a[o]&&(a[o]=u,l=!0)}}}else{ls(e,t,i,a)&&(l=!0);let r;for(let a in s)(!t||!x(t,a)&&((r=A(a))===a||!x(t,r)))&&(c?n&&(n[a]!==void 0||n[r]!==void 0)&&(i[a]=us(c,s,a,void 0,e,!0)):delete i[a]);if(a!==s)for(let e in a)(!t||!x(t,e))&&(delete a[e],l=!0)}l&&Ft(e.attrs,`set`,``),process.env.NODE_ENV!==`production`&&hs(t||{},i,e)}function ls(e,t,n,r){let[i,a]=e.propsOptions,o=!1,s;if(t)for(let c in t){if(ce(c))continue;let l=t[c],u;i&&x(i,u=k(c))?!a||!a.includes(u)?n[u]=l:(s||={})[u]=l:sc(e.emitsOptions,c)||(!(c in r)||l!==r[c])&&(r[c]=l,o=!0)}if(a){let t=N(n),r=s||f;for(let o=0;o<a.length;o++){let s=a[o];n[s]=us(i,t,s,r[s],e,!x(r,s))}}return o}function us(e,t,n,r,i,a){let o=e[n];if(o!=null){let e=x(o,`default`);if(e&&r===void 0){let e=o.default;if(o.type!==Function&&!o.skipFactory&&T(e)){let{propsDefaults:a}=i;if(n in a)r=a[n];else{let o=pl(i);r=a[n]=e.call(null,t),o()}}else r=e;i.ce&&i.ce._setProp(n,r)}o[0]&&(a&&!e?r=!1:o[1]&&(r===``||r===A(n))&&(r=!0))}return r}const ds=new WeakMap;function fs(e,t,n=!1){let r=n?ds:t.propsCache,i=r.get(e);if(i)return i;let a=e.props,o={},s=[],c=!1;if(!T(e)){let r=e=>{c=!0;let[n,r]=fs(e,t,!0);v(o,n),r&&s.push(...r)};!n&&t.mixins.length&&t.mixins.forEach(r),e.extends&&r(e.extends),e.mixins&&e.mixins.forEach(r)}if(!a&&!c)return D(e)&&r.set(e,p),p;if(S(a))for(let e=0;e<a.length;e++){process.env.NODE_ENV!==`production`&&!E(a[e])&&L(`props must be strings when using array syntax.`,a[e]);let t=k(a[e]);ps(t)&&(o[t]=f)}else if(a)for(let e in process.env.NODE_ENV!==`production`&&!D(a)&&L(`invalid props options`,a),a){let t=k(e);if(ps(t)){let n=a[e],r=o[t]=S(n)||T(n)?{type:n}:v({},n),i=r.type,c=!1,l=!0;if(S(i))for(let e=0;e<i.length;++e){let t=i[e],n=T(t)&&t.name;if(n===`Boolean`){c=!0;break}else n===`String`&&(l=!1)}else c=T(i)&&i.name===`Boolean`;r[0]=c,r[1]=l,(c||x(r,`default`))&&s.push(t)}}let l=[o,s];return D(e)&&r.set(e,l),l}function ps(e){return e[0]!==`$`&&!ce(e)?!0:(process.env.NODE_ENV!==`production`&&L(`Invalid prop name: "${e}" is a reserved property.`),!1)}function ms(e){if(e===null)return`null`;if(typeof e==`function`)return e.name||``;if(typeof e==`object`){let t=e.constructor&&e.constructor.name;return t||``}return``}function hs(e,t,n){let r=N(t),i=n.propsOptions[0],a=Object.keys(e).map(e=>k(e));for(let e in i){let t=i[e];if(t==null)continue;gs(e,r[e],t,process.env.NODE_ENV===`production`?r:Cn(r),!a.includes(e))}}function gs(e,t,n,r,i){let{type:a,required:o,validator:s,skipCheck:c}=n;if(o&&i){L(`Missing required prop: "`+e+`"`);return}if(!(t==null&&!o)){if(a!=null&&a!==!0&&!c){let n=!1,r=S(a)?a:[a],i=[];for(let e=0;e<r.length&&!n;e++){let{valid:a,expectedType:o}=vs(t,r[e]);i.push(o||``),n=a}if(!n){L(ys(e,t,i));return}}s&&!s(t,r)&&L(`Invalid prop: custom validator check failed for prop "`+e+`".`)}}const _s=d(`String,Number,Boolean,Function,Symbol,BigInt`);function vs(e,t){let n,r=ms(t);if(r===`null`)n=e===null;else if(_s(r)){let i=typeof e;n=i===r.toLowerCase(),!n&&i===`object`&&(n=e instanceof t)}else n=r===`Object`?D(e):r===`Array`?S(e):e instanceof t;return{valid:n,expectedType:r}}function ys(e,t,n){if(n.length===0)return`Prop type [] for prop "${e}" won't match anything. Did you mean to use type Array instead?`;let r=`Invalid prop: type check failed for prop "${e}". Expected ${n.map(pe).join(` | `)}`,i=n[0],a=O(t),o=bs(t,i),s=bs(t,a);return n.length===1&&xs(i)&&!Ss(i,a)&&(r+=` with value ${o}`),r+=`, got ${a} `,xs(a)&&(r+=`with value ${s}.`),r}function bs(e,t){return t===`String`?`"${e}"`:t===`Number`?`${Number(e)}`:`${e}`}function xs(e){let t=[`string`,`number`,`boolean`];return t.some(t=>e.toLowerCase()===t)}function Ss(...e){return e.some(e=>e.toLowerCase()===`boolean`)}const Cs=e=>e[0]===`_`||e===`$stable`,ws=e=>S(e)?e.map(tl):[tl(e)],Ts=(e,t,n)=>{if(t._n)return t;let r=R((...r)=>(process.env.NODE_ENV!==`production`&&ll&&!(n===null&&ui)&&!(n&&n.root!==ll.root)&&L(`Slot "${e}" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.`),ws(t(...r))),n);return r._c=!1,r},Es=(e,t,n)=>{let r=e._ctx;for(let n in e){if(Cs(n))continue;let i=e[n];if(T(i))t[n]=Ts(n,i,r);else if(i!=null){process.env.NODE_ENV!==`production`&&L(`Non-function value encountered for slot "${n}". Prefer function slots for better performance.`);let e=ws(i);t[n]=()=>e}}},Ds=(e,t)=>{process.env.NODE_ENV!==`production`&&!Ta(e.vnode)&&L(`Non-function value encountered for default slot. Prefer function slots for better performance.`);let n=ws(t);e.slots.default=()=>n},Os=(e,t,n)=>{for(let r in t)(n||!Cs(r))&&(e[r]=t[r])},ks=(e,t,n)=>{let r=e.slots=ns();if(e.vnode.shapeFlag&32){let e=t.__;e&&_e(r,`__`,e,!0);let i=t._;i?(Os(r,t,n),n&&_e(r,`_`,i,!0)):Es(t,r)}else t&&Ds(e,t)},As=(e,t,n)=>{let{vnode:r,slots:i}=e,a=!0,o=f;if(r.shapeFlag&32){let r=t._;r?process.env.NODE_ENV!==`production`&&Lr?(Os(i,t,n),Ft(e,`set`,`$slots`)):n&&r===1?a=!1:Os(i,t,n):(a=!t.$stable,Es(t,i)),o=t}else t&&(Ds(e,t),o={default:1});if(a)for(let e in i)!Cs(e)&&o[e]==null&&delete i[e]};let js,Ms;function Ns(e,t){e.appContext.config.performance&&Fs()&&Ms.mark(`vue-${t}-${e.uid}`),process.env.NODE_ENV!==`production`&&oi(e,t,Fs()?Ms.now():Date.now())}function Ps(e,t){if(e.appContext.config.performance&&Fs()){let n=`vue-${t}-${e.uid}`,r=n+`:end`;Ms.mark(r),Ms.measure(`<${Pl(e,e.type)}> ${t}`,n,r),Ms.clearMarks(n),Ms.clearMarks(r)}process.env.NODE_ENV!==`production`&&si(e,t,Fs()?Ms.now():Date.now())}function Fs(){return js===void 0&&(typeof window<`u`&&window.performance?(js=!0,Ms=window.performance):js=!1),js}function Is(){let e=[];if(process.env.NODE_ENV!==`production`&&e.length){let t=e.length>1;console.warn(`Feature flag${t?`s`:``} ${e.join(`, `)} ${t?`are`:`is`} not explicitly defined. You are running the esm-bundler build of Vue, which expects these compile-time feature flags to be globally injected via the bundler config in order to get better tree-shaking in the production bundle.

For more details, see https://link.vuejs.org/feature-flags.`)}}const Ls=jc;function Rs(e){return Bs(e)}function zs(e){return Bs(e,ia)}function Bs(e,t){Is();let n=xe();n.__VUE__=!0,process.env.NODE_ENV!==`production`&&Qr(n.__VUE_DEVTOOLS_GLOBAL_HOOK__,n);let{insert:r,remove:i,patchProp:a,createElement:o,createText:s,createComment:c,setText:l,setElementText:u,parentNode:d,nextSibling:h,setScopeId:g=m,insertStaticContent:_}=e,v=(e,t,n,r=null,i=null,a=null,o=void 0,s=null,c=process.env.NODE_ENV!==`production`&&Lr?!1:!!t.dynamicChildren)=>{if(e===t)return;e&&!Uc(e,t)&&(r=be(e),pe(e,i,a,!0),e=null),t.patchFlag===-2&&(c=!1,t.dynamicChildren=null);let{type:l,ref:u,shapeFlag:d}=t;switch(l){case Pc:y(e,t,n,r);break;case V:b(e,t,n,r);break;case Fc:e==null?x(t,n,r,o):process.env.NODE_ENV!==`production`&&C(e,t,n,o);break;case B:ae(e,t,n,r,i,a,o,s,c);break;default:d&1?te(e,t,n,r,i,a,o,s,c):d&6?O(e,t,n,r,i,a,o,s,c):d&64||d&128?l.process(e,t,n,r,i,a,o,s,c,we):process.env.NODE_ENV!==`production`&&L(`Invalid VNode type:`,l,`(${typeof l})`)}u!=null&&i?Zi(u,e&&e.ref,a,t||e,!t):u==null&&e&&e.ref!=null&&Zi(e.ref,null,a,e,!0)},y=(e,t,n,i)=>{if(e==null)r(t.el=s(t.children),n,i);else{let n=t.el=e.el;t.children!==e.children&&l(n,t.children)}},b=(e,t,n,i)=>{e==null?r(t.el=c(t.children||``),n,i):t.el=e.el},x=(e,t,n,r)=>{[e.el,e.anchor]=_(e.children,t,n,r,e.el,e.anchor)},C=(e,t,n,r)=>{if(t.children!==e.children){let i=h(e.anchor);ee(e),[t.el,t.anchor]=_(t.children,n,i,r)}else t.el=e.el,t.anchor=e.anchor},w=({el:e,anchor:t},n,i)=>{let a;for(;e&&e!==t;)a=h(e),r(e,n,i),e=a;r(t,n,i)},ee=({el:e,anchor:t})=>{let n;for(;e&&e!==t;)n=h(e),i(e),e=n;i(t)},te=(e,t,n,r,i,a,o,s,c)=>{t.type===`svg`?o=`svg`:t.type===`math`&&(o=`mathml`),e==null?T(t,n,r,i,a,o,s,c):D(e,t,i,a,o,s,c)},T=(e,t,n,i,s,c,l,d)=>{let f,p,{props:m,shapeFlag:h,transition:g,dirs:_}=e;if(f=e.el=o(e.type,c,m&&m.is,m),h&8?u(f,e.children):h&16&&ne(e.children,f,null,i,s,Vs(e,c),l,d),_&&vi(e,null,i,`created`),E(f,e,e.scopeId,l,i),m){for(let e in m)e!==`value`&&!ce(e)&&a(f,e,null,m[e],c,i);`value`in m&&a(f,`value`,null,m.value,c),(p=m.onVnodeBeforeMount)&&al(p,i,e)}process.env.NODE_ENV!==`production`&&(_e(f,`__vnode`,e,!0),_e(f,`__vueParentComponent`,i,!0)),_&&vi(e,null,i,`beforeMount`);let v=Us(s,g);v&&g.beforeEnter(f),r(f,t,n),((p=m&&m.onVnodeMounted)||v||_)&&Ls(()=>{p&&al(p,i,e),v&&g.enter(f),_&&vi(e,null,i,`mounted`)},s)},E=(e,t,n,r,i)=>{if(n&&g(e,n),r)for(let t=0;t<r.length;t++)g(e,r[t]);if(i){let n=i.subTree;if(process.env.NODE_ENV!==`production`&&n.patchFlag>0&&n.patchFlag&2048&&(n=fc(n.children)||n),t===n||yc(n.type)&&(n.ssContent===t||n.ssFallback===t)){let t=i.vnode;E(e,t,t.scopeId,t.slotScopeIds,i.parent)}}},ne=(e,t,n,r,i,a,o,s,c=0)=>{for(let l=c;l<e.length;l++){let c=e[l]=s?nl(e[l]):tl(e[l]);v(null,c,t,n,r,i,a,o,s)}},D=(e,t,n,r,i,o,s)=>{let c=t.el=e.el;process.env.NODE_ENV!==`production`&&(c.__vnode=t);let{patchFlag:l,dynamicChildren:d,dirs:p}=t;l|=e.patchFlag&16;let m=e.props||f,h=t.props||f,g;if(n&&Hs(n,!1),(g=h.onVnodeBeforeUpdate)&&al(g,n,t,e),p&&vi(t,e,n,`beforeUpdate`),n&&Hs(n,!0),process.env.NODE_ENV!==`production`&&Lr&&(l=0,s=!1,d=null),(m.innerHTML&&h.innerHTML==null||m.textContent&&h.textContent==null)&&u(c,``),d?(re(e.dynamicChildren,d,c,n,r,Vs(t,i),o),process.env.NODE_ENV!==`production`&&Ws(e,t)):s||de(e,t,c,null,n,r,Vs(t,i),o,!1),l>0){if(l&16)ie(c,m,h,n,i);else if(l&2&&m.class!==h.class&&a(c,`class`,null,h.class,i),l&4&&a(c,`style`,m.style,h.style,i),l&8){let e=t.dynamicProps;for(let t=0;t<e.length;t++){let r=e[t],o=m[r],s=h[r];(s!==o||r===`value`)&&a(c,r,o,s,i,n)}}l&1&&e.children!==t.children&&u(c,t.children)}else !s&&d==null&&ie(c,m,h,n,i);((g=h.onVnodeUpdated)||p)&&Ls(()=>{g&&al(g,n,t,e),p&&vi(t,e,n,`updated`)},r)},re=(e,t,n,r,i,a,o)=>{for(let s=0;s<t.length;s++){let c=e[s],l=t[s],u=c.el&&(c.type===B||!Uc(c,l)||c.shapeFlag&198)?d(c.el):n;v(c,l,u,null,r,i,a,o,!0)}},ie=(e,t,n,r,i)=>{if(t!==n){if(t!==f)for(let o in t)!ce(o)&&!(o in n)&&a(e,o,t[o],null,i,r);for(let o in n){if(ce(o))continue;let s=n[o],c=t[o];s!==c&&o!==`value`&&a(e,o,c,s,i,r)}`value`in n&&a(e,`value`,t.value,n.value,i)}},ae=(e,t,n,i,a,o,c,l,u)=>{let d=t.el=e?e.el:s(``),f=t.anchor=e?e.anchor:s(``),{patchFlag:p,dynamicChildren:m,slotScopeIds:h}=t;process.env.NODE_ENV!==`production`&&(Lr||p&2048)&&(p=0,u=!1,m=null),h&&(l=l?l.concat(h):h),e==null?(r(d,n,i),r(f,n,i),ne(t.children||[],n,f,a,o,c,l,u)):p>0&&p&64&&m&&e.dynamicChildren?(re(e.dynamicChildren,m,n,a,o,c,l),process.env.NODE_ENV===`production`?(t.key!=null||a&&t===a.subTree)&&Ws(e,t,!0):Ws(e,t)):de(e,t,n,f,a,o,c,l,u)},O=(e,t,n,r,i,a,o,s,c)=>{t.slotScopeIds=s,e==null?t.shapeFlag&512?i.ctx.activate(t,n,r,o,c):oe(t,n,r,i,a,o,c):se(e,t,c)},oe=(e,t,n,r,i,a,o)=>{let s=e.component=cl(e,r,i);if(process.env.NODE_ENV!==`production`&&s.type.__hmrId&&Br(s),process.env.NODE_ENV!==`production`&&(ir(e),Ns(s,`mount`)),Ta(e)&&(s.ctx.renderer=we),process.env.NODE_ENV!==`production`&&Ns(s,`init`),yl(s,!1,o),process.env.NODE_ENV!==`production`&&Ps(s,`init`),process.env.NODE_ENV!==`production`&&Lr&&(e.el=null),s.asyncDep){if(i&&i.registerDep(s,le,o),!e.el){let e=s.subTree=K(V);b(null,e,t,n)}}else le(s,e,t,n,i,a,o);process.env.NODE_ENV!==`production`&&(ar(),Ps(s,`mount`))},se=(e,t,n)=>{let r=t.component=e.component;if(gc(e,t,n))if(r.asyncDep&&!r.asyncResolved){process.env.NODE_ENV!==`production`&&ir(t),ue(r,t,n),process.env.NODE_ENV!==`production`&&ar();return}else r.next=t,r.update();else t.el=e.el,r.vnode=t},le=(e,t,n,r,i,a,o)=>{let s=()=>{if(e.isMounted){let{next:t,bu:n,u:r,parent:c,vnode:l}=e;{let n=Ks(e);if(n){t&&(t.el=l.el,ue(e,t,o)),n.asyncDep.then(()=>{e.isUnmounted||s()});return}}let u=t,f;process.env.NODE_ENV!==`production`&&ir(t||e.vnode),Hs(e,!1),t?(t.el=l.el,ue(e,t,o)):t=l,n&&ge(n),(f=t.props&&t.props.onVnodeBeforeUpdate)&&al(f,c,t,l),Hs(e,!0),process.env.NODE_ENV!==`production`&&Ns(e,`render`);let p=uc(e);process.env.NODE_ENV!==`production`&&Ps(e,`render`);let m=e.subTree;e.subTree=p,process.env.NODE_ENV!==`production`&&Ns(e,`patch`),v(m,p,d(m.el),be(m),e,i,a),process.env.NODE_ENV!==`production`&&Ps(e,`patch`),t.el=p.el,u===null&&vc(e,p.el),r&&Ls(r,i),(f=t.props&&t.props.onVnodeUpdated)&&Ls(()=>al(f,c,t,l),i),process.env.NODE_ENV!==`production`&&ni(e),process.env.NODE_ENV!==`production`&&ar()}else{let o,{el:s,props:c}=t,{bm:l,m:u,parent:d,root:f,type:p}=e,m=Sa(t);if(Hs(e,!1),l&&ge(l),!m&&(o=c&&c.onVnodeBeforeMount)&&al(o,d,t),Hs(e,!0),s&&Ee){let t=()=>{process.env.NODE_ENV!==`production`&&Ns(e,`render`),e.subTree=uc(e),process.env.NODE_ENV!==`production`&&Ps(e,`render`),process.env.NODE_ENV!==`production`&&Ns(e,`hydrate`),Ee(s,e.subTree,e,i,null),process.env.NODE_ENV!==`production`&&Ps(e,`hydrate`)};m&&p.__asyncHydrate?p.__asyncHydrate(s,e,t):t()}else{f.ce&&f.ce._def.shadowRoot!==!1&&f.ce._injectChildStyle(p),process.env.NODE_ENV!==`production`&&Ns(e,`render`);let o=e.subTree=uc(e);process.env.NODE_ENV!==`production`&&Ps(e,`render`),process.env.NODE_ENV!==`production`&&Ns(e,`patch`),v(null,o,n,r,e,i,a),process.env.NODE_ENV!==`production`&&Ps(e,`patch`),t.el=o.el}if(u&&Ls(u,i),!m&&(o=c&&c.onVnodeMounted)){let e=t;Ls(()=>al(o,d,e),i)}(t.shapeFlag&256||d&&Sa(d.vnode)&&d.vnode.shapeFlag&256)&&e.a&&Ls(e.a,i),e.isMounted=!0,process.env.NODE_ENV!==`production`&&ti(e),t=n=r=null}};e.scope.on();let c=e.effect=new ot(s);e.scope.off();let l=e.update=c.run.bind(c),u=e.job=c.runIfDirty.bind(c);u.i=e,u.id=e.uid,c.scheduler=()=>kr(u),Hs(e,!0),process.env.NODE_ENV!==`production`&&(c.onTrack=e.rtc?t=>ge(e.rtc,t):void 0,c.onTrigger=e.rtg?t=>ge(e.rtg,t):void 0),l()},ue=(e,t,n)=>{t.component=e;let r=e.vnode.props;e.vnode=t,e.next=null,cs(e,t.props,r,n),As(e,t.children,n),Ct(),Mr(e),wt()},de=(e,t,n,r,i,a,o,s,c=!1)=>{let l=e&&e.children,d=e?e.shapeFlag:0,f=t.children,{patchFlag:p,shapeFlag:m}=t;if(p>0){if(p&128){fe(l,f,n,r,i,a,o,s,c);return}else if(p&256){k(l,f,n,r,i,a,o,s,c);return}}m&8?(d&16&&ye(l,i,a),f!==l&&u(n,f)):d&16?m&16?fe(l,f,n,r,i,a,o,s,c):ye(l,i,a,!0):(d&8&&u(n,``),m&16&&ne(f,n,r,i,a,o,s,c))},k=(e,t,n,r,i,a,o,s,c)=>{e||=p,t||=p;let l=e.length,u=t.length,d=Math.min(l,u),f;for(f=0;f<d;f++){let r=t[f]=c?nl(t[f]):tl(t[f]);v(e[f],r,n,null,i,a,o,s,c)}l>u?ye(e,i,a,!0,!1,d):ne(t,n,r,i,a,o,s,c,d)},fe=(e,t,n,r,i,a,o,s,c)=>{let l=0,u=t.length,d=e.length-1,f=u-1;for(;l<=d&&l<=f;){let r=e[l],u=t[l]=c?nl(t[l]):tl(t[l]);if(Uc(r,u))v(r,u,n,null,i,a,o,s,c);else break;l++}for(;l<=d&&l<=f;){let r=e[d],l=t[f]=c?nl(t[f]):tl(t[f]);if(Uc(r,l))v(r,l,n,null,i,a,o,s,c);else break;d--,f--}if(l>d){if(l<=f){let e=f+1,d=e<u?t[e].el:r;for(;l<=f;)v(null,t[l]=c?nl(t[l]):tl(t[l]),n,d,i,a,o,s,c),l++}}else if(l>f)for(;l<=d;)pe(e[l],i,a,!0),l++;else{let m=l,h=l,g=new Map;for(l=h;l<=f;l++){let e=t[l]=c?nl(t[l]):tl(t[l]);e.key!=null&&(process.env.NODE_ENV!==`production`&&g.has(e.key)&&L(`Duplicate keys found during update:`,JSON.stringify(e.key),`Make sure keys are unique.`),g.set(e.key,l))}let _,y=0,b=f-h+1,x=!1,S=0,C=Array(b);for(l=0;l<b;l++)C[l]=0;for(l=m;l<=d;l++){let r=e[l];if(y>=b){pe(r,i,a,!0);continue}let u;if(r.key!=null)u=g.get(r.key);else for(_=h;_<=f;_++)if(C[_-h]===0&&Uc(r,t[_])){u=_;break}u===void 0?pe(r,i,a,!0):(C[u-h]=l+1,u>=S?S=u:x=!0,v(r,t[u],n,null,i,a,o,s,c),y++)}let w=x?Gs(C):p;for(_=w.length-1,l=b-1;l>=0;l--){let e=h+l,d=t[e],f=e+1<u?t[e+1].el:r;C[l]===0?v(null,d,n,f,i,a,o,s,c):x&&(_<0||l!==w[_]?A(d,n,f,2):_--)}}},A=(e,t,n,a,o=null)=>{let{el:s,type:c,transition:l,children:u,shapeFlag:d}=e;if(d&6){A(e.component.subTree,t,n,a);return}if(d&128){e.suspense.move(t,n,a);return}if(d&64){c.move(e,t,n,we);return}if(c===B){r(s,t,n);for(let e=0;e<u.length;e++)A(u[e],t,n,a);r(e.anchor,t,n);return}if(c===Fc){w(e,t,n);return}let f=a!==2&&d&1&&l;if(f)if(a===0)l.beforeEnter(s),r(s,t,n),Ls(()=>l.enter(s),o);else{let{leave:a,delayLeave:o,afterLeave:c}=l,u=()=>{e.ctx.isUnmounted?i(s):r(s,t,n)},d=()=>{a(s,()=>{u(),c&&c()})};o?o(s,u,d):d()}else r(s,t,n)},pe=(e,t,n,r=!1,i=!1)=>{let{type:a,props:o,ref:s,children:c,dynamicChildren:l,shapeFlag:u,patchFlag:d,dirs:f,cacheIndex:p}=e;if(d===-2&&(i=!1),s!=null&&(Ct(),Zi(s,null,n,e,!0),wt()),p!=null&&(t.renderCache[p]=void 0),u&256){t.ctx.deactivate(e);return}let m=u&1&&f,h=!Sa(e),g;if(h&&(g=o&&o.onVnodeBeforeUnmount)&&al(g,t,e),u&6)ve(e.component,n,r);else{if(u&128){e.suspense.unmount(n,r);return}m&&vi(e,null,t,`beforeUnmount`),u&64?e.type.remove(e,t,n,we,r):l&&!l.hasOnce&&(a!==B||d>0&&d&64)?ye(l,t,n,!1,!0):(a===B&&d&384||!i&&u&16)&&ye(c,t,n),r&&me(e)}(h&&(g=o&&o.onVnodeUnmounted)||m)&&Ls(()=>{g&&al(g,t,e),m&&vi(e,null,t,`unmounted`)},n)},me=e=>{let{type:t,el:n,anchor:r,transition:a}=e;if(t===B){process.env.NODE_ENV!==`production`&&e.patchFlag>0&&e.patchFlag&2048&&a&&!a.persisted?e.children.forEach(e=>{e.type===V?i(e.el):me(e)}):he(n,r);return}if(t===Fc){ee(e);return}let o=()=>{i(n),a&&!a.persisted&&a.afterLeave&&a.afterLeave()};if(e.shapeFlag&1&&a&&!a.persisted){let{leave:t,delayLeave:r}=a,i=()=>t(n,o);r?r(e.el,o,i):i()}else o()},he=(e,t)=>{let n;for(;e!==t;)n=h(e),i(e),e=n;i(t)},ve=(e,t,n)=>{process.env.NODE_ENV!==`production`&&e.type.__hmrId&&Vr(e);let{bum:r,scope:i,job:a,subTree:o,um:s,m:c,a:l,parent:u,slots:{__:d}}=e;qs(c),qs(l),r&&ge(r),u&&S(d)&&d.forEach(e=>{u.renderCache[e]=void 0}),i.stop(),a&&(a.flags|=8,pe(o,e,t,n)),s&&Ls(s,t),Ls(()=>{e.isUnmounted=!0},t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,t.deps===0&&t.resolve()),process.env.NODE_ENV!==`production`&&ii(e)},ye=(e,t,n,r=!1,i=!1,a=0)=>{for(let o=a;o<e.length;o++)pe(e[o],t,n,r,i)},be=e=>{if(e.shapeFlag&6)return be(e.component.subTree);if(e.shapeFlag&128)return e.suspense.next();let t=h(e.anchor||e.el),n=t&&t[yi];return n?h(n):t},Se=!1,Ce=(e,t,n)=>{e==null?t._vnode&&pe(t._vnode,null,null,!0):v(t._vnode||null,e,t,null,null,null,n),t._vnode=e,Se||(Se=!0,Mr(),Nr(),Se=!1)},we={p:v,um:pe,m:A,r:me,mt:oe,mc:ne,pc:de,pbc:re,n:be,o:e},Te,Ee;return t&&([Te,Ee]=t(we)),{render:Ce,hydrate:Te,createApp:Xo(Ce,Te)}}function Vs({type:e,props:t},n){return n===`svg`&&e===`foreignObject`||n===`mathml`&&e===`annotation-xml`&&t&&t.encoding&&t.encoding.includes(`html`)?void 0:n}function Hs({effect:e,job:t},n){n?(e.flags|=32,t.flags|=4):(e.flags&=-33,t.flags&=-5)}function Us(e,t){return(!e||e&&!e.pendingBranch)&&t&&!t.persisted}function Ws(e,t,n=!1){let r=e.children,i=t.children;if(S(r)&&S(i))for(let e=0;e<r.length;e++){let t=r[e],a=i[e];a.shapeFlag&1&&!a.dynamicChildren&&((a.patchFlag<=0||a.patchFlag===32)&&(a=i[e]=nl(i[e]),a.el=t.el),!n&&a.patchFlag!==-2&&Ws(t,a)),a.type===Pc&&(a.el=t.el),a.type===V&&!a.el&&(a.el=t.el),process.env.NODE_ENV!==`production`&&a.el&&(a.el.__vnode=a)}}function Gs(e){let t=e.slice(),n=[0],r,i,a,o,s,c=e.length;for(r=0;r<c;r++){let c=e[r];if(c!==0){if(i=n[n.length-1],e[i]<c){t[r]=i,n.push(r);continue}for(a=0,o=n.length-1;a<o;)s=a+o>>1,e[n[s]]<c?a=s+1:o=s;c<e[n[a]]&&(a>0&&(t[r]=n[a-1]),n[a]=r)}}for(a=n.length,o=n[a-1];a-- >0;)n[a]=o,o=t[o];return n}function Ks(e){let t=e.subTree.component;if(t)return t.asyncDep&&!t.asyncResolved?t:Ks(t)}function qs(e){if(e)for(let t=0;t<e.length;t++)e[t].flags|=8}const Js=Symbol.for(`v-scx`),Ys=()=>{{let e=$o(Js);return e||process.env.NODE_ENV!==`production`&&L(`Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build.`),e}};function Xs(e,t){return ec(e,null,t)}function Zs(e,t){return ec(e,null,process.env.NODE_ENV===`production`?{flush:`post`}:v({},t,{flush:`post`}))}function Qs(e,t){return ec(e,null,process.env.NODE_ENV===`production`?{flush:`sync`}:v({},t,{flush:`sync`}))}function $s(e,t,n){return process.env.NODE_ENV!==`production`&&!T(t)&&L("`watch(fn, options?)` signature has been moved to a separate API. Use `watchEffect(fn, options?)` instead. `watch` now only supports `watch(source, cb, options?) signature."),ec(e,t,n)}function ec(e,t,n=f){let{immediate:r,deep:i,flush:a,once:o}=n;process.env.NODE_ENV!==`production`&&!t&&(r!==void 0&&L(`watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.`),i!==void 0&&L(`watch() "deep" option is only respected when using the watch(source, callback, options?) signature.`),o!==void 0&&L(`watch() "once" option is only respected when using the watch(source, callback, options?) signature.`));let s=v({},n);process.env.NODE_ENV!==`production`&&(s.onWarn=L);let c=t&&r||!t&&a!==`post`,l;if(vl){if(a===`sync`){let e=Ys();l=e.__watcherHandles||=[]}else if(!c){let e=()=>{};return e.stop=m,e.resume=m,e.pause=m,e}}let u=ll;s.call=(e,t,n)=>gr(e,u,t,n);let d=!1;a===`post`?s.scheduler=e=>{Ls(e,u&&u.suspense)}:a!==`sync`&&(d=!0,s.scheduler=(e,t)=>{t?e():kr(e)}),s.augmentJob=e=>{t&&(e.flags|=4),d&&(e.flags|=2,u&&(e.id=u.uid,e.i=u))};let p=tr(e,t,s);return vl&&(l?l.push(p):c&&p()),p}function tc(e,t,n){let r=this.proxy,i=E(e)?e.includes(`.`)?nc(r,e):()=>r[e]:e.bind(r,r),a;T(t)?a=t:(a=t.handler,n=t);let o=pl(this),s=ec(i,a.bind(r),n);return o(),s}function nc(e,t){let n=t.split(`.`);return()=>{let t=e;for(let e=0;e<n.length&&t;e++)t=t[n[e]];return t}}function rc(e,t,n=f){let r=ul();if(process.env.NODE_ENV!==`production`&&!r)return L(`useModel() called without active instance.`),F();let i=k(t);if(process.env.NODE_ENV!==`production`&&!r.propsOptions[0][i])return L(`useModel() called with prop "${t}" which is not declared.`),F();let a=A(t),o=ic(e,i),s=Bn((o,s)=>{let c,l=f,u;return Qs(()=>{let t=e[i];he(c,t)&&(c=t,s())}),{get(){return o(),n.get?n.get(c):c},set(e){let o=n.set?n.set(e):e;if(!he(o,c)&&!(l!==f&&he(e,l)))return;let d=r.vnode.props;d&&(t in d||i in d||a in d)&&(`onUpdate:${t}`in d||`onUpdate:${i}`in d||`onUpdate:${a}`in d)||(c=e,s()),r.emit(`update:${t}`,o),he(e,o)&&he(e,l)&&!he(o,u)&&s(),l=e,u=o}}});return s[Symbol.iterator]=()=>{let e=0;return{next(){return e<2?{value:e++?o||f:s,done:!1}:{done:!0}}}},s}const ic=(e,t)=>t===`modelValue`||t===`model-value`?e.modelModifiers:e[`${t}Modifiers`]||e[`${k(t)}Modifiers`]||e[`${A(t)}Modifiers`];function ac(e,t,...n){if(e.isUnmounted)return;let r=e.vnode.props||f;if(process.env.NODE_ENV!==`production`){let{emitsOptions:r,propsOptions:[i]}=e;if(r)if(!(t in r))(!i||!(me(k(t))in i))&&L(`Component emitted event "${t}" but it is neither declared in the emits option nor as an "${me(k(t))}" prop.`);else{let e=r[t];if(T(e)){let r=e(...n);r||L(`Invalid event arguments: event validation failed for event "${t}".`)}}}let i=n,a=t.startsWith(`update:`),o=a&&ic(r,t.slice(7));if(o&&(o.trim&&(i=n.map(e=>E(e)?e.trim():e)),o.number&&(i=n.map(ve))),process.env.NODE_ENV!==`production`&&li(e,t,i),process.env.NODE_ENV!==`production`){let n=t.toLowerCase();n!==t&&r[me(n)]&&L(`Event "${n}" is emitted in component ${Pl(e,e.type)} but the handler is registered for "${t}". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "${A(t)}" instead of "${t}".`)}let s,c=r[s=me(t)]||r[s=me(k(t))];!c&&a&&(c=r[s=me(A(t))]),c&&gr(c,e,6,i);let l=r[s+`Once`];if(l){if(!e.emitted)e.emitted={};else if(e.emitted[s])return;e.emitted[s]=!0,gr(l,e,6,i)}}function oc(e,t,n=!1){let r=t.emitsCache,i=r.get(e);if(i!==void 0)return i;let a=e.emits,o={},s=!1;if(!T(e)){let r=e=>{let n=oc(e,t,!0);n&&(s=!0,v(o,n))};!n&&t.mixins.length&&t.mixins.forEach(r),e.extends&&r(e.extends),e.mixins&&e.mixins.forEach(r)}return!a&&!s?(D(e)&&r.set(e,null),null):(S(a)?a.forEach(e=>o[e]=null):v(o,a),D(e)&&r.set(e,o),o)}function sc(e,t){return!e||!g(t)?!1:(t=t.slice(2).replace(/Once$/,``),x(e,t[0].toLowerCase()+t.slice(1))||x(e,A(t))||x(e,t))}let cc=!1;function lc(){cc=!0}function uc(e){let{type:t,vnode:n,proxy:r,withProxy:i,propsOptions:[a],slots:o,attrs:s,emit:c,render:l,renderCache:u,props:d,data:f,setupState:p,ctx:m,inheritAttrs:h}=e,v=fi(e),y,b;process.env.NODE_ENV!==`production`&&(cc=!1);try{if(n.shapeFlag&4){let e=i||r,t=process.env.NODE_ENV!==`production`&&p.__isScriptSetup?new Proxy(e,{get(e,t,n){return L(`Property '${String(t)}' was accessed via 'this'. Avoid using 'this' in templates.`),Reflect.get(e,t,n)}}):e;y=tl(l.call(t,e,u,process.env.NODE_ENV===`production`?d:Cn(d),p,f,m)),b=s}else{let e=t;process.env.NODE_ENV!==`production`&&s===d&&lc(),y=tl(e.length>1?e(process.env.NODE_ENV===`production`?d:Cn(d),process.env.NODE_ENV===`production`?{attrs:s,slots:o,emit:c}:{get attrs(){return lc(),Cn(s)},slots:o,emit:c}):e(process.env.NODE_ENV===`production`?d:Cn(d),null)),b=t.props?s:pc(s)}}catch(t){Ic.length=0,_r(t,e,1),y=K(V)}let x=y,S;if(process.env.NODE_ENV!==`production`&&y.patchFlag>0&&y.patchFlag&2048&&([x,S]=dc(y)),b&&h!==!1){let e=Object.keys(b),{shapeFlag:t}=x;if(e.length){if(t&7)a&&e.some(_)&&(b=mc(b,a)),x=Zc(x,b,!1,!0);else if(process.env.NODE_ENV!==`production`&&!cc&&x.type!==V){let e=Object.keys(s),t=[],n=[];for(let r=0,i=e.length;r<i;r++){let i=e[r];g(i)?_(i)||t.push(i[2].toLowerCase()+i.slice(3)):n.push(i)}n.length&&L(`Extraneous non-props attributes (${n.join(`, `)}) were passed to component but could not be automatically inherited because component renders fragment or text or teleport root nodes.`),t.length&&L(`Extraneous non-emits event listeners (${t.join(`, `)}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the "emits" option.`)}}}return n.dirs&&(process.env.NODE_ENV!==`production`&&!hc(x)&&L(`Runtime directive used on component with non-element root node. The directives will not function as intended.`),x=Zc(x,null,!1,!0),x.dirs=x.dirs?x.dirs.concat(n.dirs):n.dirs),n.transition&&(process.env.NODE_ENV!==`production`&&!hc(x)&&L(`Component inside <Transition> renders non-element root node that cannot be animated.`),Gi(x,n.transition)),process.env.NODE_ENV!==`production`&&S?S(x):y=x,fi(v),y}const dc=e=>{let t=e.children,n=e.dynamicChildren,r=fc(t,!1);if(r){if(process.env.NODE_ENV!==`production`&&r.patchFlag>0&&r.patchFlag&2048)return dc(r)}else return[e,void 0];let i=t.indexOf(r),a=n?n.indexOf(r):-1,o=r=>{t[i]=r,n&&(a>-1?n[a]=r:r.patchFlag>0&&(e.dynamicChildren=[...n,r]))};return[tl(r),o]};function fc(e,t=!0){let n;for(let r=0;r<e.length;r++){let i=e[r];if(Hc(i)){if(i.type!==V||i.children===`v-if`){if(n)return;if(n=i,process.env.NODE_ENV!==`production`&&t&&n.patchFlag>0&&n.patchFlag&2048)return fc(n.children)}}else return}return n}const pc=e=>{let t;for(let n in e)(n===`class`||n===`style`||g(n))&&((t||={})[n]=e[n]);return t},mc=(e,t)=>{let n={};for(let r in e)(!_(r)||!(r.slice(9)in t))&&(n[r]=e[r]);return n},hc=e=>e.shapeFlag&7||e.type===V;function gc(e,t,n){let{props:r,children:i,component:a}=e,{props:o,children:s,patchFlag:c}=t,l=a.emitsOptions;if(process.env.NODE_ENV!==`production`&&(i||s)&&Lr||t.dirs||t.transition)return!0;if(n&&c>=0){if(c&1024)return!0;if(c&16)return r?_c(r,o,l):!!o;if(c&8){let e=t.dynamicProps;for(let t=0;t<e.length;t++){let n=e[t];if(o[n]!==r[n]&&!sc(l,n))return!0}}}else return(i||s)&&(!s||!s.$stable)?!0:r===o?!1:r?o?_c(r,o,l):!0:!!o;return!1}function _c(e,t,n){let r=Object.keys(t);if(r.length!==Object.keys(e).length)return!0;for(let i=0;i<r.length;i++){let a=r[i];if(t[a]!==e[a]&&!sc(n,a))return!0}return!1}function vc({vnode:e,parent:t},n){for(;t;){let r=t.subTree;if(r.suspense&&r.suspense.activeBranch===e&&(r.el=e.el),r===e)(e=t.vnode).el=n,t=t.parent;else break}}const yc=e=>e.__isSuspense;let bc=0;const xc={name:`Suspense`,__isSuspense:!0,process(e,t,n,r,i,a,o,s,c,l){if(e==null)wc(t,n,r,i,a,o,s,c,l);else{if(a&&a.deps>0&&!e.suspense.isInFallback){t.suspense=e.suspense,t.suspense.vnode=t,t.el=e.el;return}Tc(e,t,n,r,i,o,s,c,l)}},hydrate:Oc,normalize:kc},Sc=xc;function Cc(e,t){let n=e.props&&e.props[t];T(n)&&n()}function wc(e,t,n,r,i,a,o,s,c){let{p:l,o:{createElement:u}}=c,d=u(`div`),f=e.suspense=Dc(e,i,r,t,d,n,a,o,s,c);l(null,f.pendingBranch=e.ssContent,d,null,r,f,a,o),f.deps>0?(Cc(e,`onPending`),Cc(e,`onFallback`),l(null,e.ssFallback,t,n,r,null,a,o),Mc(f,e.ssFallback)):f.resolve(!1,!0)}function Tc(e,t,n,r,i,a,o,s,{p:c,um:l,o:{createElement:u}}){let d=t.suspense=e.suspense;d.vnode=t,t.el=e.el;let f=t.ssContent,p=t.ssFallback,{activeBranch:m,pendingBranch:h,isInFallback:g,isHydrating:_}=d;if(h)d.pendingBranch=f,Uc(f,h)?(c(h,f,d.hiddenContainer,null,i,d,a,o,s),d.deps<=0?d.resolve():g&&(_||(c(m,p,n,r,i,null,a,o,s),Mc(d,p)))):(d.pendingId=bc++,_?(d.isHydrating=!1,d.activeBranch=h):l(h,i,d),d.deps=0,d.effects.length=0,d.hiddenContainer=u(`div`),g?(c(null,f,d.hiddenContainer,null,i,d,a,o,s),d.deps<=0?d.resolve():(c(m,p,n,r,i,null,a,o,s),Mc(d,p))):m&&Uc(f,m)?(c(m,f,n,r,i,d,a,o,s),d.resolve(!0)):(c(null,f,d.hiddenContainer,null,i,d,a,o,s),d.deps<=0&&d.resolve()));else if(m&&Uc(f,m))c(m,f,n,r,i,d,a,o,s),Mc(d,f);else if(Cc(t,`onPending`),d.pendingBranch=f,f.shapeFlag&512?d.pendingId=f.component.suspenseId:d.pendingId=bc++,c(null,f,d.hiddenContainer,null,i,d,a,o,s),d.deps<=0)d.resolve();else{let{timeout:e,pendingId:t}=d;e>0?setTimeout(()=>{d.pendingId===t&&d.fallback(p)},e):e===0&&d.fallback(p)}}let Ec=!1;function Dc(e,t,n,r,i,a,o,s,c,l,u=!1){process.env.NODE_ENV!==`production`&&!Ec&&(Ec=!0,console[console.info?`info`:`log`](`<Suspense> is an experimental feature and its API will likely change.`));let{p:d,m:f,um:p,n:m,o:{parentNode:h,remove:g}}=l,_,v=Nc(e);v&&t&&t.pendingBranch&&(_=t.pendingId,t.deps++);let y=e.props?ye(e.props.timeout):void 0;process.env.NODE_ENV!==`production`&&fr(y,`Suspense timeout`);let b=a,x={vnode:e,parent:t,parentComponent:n,namespace:o,container:r,hiddenContainer:i,deps:0,pendingId:bc++,timeout:typeof y==`number`?y:-1,activeBranch:null,pendingBranch:null,isInFallback:!u,isHydrating:u,isUnmounted:!1,effects:[],resolve(e=!1,n=!1){if(process.env.NODE_ENV!==`production`){if(!e&&!x.pendingBranch)throw Error(`suspense.resolve() is called without a pending branch.`);if(x.isUnmounted)throw Error(`suspense.resolve() is called on an already unmounted suspense boundary.`)}let{vnode:r,activeBranch:i,pendingBranch:o,pendingId:s,effects:c,parentComponent:l,container:u}=x,d=!1;x.isHydrating?x.isHydrating=!1:e||(d=i&&o.transition&&o.transition.mode===`out-in`,d&&(i.transition.afterLeave=()=>{s===x.pendingId&&(f(o,u,a===b?m(i):a,0),jr(c))}),i&&(h(i.el)===u&&(a=m(i)),p(i,l,x,!0)),d||f(o,u,a,0)),Mc(x,o),x.pendingBranch=null,x.isInFallback=!1;let g=x.parent,y=!1;for(;g;){if(g.pendingBranch){g.effects.push(...c),y=!0;break}g=g.parent}!y&&!d&&jr(c),x.effects=[],v&&t&&t.pendingBranch&&_===t.pendingId&&(t.deps--,t.deps===0&&!n&&t.resolve()),Cc(r,`onResolve`)},fallback(e){if(!x.pendingBranch)return;let{vnode:t,activeBranch:n,parentComponent:r,container:i,namespace:a}=x;Cc(t,`onFallback`);let o=m(n),l=()=>{x.isInFallback&&(d(null,e,i,o,r,null,a,s,c),Mc(x,e))},u=e.transition&&e.transition.mode===`out-in`;u&&(n.transition.afterLeave=l),x.isInFallback=!0,p(n,r,null,!0),u||l()},move(e,t,n){x.activeBranch&&f(x.activeBranch,e,t,n),x.container=e},next(){return x.activeBranch&&m(x.activeBranch)},registerDep(e,t,n){let r=!!x.pendingBranch;r&&x.deps++;let i=e.vnode.el;e.asyncDep.catch(t=>{_r(t,e,0)}).then(a=>{if(e.isUnmounted||x.isUnmounted||x.pendingId!==e.suspenseId)return;e.asyncResolved=!0;let{vnode:s}=e;process.env.NODE_ENV!==`production`&&ir(s),xl(e,a,!1),i&&(s.el=i);let c=!i&&e.subTree.el;t(e,s,h(i||e.subTree.el),i?null:m(e.subTree),x,o,n),c&&g(c),vc(e,s.el),process.env.NODE_ENV!==`production`&&ar(),r&&--x.deps===0&&x.resolve()})},unmount(e,t){x.isUnmounted=!0,x.activeBranch&&p(x.activeBranch,n,e,t),x.pendingBranch&&p(x.pendingBranch,n,e,t)}};return x}function Oc(e,t,n,r,i,a,o,s,c){let l=t.suspense=Dc(t,r,n,e.parentNode,document.createElement(`div`),null,i,a,o,s,!0),u=c(e,l.pendingBranch=t.ssContent,n,l,a,o);return l.deps===0&&l.resolve(!1,!0),u}function kc(e){let{shapeFlag:t,children:n}=e,r=t&32;e.ssContent=Ac(r?n.default:n),e.ssFallback=r?Ac(n.fallback):K(V)}function Ac(e){let t;if(T(e)){let n=zc&&e._c;n&&(e._d=!1,H()),e=e(),n&&(e._d=!0,t=Lc,Rc())}if(S(e)){let t=fc(e);process.env.NODE_ENV!==`production`&&!t&&e.filter(e=>e!==Xa).length>0&&L(`<Suspense> slots expect a single root node.`),e=t}return e=tl(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter(t=>t!==e)),e}function jc(e,t){t&&t.pendingBranch?S(e)?t.effects.push(...e):t.effects.push(e):jr(e)}function Mc(e,t){e.activeBranch=t;let{vnode:n,parentComponent:r}=e,i=t.el;for(;!i&&t.component;)t=t.component.subTree,i=t.el;n.el=i,r&&r.subTree===n&&(r.vnode.el=i,vc(r,i))}function Nc(e){let t=e.props&&e.props.suspensible;return t!=null&&t!==!1}const B=Symbol.for(`v-fgt`),Pc=Symbol.for(`v-txt`),V=Symbol.for(`v-cmt`),Fc=Symbol.for(`v-stc`),Ic=[];let Lc=null;function H(e=!1){Ic.push(Lc=e?null:[])}function Rc(){Ic.pop(),Lc=Ic[Ic.length-1]||null}let zc=1;function Bc(e,t=!1){zc+=e,e<0&&Lc&&t&&(Lc.hasOnce=!0)}function Vc(e){return e.dynamicChildren=zc>0?Lc||p:null,Rc(),zc>0&&Lc&&Lc.push(e),e}function U(e,t,n,r,i,a){return Vc(G(e,t,n,r,i,a,!0))}function W(e,t,n,r,i){return Vc(K(e,t,n,r,i,!0))}function Hc(e){return e?e.__v_isVNode===!0:!1}function Uc(e,t){if(process.env.NODE_ENV!==`production`&&t.shapeFlag&6&&e.component){let n=Rr.get(t.type);if(n&&n.has(e.component))return e.shapeFlag&=-257,t.shapeFlag&=-513,!1}return e.type===t.type&&e.key===t.key}let Wc;function Gc(e){Wc=e}const Kc=(...e)=>Yc(...Wc?Wc(e,ui):e),qc=({key:e})=>e??null,Jc=({ref:e,ref_key:t,ref_for:n})=>(typeof e==`number`&&(e=``+e),e==null?null:E(e)||P(e)||T(e)?{i:ui,r:e,k:t,f:!!n}:e);function G(e,t=null,n=null,r=0,i=null,a=e===B?0:1,o=!1,s=!1){let c={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&qc(t),ref:t&&Jc(t),scopeId:di,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetStart:null,targetAnchor:null,staticCount:0,shapeFlag:a,patchFlag:r,dynamicProps:i,dynamicChildren:null,appContext:null,ctx:ui};return s?(rl(c,n),a&128&&e.normalize(c)):n&&(c.shapeFlag|=E(n)?8:16),process.env.NODE_ENV!==`production`&&c.key!==c.key&&L(`VNode created with invalid key (NaN). VNode type:`,c.type),zc>0&&!o&&Lc&&(c.patchFlag>0||a&6)&&c.patchFlag!==32&&Lc.push(c),c}const K=process.env.NODE_ENV===`production`?Yc:Kc;function Yc(e,t=null,n=null,r=0,i=null,a=!1){if((!e||e===Xa)&&(process.env.NODE_ENV!==`production`&&!e&&L(`Invalid vnode type when creating vnode: ${e}.`),e=V),Hc(e)){let r=Zc(e,t,!0);return n&&rl(r,n),zc>0&&!a&&Lc&&(r.shapeFlag&6?Lc[Lc.indexOf(e)]=r:Lc.push(r)),r.patchFlag=-2,r}if(Fl(e)&&(e=e.__vccOpts),t){t=Xc(t);let{class:e,style:n}=t;e&&!E(e)&&(t.class=j(e)),D(n)&&(On(n)&&!S(n)&&(n=v({},n)),t.style=we(n))}let o=E(e)?1:yc(e)?128:bi(e)?64:D(e)?4:T(e)?2:0;return process.env.NODE_ENV!==`production`&&o&4&&On(e)&&(e=N(e),L("Vue received a Component that was made a reactive object. This can lead to unnecessary performance overhead and should be avoided by marking the component with `markRaw` or using `shallowRef` instead of `ref`.",`
Component that was made reactive: `,e)),G(e,t,n,r,i,o,a,!0)}function Xc(e){return e?On(e)||rs(e)?v({},e):e:null}function Zc(e,t,n=!1,r=!1){let{props:i,ref:a,patchFlag:o,children:s,transition:c}=e,l=t?il(i||{},t):i,u={__v_isVNode:!0,__v_skip:!0,type:e.type,props:l,key:l&&qc(l),ref:t&&t.ref?n&&a?S(a)?a.concat(Jc(t)):[a,Jc(t)]:Jc(t):a,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:process.env.NODE_ENV!==`production`&&o===-1&&S(s)?s.map(Qc):s,target:e.target,targetStart:e.targetStart,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==B?o===-1?16:o|16:o,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:c,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Zc(e.ssContent),ssFallback:e.ssFallback&&Zc(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce};return c&&r&&Gi(u,c.clone(u)),u}function Qc(e){let t=Zc(e);return S(e.children)&&(t.children=e.children.map(Qc)),t}function q(e=` `,t=0){return K(Pc,null,e,t)}function $c(e,t){let n=K(Fc,null,e);return n.staticCount=t,n}function el(e=``,t=!1){return t?(H(),W(V,null,e)):K(V,null,e)}function tl(e){return e==null||typeof e==`boolean`?K(V):S(e)?K(B,null,e.slice()):Hc(e)?nl(e):K(Pc,null,String(e))}function nl(e){return e.el===null&&e.patchFlag!==-1||e.memo?e:Zc(e)}function rl(e,t){let n=0,{shapeFlag:r}=e;if(t==null)t=null;else if(S(t))n=16;else if(typeof t==`object`)if(r&65){let n=t.default;n&&(n._c&&(n._d=!1),rl(e,n()),n._c&&(n._d=!0));return}else{n=32;let r=t._;!r&&!rs(t)?t._ctx=ui:r===3&&ui&&(ui.slots._===1?t._=1:(t._=2,e.patchFlag|=1024))}else T(t)?(t={default:t,_ctx:ui},n=32):(t=String(t),r&64?(n=16,t=[q(t)]):n=8);e.children=t,e.shapeFlag|=n}function il(...e){let t={};for(let n=0;n<e.length;n++){let r=e[n];for(let e in r)if(e===`class`)t.class!==r.class&&(t.class=j([t.class,r.class]));else if(e===`style`)t.style=we([t.style,r.style]);else if(g(e)){let n=t[e],i=r[e];i&&n!==i&&!(S(n)&&n.includes(i))&&(t[e]=n?[].concat(n,i):i)}else e!==``&&(t[e]=r[e])}return t}function al(e,t,n,r=null){gr(e,t,7,[n,r])}const ol=Jo();let sl=0;function cl(e,t,n){let r=e.type,i=(t?t.appContext:e.appContext)||ol,a={uid:sl++,vnode:e,type:r,parent:t,appContext:i,root:null,next:null,subTree:null,effect:null,update:null,job:null,scope:new tt(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(i.provides),ids:t?t.ids:[``,0,0],accessCache:null,renderCache:[],components:null,directives:null,propsOptions:fs(r,i),emitsOptions:oc(r,i),emit:null,emitted:null,propsDefaults:f,inheritAttrs:r.inheritAttrs,ctx:f,data:f,props:f,attrs:f,slots:f,refs:f,setupState:f,setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return process.env.NODE_ENV===`production`?a.ctx={_:a}:a.ctx=po(a),a.root=t?t.root:a,a.emit=ac.bind(null,a),e.ce&&e.ce(a),a}let ll=null;const ul=()=>ll||ui;let dl,fl;{let e=xe(),t=(t,n)=>{let r;return(r=e[t])||(r=e[t]=[]),r.push(n),e=>{r.length>1?r.forEach(t=>t(e)):r[0](e)}};dl=t(`__VUE_INSTANCE_SETTERS__`,e=>ll=e),fl=t(`__VUE_SSR_SETTERS__`,e=>vl=e)}const pl=e=>{let t=ll;return dl(e),e.scope.on(),()=>{e.scope.off(),dl(t)}},ml=()=>{ll&&ll.scope.off(),dl(null)},hl=d(`slot,component`);function gl(e,{isNativeTag:t}){(hl(e)||t(e))&&L(`Do not use built-in or reserved HTML elements as component id: `+e)}function _l(e){return e.vnode.shapeFlag&4}let vl=!1;function yl(e,t=!1,n=!1){t&&fl(t);let{props:r,children:i}=e.vnode,a=_l(e);os(e,r,a,t),ks(e,i,n||t);let o=a?bl(e,t):void 0;return t&&fl(!1),o}function bl(e,t){var n;let r=e.type;if(process.env.NODE_ENV!==`production`){if(r.name&&gl(r.name,e.appContext.config),r.components){let t=Object.keys(r.components);for(let n=0;n<t.length;n++)gl(t[n],e.appContext.config)}if(r.directives){let e=Object.keys(r.directives);for(let t=0;t<e.length;t++)gi(e[t])}r.compilerOptions&&Tl()&&L(`"compilerOptions" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.`)}e.accessCache=Object.create(null),e.proxy=new Proxy(e.ctx,uo),process.env.NODE_ENV!==`production`&&mo(e);let{setup:i}=r;if(i){Ct();let a=e.setupContext=i.length>1?kl(e):null,o=pl(e),s=hr(i,e,0,[process.env.NODE_ENV===`production`?e.props:Cn(e.props),a]),c=re(s);if(wt(),o(),(c||e.sp)&&!Sa(e)&&Ji(e),c){if(s.then(ml,ml),t)return s.then(n=>{xl(e,n,t)}).catch(t=>{_r(t,e,0)});if(e.asyncDep=s,process.env.NODE_ENV!==`production`&&!e.suspense){let e=(n=r.name)??`Anonymous`;L(`Component <${e}>: setup function returned a promise, but no <Suspense> boundary was found in the parent component tree. A component with async setup() must be nested in a <Suspense> in order to be rendered.`)}}else xl(e,s,t)}else El(e,t)}function xl(e,t,n){T(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:D(t)?(process.env.NODE_ENV!==`production`&&Hc(t)&&L(`setup() should not return VNodes directly - return a render function instead.`),process.env.NODE_ENV!==`production`&&(e.devtoolsRawSetupState=t),e.setupState=Rn(t),process.env.NODE_ENV!==`production`&&ho(e)):process.env.NODE_ENV!==`production`&&t!==void 0&&L(`setup() should return an object. Received: ${t===null?`null`:typeof t}`),El(e,n)}let Sl,Cl;function wl(e){Sl=e,Cl=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,fo))}}const Tl=()=>!Sl;function El(e,t,n){let r=e.type;if(!e.render){if(!t&&Sl&&!r.render){let t=r.template||Ro(e).template;if(t){process.env.NODE_ENV!==`production`&&Ns(e,`compile`);let{isCustomElement:n,compilerOptions:i}=e.appContext.config,{delimiters:a,compilerOptions:o}=r,s=v(v({isCustomElement:n,delimiters:a},i),o);r.render=Sl(t,s),process.env.NODE_ENV!==`production`&&Ps(e,`compile`)}}e.render=r.render||m,Cl&&Cl(e)}{let t=pl(e);Ct();try{Po(e)}finally{wt(),t()}}process.env.NODE_ENV!==`production`&&!r.render&&e.render===m&&!t&&(!Sl&&r.template?L(`Component provided template option but runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`):L(`Component is missing template or render function: `,r))}const Dl=process.env.NODE_ENV===`production`?{get(e,t){return Pt(e,`get`,``),e[t]}}:{get(e,t){return lc(),Pt(e,`get`,``),e[t]},set(){return L(`setupContext.attrs is readonly.`),!1},deleteProperty(){return L(`setupContext.attrs is readonly.`),!1}};function Ol(e){return new Proxy(e.slots,{get(t,n){return Pt(e,`get`,`$slots`),t[n]}})}function kl(e){let t=t=>{if(process.env.NODE_ENV!==`production`&&(e.exposed&&L(`expose() should be called only once per setup().`),t!=null)){let e=typeof t;e===`object`&&(S(t)?e=`array`:P(t)&&(e=`ref`)),e!==`object`&&L(`expose() should be passed a plain object, received ${e}.`)}e.exposed=t||{}};if(process.env.NODE_ENV!==`production`){let n,r;return Object.freeze({get attrs(){return n||=new Proxy(e.attrs,Dl)},get slots(){return r||=Ol(e)},get emit(){return(t,...n)=>e.emit(t,...n)},expose:t})}else return{attrs:new Proxy(e.attrs,Dl),slots:e.slots,emit:e.emit,expose:t}}function Al(e){return e.exposed?e.exposeProxy||=new Proxy(Rn(kn(e.exposed)),{get(t,n){if(n in t)return t[n];if(n in so)return so[n](e)},has(e,t){return t in e||t in so}}):e.proxy}const jl=/(?:^|[-_])(\w)/g,Ml=e=>e.replace(jl,e=>e.toUpperCase()).replace(/[-_]/g,``);function Nl(e,t=!0){return T(e)?e.displayName||e.name:e.name||t&&e.__name}function Pl(e,t,n=!1){let r=Nl(t);if(!r&&t.__file){let e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(r=e[1])}if(!r&&e&&e.parent){let n=e=>{for(let n in e)if(e[n]===t)return n};r=n(e.components||e.parent.type.components)||n(e.appContext.components)}return r?Ml(r):n?`App`:`Anonymous`}function Fl(e){return T(e)&&`__vccOpts`in e}const J=(e,t)=>{let n=qn(e,t,vl);if(process.env.NODE_ENV!==`production`){let e=ul();e&&e.appContext.config.warnRecursiveComputed&&(n._warnRecursive=!0)}return n};function Il(e,t,n){let r=arguments.length;return r===2?D(t)&&!S(t)?Hc(t)?K(e,null,[t]):K(e,t):K(e,null,t):(r>3?n=Array.prototype.slice.call(arguments,2):r===3&&Hc(n)&&(n=[n]),K(e,t,n))}function Ll(){if(process.env.NODE_ENV===`production`||typeof window>`u`)return;let e={style:`color:#3ba776`},t={style:`color:#1677ff`},n={style:`color:#f5222d`},r={style:`color:#eb2f96`},i={__vue_custom_formatter:!0,header(t){if(!D(t))return null;if(t.__isVue)return[`div`,e,`VueInstance`];if(P(t)){Ct();let n=t.value;return wt(),[`div`,{},[`span`,e,u(t)],`<`,s(n),`>`]}else if(Tn(t))return[`div`,{},[`span`,e,Dn(t)?`ShallowReactive`:`Reactive`],`<`,s(t),`>${En(t)?` (readonly)`:``}`];else if(En(t))return[`div`,{},[`span`,e,Dn(t)?`ShallowReadonly`:`Readonly`],`<`,s(t),`>`];return null},hasBody(e){return e&&e.__isVue},body(e){if(e&&e.__isVue)return[`div`,{},...a(e.$)]}};function a(e){let t=[];e.type.props&&e.props&&t.push(o(`props`,N(e.props))),e.setupState!==f&&t.push(o(`setup`,e.setupState)),e.data!==f&&t.push(o(`data`,N(e.data)));let n=c(e,`computed`);n&&t.push(o(`computed`,n));let i=c(e,`inject`);return i&&t.push(o(`injected`,i)),t.push([`div`,{},[`span`,{style:r.style+`;opacity:0.66`},`$ (internal): `],[`object`,{object:e}]]),t}function o(e,t){return t=v({},t),Object.keys(t).length?[`div`,{style:`line-height:1.25em;margin-bottom:0.6em`},[`div`,{style:`color:#476582`},e],[`div`,{style:`padding-left:1.25em`},...Object.keys(t).map(e=>[`div`,{},[`span`,r,e+`: `],s(t[e],!1)])]]:[`span`,{}]}function s(e,i=!0){return typeof e==`number`?[`span`,t,e]:typeof e==`string`?[`span`,n,JSON.stringify(e)]:typeof e==`boolean`?[`span`,r,e]:D(e)?[`object`,{object:i?N(e):e}]:[`span`,n,String(e)]}function c(e,t){let n=e.type;if(T(n))return;let r={};for(let i in e.ctx)l(n,i,t)&&(r[i]=e.ctx[i]);return r}function l(e,t,n){let r=e[n];if(S(r)&&r.includes(t)||D(r)&&t in r||e.extends&&l(e.extends,t,n)||e.mixins&&e.mixins.some(e=>l(e,t,n)))return!0}function u(e){return Dn(e)?`ShallowRef`:e.effect?`ComputedRef`:`Ref`}window.devtoolsFormatters?window.devtoolsFormatters.push(i):window.devtoolsFormatters=[i]}function Rl(e,t,n,r){let i=n[r];if(i&&zl(i,e))return i;let a=t();return a.memo=e.slice(),a.cacheIndex=r,n[r]=a}function zl(e,t){let n=e.memo;if(n.length!=t.length)return!1;for(let e=0;e<n.length;e++)if(he(n[e],t[e]))return!1;return zc>0&&Lc&&Lc.push(e),!0}const Bl=`3.5.17`,Vl=process.env.NODE_ENV===`production`?m:L,Hl=mr,Ul=(process.env.NODE_ENV,Jr),Wl=(process.env.NODE_ENV,Qr),Gl={createComponentInstance:cl,setupComponent:yl,renderComponentRoot:uc,setCurrentRenderingInstance:fi,isVNode:Hc,normalizeVNode:tl,getComponentPublicInstance:Al,ensureValidVNode:io,pushWarningContext:ir,popWarningContext:ar},Kl=Gl,ql=null,Jl=null,Yl=null;let Xl;const Zl=typeof window<`u`&&window.trustedTypes;if(Zl)try{Xl=Zl.createPolicy(`vue`,{createHTML:e=>e})}catch(e){process.env.NODE_ENV!==`production`&&Vl(`Error creating trusted types policy: ${e}`)}const Ql=Xl?e=>Xl.createHTML(e):e=>e,$l=`http://www.w3.org/2000/svg`,eu=`http://www.w3.org/1998/Math/MathML`,tu=typeof document<`u`?document:null,nu=tu&&tu.createElement(`template`),ru={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{let t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,r)=>{let i=t===`svg`?tu.createElementNS($l,e):t===`mathml`?tu.createElementNS(eu,e):n?tu.createElement(e,{is:n}):tu.createElement(e);return e===`select`&&r&&r.multiple!=null&&i.setAttribute(`multiple`,r.multiple),i},createText:e=>tu.createTextNode(e),createComment:e=>tu.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>tu.querySelector(e),setScopeId(e,t){e.setAttribute(t,``)},insertStaticContent(e,t,n,r,i,a){let o=n?n.previousSibling:t.lastChild;if(i&&(i===a||i.nextSibling))for(;t.insertBefore(i.cloneNode(!0),n),!(i===a||!(i=i.nextSibling)););else{nu.innerHTML=Ql(r===`svg`?`<svg>${e}</svg>`:r===`mathml`?`<math>${e}</math>`:e);let i=nu.content;if(r===`svg`||r===`mathml`){let e=i.firstChild;for(;e.firstChild;)i.appendChild(e.firstChild);i.removeChild(e)}t.insertBefore(i,n)}return[o?o.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}},iu=`transition`,au=`animation`,ou=Symbol(`_vtc`),su={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},cu=v({},Ii,su),lu=e=>(e.displayName=`Transition`,e.props=cu,e),uu=lu((e,{slots:t})=>Il(Bi,pu(e),t)),du=(e,t=[])=>{S(e)?e.forEach(e=>e(...t)):e&&e(...t)},fu=e=>e?S(e)?e.some(e=>e.length>1):e.length>1:!1;function pu(e){let t={};for(let n in e)n in su||(t[n]=e[n]);if(e.css===!1)return t;let{name:n=`v`,type:r,duration:i,enterFromClass:a=`${n}-enter-from`,enterActiveClass:o=`${n}-enter-active`,enterToClass:s=`${n}-enter-to`,appearFromClass:c=a,appearActiveClass:l=o,appearToClass:u=s,leaveFromClass:d=`${n}-leave-from`,leaveActiveClass:f=`${n}-leave-active`,leaveToClass:p=`${n}-leave-to`}=e,m=mu(i),h=m&&m[0],g=m&&m[1],{onBeforeEnter:_,onEnter:y,onEnterCancelled:b,onLeave:x,onLeaveCancelled:S,onBeforeAppear:C=_,onAppear:w=y,onAppearCancelled:ee=b}=t,te=(e,t,n,r)=>{e._enterCancelled=r,_u(e,t?u:s),_u(e,t?l:o),n&&n()},T=(e,t)=>{e._isLeaving=!1,_u(e,d),_u(e,p),_u(e,f),t&&t()},E=e=>(t,n)=>{let i=e?w:y,o=()=>te(t,e,n);du(i,[t,o]),vu(()=>{_u(t,e?c:a),gu(t,e?u:s),fu(i)||bu(t,r,h,o)})};return v(t,{onBeforeEnter(e){du(_,[e]),gu(e,a),gu(e,o)},onBeforeAppear(e){du(C,[e]),gu(e,c),gu(e,l)},onEnter:E(!1),onAppear:E(!0),onLeave(e,t){e._isLeaving=!0;let n=()=>T(e,t);gu(e,d),e._enterCancelled?(gu(e,f),wu()):(wu(),gu(e,f)),vu(()=>{e._isLeaving&&(_u(e,d),gu(e,p),fu(x)||bu(e,r,g,n))}),du(x,[e,n])},onEnterCancelled(e){te(e,!1,void 0,!0),du(b,[e])},onAppearCancelled(e){te(e,!0,void 0,!0),du(ee,[e])},onLeaveCancelled(e){T(e),du(S,[e])}})}function mu(e){if(e==null)return null;if(D(e))return[hu(e.enter),hu(e.leave)];{let t=hu(e);return[t,t]}}function hu(e){let t=ye(e);return process.env.NODE_ENV!==`production`&&fr(t,`<transition> explicit duration`),t}function gu(e,t){t.split(/\s+/).forEach(t=>t&&e.classList.add(t)),(e[ou]||(e[ou]=new Set)).add(t)}function _u(e,t){t.split(/\s+/).forEach(t=>t&&e.classList.remove(t));let n=e[ou];n&&(n.delete(t),n.size||(e[ou]=void 0))}function vu(e){requestAnimationFrame(()=>{requestAnimationFrame(e)})}let yu=0;function bu(e,t,n,r){let i=e._endId=++yu,a=()=>{i===e._endId&&r()};if(n!=null)return setTimeout(a,n);let{type:o,timeout:s,propCount:c}=xu(e,t);if(!o)return r();let l=o+`end`,u=0,d=()=>{e.removeEventListener(l,f),a()},f=t=>{t.target===e&&++u>=c&&d()};setTimeout(()=>{u<c&&d()},s+1),e.addEventListener(l,f)}function xu(e,t){let n=window.getComputedStyle(e),r=e=>(n[e]||``).split(`, `),i=r(`${iu}Delay`),a=r(`${iu}Duration`),o=Su(i,a),s=r(`${au}Delay`),c=r(`${au}Duration`),l=Su(s,c),u=null,d=0,f=0;t===iu?o>0&&(u=iu,d=o,f=a.length):t===au?l>0&&(u=au,d=l,f=c.length):(d=Math.max(o,l),u=d>0?o>l?iu:au:null,f=u?u===iu?a.length:c.length:0);let p=u===iu&&/\b(transform|all)(,|$)/.test(r(`${iu}Property`).toString());return{type:u,timeout:d,propCount:f,hasTransform:p}}function Su(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map((t,n)=>Cu(t)+Cu(e[n])))}function Cu(e){return e===`auto`?0:Number(e.slice(0,-1).replace(`,`,`.`))*1e3}function wu(){return document.body.offsetHeight}function Tu(e,t,n){let r=e[ou];r&&(t=(t?[t,...r]:[...r]).join(` `)),t==null?e.removeAttribute(`class`):n?e.setAttribute(`class`,t):e.className=t}const Eu=Symbol(`_vod`),Du=Symbol(`_vsh`),Ou={beforeMount(e,{value:t},{transition:n}){e[Eu]=e.style.display===`none`?``:e.style.display,n&&t?n.beforeEnter(e):ku(e,t)},mounted(e,{value:t},{transition:n}){n&&t&&n.enter(e)},updated(e,{value:t,oldValue:n},{transition:r}){!t!=!n&&(r?t?(r.beforeEnter(e),ku(e,!0),r.enter(e)):r.leave(e,()=>{ku(e,!1)}):ku(e,t))},beforeUnmount(e,{value:t}){ku(e,t)}};process.env.NODE_ENV!==`production`&&(Ou.name=`show`);function ku(e,t){e.style.display=t?e[Eu]:`none`,e[Du]=!t}function Au(){Ou.getSSRProps=({value:e})=>{if(!e)return{style:{display:`none`}}}}const ju=Symbol(process.env.NODE_ENV===`production`?``:`CSS_VAR_TEXT`);function Mu(e){let t=ul();if(!t){process.env.NODE_ENV!==`production`&&Vl(`useCssVars is called without current active component instance.`);return}let n=t.ut=(n=e(t.proxy))=>{Array.from(document.querySelectorAll(`[data-v-owner="${t.uid}"]`)).forEach(e=>Pu(e,n))};process.env.NODE_ENV!==`production`&&(t.getCssVars=()=>e(t.proxy));let r=()=>{let r=e(t.proxy);t.ce?Pu(t.ce,r):Nu(t.subTree,r),n(r)};za(()=>{jr(r)}),Ra(()=>{$s(r,m,{flush:`post`});let e=new MutationObserver(r);e.observe(t.subTree.el.parentNode,{childList:!0}),Ha(()=>e.disconnect())})}function Nu(e,t){if(e.shapeFlag&128){let n=e.suspense;e=n.activeBranch,n.pendingBranch&&!n.isHydrating&&n.effects.push(()=>{Nu(n.activeBranch,t)})}for(;e.component;)e=e.component.subTree;if(e.shapeFlag&1&&e.el)Pu(e.el,t);else if(e.type===B)e.children.forEach(e=>Nu(e,t));else if(e.type===Fc){let{el:n,anchor:r}=e;for(;n&&(Pu(n,t),n!==r);)n=n.nextSibling}}function Pu(e,t){if(e.nodeType===1){let n=e.style,r=``;for(let e in t)n.setProperty(`--${e}`,t[e]),r+=`--${e}: ${t[e]};`;n[ju]=r}}const Fu=/(^|;)\s*display\s*:/;function Iu(e,t,n){let r=e.style,i=E(n),a=!1;if(n&&!i){if(t)if(E(t))for(let e of t.split(`;`)){let t=e.slice(0,e.indexOf(`:`)).trim();n[t]??zu(r,t,``)}else for(let e in t)n[e]??zu(r,e,``);for(let e in n)e===`display`&&(a=!0),zu(r,e,n[e])}else if(i){if(t!==n){let e=r[ju];e&&(n+=`;`+e),r.cssText=n,a=Fu.test(n)}}else t&&e.removeAttribute(`style`);Eu in e&&(e[Eu]=a?r.display:``,e[Du]&&(r.display=`none`))}const Lu=/[^\\];\s*$/,Ru=/\s*!important$/;function zu(e,t,n){if(S(n))n.forEach(n=>zu(e,t,n));else if(n??=``,process.env.NODE_ENV!==`production`&&Lu.test(n)&&Vl(`Unexpected semicolon at the end of '${t}' style value: '${n}'`),t.startsWith(`--`))e.setProperty(t,n);else{let r=Hu(e,t);Ru.test(n)?e.setProperty(A(r),n.replace(Ru,``),`important`):e[r]=n}}const Bu=[`Webkit`,`Moz`,`ms`],Vu={};function Hu(e,t){let n=Vu[t];if(n)return n;let r=k(t);if(r!==`filter`&&r in e)return Vu[t]=r;r=pe(r);for(let n=0;n<Bu.length;n++){let i=Bu[n]+r;if(i in e)return Vu[t]=i}return t}const Uu=`http://www.w3.org/1999/xlink`;function Wu(e,t,n,r,i,a=Re(t)){r&&t.startsWith(`xlink:`)?n==null?e.removeAttributeNS(Uu,t.slice(6,t.length)):e.setAttributeNS(Uu,t,n):n==null||a&&!Be(n)?e.removeAttribute(t):e.setAttribute(t,a?``:ne(n)?String(n):n)}function Gu(e,t,n,r,i){if(t===`innerHTML`||t===`textContent`){n!=null&&(e[t]=t===`innerHTML`?Ql(n):n);return}let a=e.tagName;if(t===`value`&&a!==`PROGRESS`&&!a.includes(`-`)){let r=a===`OPTION`?e.getAttribute(`value`)||``:e.value,i=n==null?e.type===`checkbox`?`on`:``:String(n);(r!==i||!(`_value`in e))&&(e.value=i),n??e.removeAttribute(t),e._value=n;return}let o=!1;if(n===``||n==null){let r=typeof e[t];r===`boolean`?n=Be(n):n==null&&r===`string`?(n=``,o=!0):r===`number`&&(n=0,o=!0)}try{e[t]=n}catch(e){process.env.NODE_ENV!==`production`&&!o&&Vl(`Failed setting prop "${t}" on <${a.toLowerCase()}>: value ${n} is invalid.`,e)}o&&e.removeAttribute(i||t)}function Ku(e,t,n,r){e.addEventListener(t,n,r)}function qu(e,t,n,r){e.removeEventListener(t,n,r)}const Ju=Symbol(`_vei`);function Yu(e,t,n,r,i=null){let a=e[Ju]||(e[Ju]={}),o=a[t];if(r&&o)o.value=process.env.NODE_ENV===`production`?r:nd(r,t);else{let[n,s]=Zu(t);if(r){let o=a[t]=td(process.env.NODE_ENV===`production`?r:nd(r,t),i);Ku(e,n,o,s)}else o&&(qu(e,n,o,s),a[t]=void 0)}}const Xu=/(?:Once|Passive|Capture)$/;function Zu(e){let t;if(Xu.test(e)){t={};let n;for(;n=e.match(Xu);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}let n=e[2]===`:`?e.slice(3):A(e.slice(2));return[n,t]}let Qu=0;const $u=Promise.resolve(),ed=()=>Qu||($u.then(()=>Qu=0),Qu=Date.now());function td(e,t){let n=e=>{if(!e._vts)e._vts=Date.now();else if(e._vts<=n.attached)return;gr(rd(e,n.value),t,5,[e])};return n.value=e,n.attached=ed(),n}function nd(e,t){return T(e)||S(e)?e:(Vl(`Wrong type passed as event handler to ${t} - did you forget @ or : in front of your prop?
Expected function or array of functions, received type ${typeof e}.`),m)}function rd(e,t){if(S(t)){let n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map(e=>t=>!t._stopped&&e&&e(t))}else return t}const id=e=>e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&e.charCodeAt(2)>96&&e.charCodeAt(2)<123,ad=(e,t,n,r,i,a)=>{let o=i===`svg`;t===`class`?Tu(e,r,o):t===`style`?Iu(e,n,r):g(t)?_(t)||Yu(e,t,n,r,a):(t[0]===`.`?(t=t.slice(1),!0):t[0]===`^`?(t=t.slice(1),!1):od(e,t,r,o))?(Gu(e,t,r),!e.tagName.includes(`-`)&&(t===`value`||t===`checked`||t===`selected`)&&Wu(e,t,r,o,a,t!==`value`)):e._isVueCE&&(/[A-Z]/.test(t)||!E(r))?Gu(e,k(t),r,a,t):(t===`true-value`?e._trueValue=r:t===`false-value`&&(e._falseValue=r),Wu(e,t,r,o))};function od(e,t,n,r){if(r)return!!(t===`innerHTML`||t===`textContent`||t in e&&id(t)&&T(n));if(t===`spellcheck`||t===`draggable`||t===`translate`||t===`autocorrect`||t===`form`||t===`list`&&e.tagName===`INPUT`||t===`type`&&e.tagName===`TEXTAREA`)return!1;if(t===`width`||t===`height`){let t=e.tagName;if(t===`IMG`||t===`VIDEO`||t===`CANVAS`||t===`SOURCE`)return!1}return id(t)&&E(n)?!1:t in e}const sd={};
/*! #__NO_SIDE_EFFECTS__ */
function cd(e,t,n){let r=z(e,t);oe(r)&&v(r,t);class i extends dd{constructor(e){super(r,e,n)}}return i.def=r,i}
/*! #__NO_SIDE_EFFECTS__ */
const ld=(e,t)=>cd(e,t,tf),ud=typeof HTMLElement<`u`?HTMLElement:class{};var dd=class e extends ud{constructor(e,t={},n=ef){super(),this._def=e,this._props=t,this._createApp=n,this._isVueCE=!0,this._instance=null,this._app=null,this._nonce=this._def.nonce,this._connected=!1,this._resolved=!1,this._numberProps=null,this._styleChildren=new WeakSet,this._ob=null,this.shadowRoot&&n!==ef?this._root=this.shadowRoot:(process.env.NODE_ENV!==`production`&&this.shadowRoot&&Vl("Custom element has pre-rendered declarative shadow root but is not defined as hydratable. Use `defineSSRCustomElement`."),e.shadowRoot===!1?this._root=this:(this.attachShadow({mode:`open`}),this._root=this.shadowRoot))}connectedCallback(){if(!this.isConnected)return;!this.shadowRoot&&!this._resolved&&this._parseSlots(),this._connected=!0;let t=this;for(;t&&=t.parentNode||t.host;)if(t instanceof e){this._parent=t;break}this._instance||(this._resolved?this._mount(this._def):t&&t._pendingResolve?this._pendingResolve=t._pendingResolve.then(()=>{this._pendingResolve=void 0,this._resolveDef()}):this._resolveDef())}_setParent(e=this._parent){e&&(this._instance.parent=e._instance,this._inheritParentContext(e))}_inheritParentContext(e=this._parent){e&&this._app&&Object.setPrototypeOf(this._app._context.provides,e._instance.provides)}disconnectedCallback(){this._connected=!1,Dr(()=>{this._connected||(this._ob&&(this._ob.disconnect(),this._ob=null),this._app&&this._app.unmount(),this._instance&&(this._instance.ce=void 0),this._app=this._instance=null)})}_resolveDef(){if(this._pendingResolve)return;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);this._ob=new MutationObserver(e=>{for(let t of e)this._setAttr(t.attributeName)}),this._ob.observe(this,{attributes:!0});let e=(e,t=!1)=>{this._resolved=!0,this._pendingResolve=void 0;let{props:n,styles:r}=e,i;if(n&&!S(n))for(let e in n){let t=n[e];(t===Number||t&&t.type===Number)&&(e in this._props&&(this._props[e]=ye(this._props[e])),(i||=Object.create(null))[k(e)]=!0)}this._numberProps=i,this._resolveProps(e),this.shadowRoot?this._applyStyles(r):process.env.NODE_ENV!==`production`&&r&&Vl(`Custom element style injection is not supported when using shadowRoot: false`),this._mount(e)},t=this._def.__asyncLoader;t?this._pendingResolve=t().then(t=>{t.configureApp=this._def.configureApp,e(this._def=t,!0)}):e(this._def)}_mount(e){process.env.NODE_ENV!==`production`&&!e.name&&(e.name=`VueElement`),this._app=this._createApp(e),this._inheritParentContext(),e.configureApp&&e.configureApp(this._app),this._app._ceVNode=this._createVNode(),this._app.mount(this._root);let t=this._instance&&this._instance.exposed;if(t)for(let e in t)x(this,e)?process.env.NODE_ENV!==`production`&&Vl(`Exposed property "${e}" already exists on custom element.`):Object.defineProperty(this,e,{get:()=>I(t[e])})}_resolveProps(e){let{props:t}=e,n=S(t)?t:Object.keys(t||{});for(let e of Object.keys(this))e[0]!==`_`&&n.includes(e)&&this._setProp(e,this[e]);for(let e of n.map(k))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t,!0,!0)}})}_setAttr(e){if(e.startsWith(`data-v-`))return;let t=this.hasAttribute(e),n=t?this.getAttribute(e):sd,r=k(e);t&&this._numberProps&&this._numberProps[r]&&(n=ye(n)),this._setProp(r,n,!1,!0)}_getProp(e){return this._props[e]}_setProp(e,t,n=!0,r=!1){if(t!==this._props[e]&&(t===sd?delete this._props[e]:(this._props[e]=t,e===`key`&&this._app&&(this._app._ceVNode.key=t)),r&&this._instance&&this._update(),n)){let n=this._ob;n&&n.disconnect(),t===!0?this.setAttribute(A(e),``):typeof t==`string`||typeof t==`number`?this.setAttribute(A(e),t+``):t||this.removeAttribute(A(e)),n&&n.observe(this,{attributes:!0})}}_update(){let e=this._createVNode();this._app&&(e.appContext=this._app._context),Qd(e,this._root)}_createVNode(){let e={};this.shadowRoot||(e.onVnodeMounted=e.onVnodeUpdated=this._renderSlots.bind(this));let t=K(this._def,v(e,this._props));return this._instance||(t.ce=e=>{this._instance=e,e.ce=this,e.isCE=!0,process.env.NODE_ENV!==`production`&&(e.ceReload=e=>{this._styles&&(this._styles.forEach(e=>this._root.removeChild(e)),this._styles.length=0),this._applyStyles(e),this._instance=null,this._update()});let t=(e,t)=>{this.dispatchEvent(new CustomEvent(e,oe(t[0])?v({detail:t},t[0]):{detail:t}))};e.emit=(e,...n)=>{t(e,n),A(e)!==e&&t(A(e),n)},this._setParent()}),t}_applyStyles(e,t){if(!e)return;if(t){if(t===this._def||this._styleChildren.has(t))return;this._styleChildren.add(t)}let n=this._nonce;for(let r=e.length-1;r>=0;r--){let i=document.createElement(`style`);if(n&&i.setAttribute(`nonce`,n),i.textContent=e[r],this.shadowRoot.prepend(i),process.env.NODE_ENV!==`production`)if(t){if(t.__hmrId){this._childStyles||=new Map;let e=this._childStyles.get(t.__hmrId);e||this._childStyles.set(t.__hmrId,e=[]),e.push(i)}}else (this._styles||=[]).push(i)}}_parseSlots(){let e=this._slots={},t;for(;t=this.firstChild;){let n=t.nodeType===1&&t.getAttribute(`slot`)||`default`;(e[n]||(e[n]=[])).push(t),this.removeChild(t)}}_renderSlots(){let e=(this._teleportTarget||this).querySelectorAll(`slot`),t=this._instance.type.__scopeId;for(let n=0;n<e.length;n++){let r=e[n],i=r.getAttribute(`name`)||`default`,a=this._slots[i],o=r.parentNode;if(a)for(let e of a){if(t&&e.nodeType===1){let n=t+`-s`,r=document.createTreeWalker(e,1);e.setAttribute(n,``);let i;for(;i=r.nextNode();)i.setAttribute(n,``)}o.insertBefore(e,r)}else for(;r.firstChild;)o.insertBefore(r.firstChild,r);o.removeChild(r)}}_injectChildStyle(e){this._applyStyles(e.styles,e)}_removeChildStyle(e){if(process.env.NODE_ENV!==`production`&&(this._styleChildren.delete(e),this._childStyles&&e.__hmrId)){let t=this._childStyles.get(e.__hmrId);t&&(t.forEach(e=>this._root.removeChild(e)),t.length=0)}}};function fd(e){let t=ul(),n=t&&t.ce;return n||(process.env.NODE_ENV!==`production`&&Vl(t?`${e||`useHost`} can only be used in components defined via defineCustomElement.`:`${e||`useHost`} called without an active component instance.`),null)}function pd(){let e=process.env.NODE_ENV===`production`?fd():fd(`useShadowRoot`);return e&&e.shadowRoot}function md(e=`$style`){{let t=ul();if(!t)return process.env.NODE_ENV!==`production`&&Vl(`useCssModule must be called inside setup()`),f;let n=t.type.__cssModules;if(!n)return process.env.NODE_ENV!==`production`&&Vl(`Current instance does not have CSS modules injected.`),f;let r=n[e];return r||(process.env.NODE_ENV!==`production`&&Vl(`Current instance does not have CSS module named "${e}".`),f)}}const hd=new WeakMap,gd=new WeakMap,_d=Symbol(`_moveCb`),vd=Symbol(`_enterCb`),yd=e=>(delete e.props.mode,e),bd=yd({name:`TransitionGroup`,props:v({},cu,{tag:String,moveClass:String}),setup(e,{slots:t}){let n=ul(),r=Pi(),i,a;return Ba(()=>{if(!i.length)return;let t=e.moveClass||`${e.name||`v`}-move`;if(!Td(i[0].el,n.vnode.el,t)){i=[];return}i.forEach(Sd),i.forEach(Cd);let r=i.filter(wd);wu(),r.forEach(e=>{let n=e.el,r=n.style;gu(n,t),r.transform=r.webkitTransform=r.transitionDuration=``;let i=n[_d]=e=>{e&&e.target!==n||(!e||/transform$/.test(e.propertyName))&&(n.removeEventListener(`transitionend`,i),n[_d]=null,_u(n,t))};n.addEventListener(`transitionend`,i)}),i=[]}),()=>{let o=N(e),s=pu(o),c=o.tag||B;if(i=[],a)for(let e=0;e<a.length;e++){let t=a[e];t.el&&t.el instanceof Element&&(i.push(t),Gi(t,Hi(t,s,r,n)),hd.set(t,t.el.getBoundingClientRect()))}a=t.default?Ki(t.default()):[];for(let e=0;e<a.length;e++){let t=a[e];t.key==null?process.env.NODE_ENV!==`production`&&t.type!==Pc&&Vl(`<TransitionGroup> children must be keyed.`):Gi(t,Hi(t,s,r,n))}return K(c,null,a)}}}),xd=bd;function Sd(e){let t=e.el;t[_d]&&t[_d](),t[vd]&&t[vd]()}function Cd(e){gd.set(e,e.el.getBoundingClientRect())}function wd(e){let t=hd.get(e),n=gd.get(e),r=t.left-n.left,i=t.top-n.top;if(r||i){let t=e.el.style;return t.transform=t.webkitTransform=`translate(${r}px,${i}px)`,t.transitionDuration=`0s`,e}}function Td(e,t,n){let r=e.cloneNode(),i=e[ou];i&&i.forEach(e=>{e.split(/\s+/).forEach(e=>e&&r.classList.remove(e))}),n.split(/\s+/).forEach(e=>e&&r.classList.add(e)),r.style.display=`none`;let a=t.nodeType===1?t:t.parentNode;a.appendChild(r);let{hasTransform:o}=xu(r);return a.removeChild(r),o}const Ed=e=>{let t=e.props[`onUpdate:modelValue`]||!1;return S(t)?e=>ge(t,e):t};function Dd(e){e.target.composing=!0}function Od(e){let t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event(`input`)))}const kd=Symbol(`_assign`),Ad={created(e,{modifiers:{lazy:t,trim:n,number:r}},i){e[kd]=Ed(i);let a=r||i.props&&i.props.type===`number`;Ku(e,t?`change`:`input`,t=>{if(t.target.composing)return;let r=e.value;n&&(r=r.trim()),a&&(r=ve(r)),e[kd](r)}),n&&Ku(e,`change`,()=>{e.value=e.value.trim()}),t||(Ku(e,`compositionstart`,Dd),Ku(e,`compositionend`,Od),Ku(e,`change`,Od))},mounted(e,{value:t}){e.value=t??``},beforeUpdate(e,{value:t,oldValue:n,modifiers:{lazy:r,trim:i,number:a}},o){if(e[kd]=Ed(o),e.composing)return;let s=(a||e.type===`number`)&&!/^0\d/.test(e.value)?ve(e.value):e.value,c=t??``;s!==c&&(document.activeElement===e&&e.type!==`range`&&(r&&t===n||i&&e.value.trim()===c)||(e.value=c))}},jd={deep:!0,created(e,t,n){e[kd]=Ed(n),Ku(e,`change`,()=>{let t=e._modelValue,n=Id(e),r=e.checked,i=e[kd];if(S(t)){let e=Je(t,n),a=e!==-1;if(r&&!a)i(t.concat(n));else if(!r&&a){let n=[...t];n.splice(e,1),i(n)}}else if(w(t)){let e=new Set(t);r?e.add(n):e.delete(n),i(e)}else i(Ld(e,r))})},mounted:Md,beforeUpdate(e,t,n){e[kd]=Ed(n),Md(e,t,n)}};function Md(e,{value:t,oldValue:n},r){e._modelValue=t;let i;if(S(t))i=Je(t,r.props.value)>-1;else if(w(t))i=t.has(r.props.value);else{if(t===n)return;i=qe(t,Ld(e,!0))}e.checked!==i&&(e.checked=i)}const Nd={created(e,{value:t},n){e.checked=qe(t,n.props.value),e[kd]=Ed(n),Ku(e,`change`,()=>{e[kd](Id(e))})},beforeUpdate(e,{value:t,oldValue:n},r){e[kd]=Ed(r),t!==n&&(e.checked=qe(t,r.props.value))}},Pd={deep:!0,created(e,{value:t,modifiers:{number:n}},r){let i=w(t);Ku(e,`change`,()=>{let t=Array.prototype.filter.call(e.options,e=>e.selected).map(e=>n?ve(Id(e)):Id(e));e[kd](e.multiple?i?new Set(t):t:t[0]),e._assigning=!0,Dr(()=>{e._assigning=!1})}),e[kd]=Ed(r)},mounted(e,{value:t}){Fd(e,t)},beforeUpdate(e,t,n){e[kd]=Ed(n)},updated(e,{value:t}){e._assigning||Fd(e,t)}};function Fd(e,t){let n=e.multiple,r=S(t);if(n&&!r&&!w(t)){process.env.NODE_ENV!==`production`&&Vl(`<select multiple v-model> expects an Array or Set value for its binding, but got ${Object.prototype.toString.call(t).slice(8,-1)}.`);return}for(let i=0,a=e.options.length;i<a;i++){let a=e.options[i],o=Id(a);if(n)if(r){let e=typeof o;e===`string`||e===`number`?a.selected=t.some(e=>String(e)===String(o)):a.selected=Je(t,o)>-1}else a.selected=t.has(o);else if(qe(Id(a),t)){e.selectedIndex!==i&&(e.selectedIndex=i);return}}!n&&e.selectedIndex!==-1&&(e.selectedIndex=-1)}function Id(e){return`_value`in e?e._value:e.value}function Ld(e,t){let n=t?`_trueValue`:`_falseValue`;return n in e?e[n]:t}const Rd={created(e,t,n){Bd(e,t,n,null,`created`)},mounted(e,t,n){Bd(e,t,n,null,`mounted`)},beforeUpdate(e,t,n,r){Bd(e,t,n,r,`beforeUpdate`)},updated(e,t,n,r){Bd(e,t,n,r,`updated`)}};function zd(e,t){switch(e){case`SELECT`:return Pd;case`TEXTAREA`:return Ad;default:switch(t){case`checkbox`:return jd;case`radio`:return Nd;default:return Ad}}}function Bd(e,t,n,r,i){let a=zd(e.tagName,n.props&&n.props.type),o=a[i];o&&o(e,t,n,r)}function Vd(){Ad.getSSRProps=({value:e})=>({value:e}),Nd.getSSRProps=({value:e},t)=>{if(t.props&&qe(t.props.value,e))return{checked:!0}},jd.getSSRProps=({value:e},t)=>{if(S(e)){if(t.props&&Je(e,t.props.value)>-1)return{checked:!0}}else if(w(e)){if(t.props&&e.has(t.props.value))return{checked:!0}}else if(e)return{checked:!0}},Rd.getSSRProps=(e,t)=>{if(typeof t.type!=`string`)return;let n=zd(t.type.toUpperCase(),t.props&&t.props.type);if(n.getSSRProps)return n.getSSRProps(e,t)}}const Hd=[`ctrl`,`shift`,`alt`,`meta`],Ud={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>`button`in e&&e.button!==0,middle:e=>`button`in e&&e.button!==1,right:e=>`button`in e&&e.button!==2,exact:(e,t)=>Hd.some(n=>e[`${n}Key`]&&!t.includes(n))},Wd=(e,t)=>{let n=e._withMods||={},r=t.join(`.`);return n[r]||(n[r]=(n,...r)=>{for(let e=0;e<t.length;e++){let r=Ud[t[e]];if(r&&r(n,t))return}return e(n,...r)})},Gd={esc:`escape`,space:` `,up:`arrow-up`,left:`arrow-left`,right:`arrow-right`,down:`arrow-down`,delete:`backspace`},Kd=(e,t)=>{let n=e._withKeys||={},r=t.join(`.`);return n[r]||(n[r]=n=>{if(!(`key`in n))return;let r=A(n.key);if(t.some(e=>e===r||Gd[e]===r))return e(n)})},qd=v({patchProp:ad},ru);let Jd,Yd=!1;function Xd(){return Jd||=Rs(qd)}function Zd(){return Jd=Yd?Jd:zs(qd),Yd=!0,Jd}const Qd=(...e)=>{Xd().render(...e)},$d=(...e)=>{Zd().hydrate(...e)},ef=(...e)=>{let t=Xd().createApp(...e);process.env.NODE_ENV!==`production`&&(rf(t),af(t));let{mount:n}=t;return t.mount=e=>{let r=sf(e);if(!r)return;let i=t._component;!T(i)&&!i.render&&!i.template&&(i.template=r.innerHTML),r.nodeType===1&&(r.textContent=``);let a=n(r,!1,nf(r));return r instanceof Element&&(r.removeAttribute(`v-cloak`),r.setAttribute(`data-v-app`,``)),a},t},tf=(...e)=>{let t=Zd().createApp(...e);process.env.NODE_ENV!==`production`&&(rf(t),af(t));let{mount:n}=t;return t.mount=e=>{let t=sf(e);if(t)return n(t,!0,nf(t))},t};function nf(e){if(e instanceof SVGElement)return`svg`;if(typeof MathMLElement==`function`&&e instanceof MathMLElement)return`mathml`}function rf(e){Object.defineProperty(e.config,`isNativeTag`,{value:e=>Pe(e)||Fe(e)||Ie(e),writable:!1})}function af(e){if(Tl()){let t=e.config.isCustomElement;Object.defineProperty(e.config,`isCustomElement`,{get(){return t},set(){Vl("The `isCustomElement` config option is deprecated. Use `compilerOptions.isCustomElement` instead.")}});let n=e.config.compilerOptions,r='The `compilerOptions` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka "full build"). Since you are using the runtime-only build, `compilerOptions` must be passed to `@vue/compiler-dom` in the build setup instead.\n- For vue-loader: pass it via vue-loader\'s `compilerOptions` loader option.\n- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader\n- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-sfc';Object.defineProperty(e.config,`compilerOptions`,{get(){return Vl(r),n},set(){Vl(r)}})}}function sf(e){if(E(e)){let t=document.querySelector(e);return process.env.NODE_ENV!==`production`&&!t&&Vl(`Failed to mount app: mount target selector "${e}" returned null.`),t}return process.env.NODE_ENV!==`production`&&window.ShadowRoot&&e instanceof window.ShadowRoot&&e.mode===`closed`&&Vl('mounting on a ShadowRoot with `{mode: "closed"}` may lead to unpredictable bugs'),e}let cf=!1;const lf=()=>{cf||(cf=!0,Vd(),Au())};var uf={};s(uf,{BaseTransition:()=>Bi,BaseTransitionPropsValidators:()=>Ii,Comment:()=>V,DeprecationTypes:()=>Yl,EffectScope:()=>tt,ErrorCodes:()=>pr,ErrorTypeStrings:()=>Hl,Fragment:()=>B,KeepAlive:()=>Da,ReactiveEffect:()=>ot,Static:()=>Fc,Suspense:()=>Sc,Teleport:()=>ki,Text:()=>Pc,TrackOpTypes:()=>Jn,Transition:()=>uu,TransitionGroup:()=>xd,TriggerOpTypes:()=>Yn,VueElement:()=>dd,assertNumber:()=>fr,callWithAsyncErrorHandling:()=>gr,callWithErrorHandling:()=>hr,camelize:()=>k,capitalize:()=>pe,cloneVNode:()=>Zc,compatUtils:()=>Jl,compile:()=>ff,computed:()=>J,createApp:()=>ef,createBlock:()=>W,createCommentVNode:()=>el,createElementBlock:()=>U,createElementVNode:()=>G,createHydrationRenderer:()=>zs,createPropsRestProxy:()=>Ao,createRenderer:()=>Rs,createSSRApp:()=>tf,createSlots:()=>no,createStaticVNode:()=>$c,createTextVNode:()=>q,createVNode:()=>K,customRef:()=>Bn,defineAsyncComponent:()=>Ca,defineComponent:()=>z,defineCustomElement:()=>cd,defineEmits:()=>vo,defineExpose:()=>yo,defineModel:()=>So,defineOptions:()=>bo,defineProps:()=>_o,defineSSRCustomElement:()=>ld,defineSlots:()=>xo,devtools:()=>Ul,effect:()=>yt,effectScope:()=>nt,getCurrentInstance:()=>ul,getCurrentScope:()=>rt,getCurrentWatcher:()=>$n,getTransitionRawChildren:()=>Ki,guardReactiveProps:()=>Xc,h:()=>Il,handleError:()=>_r,hasInjectionContext:()=>es,hydrate:()=>$d,hydrateOnIdle:()=>ga,hydrateOnInteraction:()=>ba,hydrateOnMediaQuery:()=>ya,hydrateOnVisible:()=>va,initCustomFormatter:()=>Ll,initDirectivesForSSR:()=>lf,inject:()=>$o,isMemoSame:()=>zl,isProxy:()=>On,isReactive:()=>Tn,isReadonly:()=>En,isRef:()=>P,isRuntimeOnly:()=>Tl,isShallow:()=>Dn,isVNode:()=>Hc,markRaw:()=>kn,mergeDefaults:()=>Oo,mergeModels:()=>ko,mergeProps:()=>il,nextTick:()=>Dr,normalizeClass:()=>j,normalizeProps:()=>Ae,normalizeStyle:()=>we,onActivated:()=>ka,onBeforeMount:()=>La,onBeforeUnmount:()=>Va,onBeforeUpdate:()=>za,onDeactivated:()=>Aa,onErrorCaptured:()=>Ka,onMounted:()=>Ra,onRenderTracked:()=>Ga,onRenderTriggered:()=>Wa,onScopeDispose:()=>it,onServerPrefetch:()=>Ua,onUnmounted:()=>Ha,onUpdated:()=>Ba,onWatcherCleanup:()=>er,openBlock:()=>H,popScopeId:()=>mi,provide:()=>Qo,proxyRefs:()=>Rn,pushScopeId:()=>pi,queuePostFlushCb:()=>jr,reactive:()=>bn,readonly:()=>Sn,ref:()=>F,registerRuntimeCompiler:()=>wl,render:()=>Qd,renderList:()=>to,renderSlot:()=>ro,resolveComponent:()=>Ya,resolveDirective:()=>Qa,resolveDynamicComponent:()=>Za,resolveFilter:()=>ql,resolveTransitionHooks:()=>Hi,setBlockTracking:()=>Bc,setDevtoolsHook:()=>Wl,setTransitionHooks:()=>Gi,shallowReactive:()=>xn,shallowReadonly:()=>Cn,shallowRef:()=>Mn,ssrContextKey:()=>Js,ssrUtils:()=>Kl,stop:()=>bt,toDisplayString:()=>Xe,toHandlerKey:()=>me,toHandlers:()=>ao,toRaw:()=>N,toRef:()=>Wn,toRefs:()=>Vn,toValue:()=>In,transformVNodeArgs:()=>Gc,triggerRef:()=>Fn,unref:()=>I,useAttrs:()=>To,useCssModule:()=>md,useCssVars:()=>Mu,useHost:()=>fd,useId:()=>qi,useModel:()=>rc,useSSRContext:()=>Ys,useShadowRoot:()=>pd,useSlots:()=>wo,useTemplateRef:()=>Xi,useTransitionState:()=>Pi,vModelCheckbox:()=>jd,vModelDynamic:()=>Rd,vModelRadio:()=>Nd,vModelSelect:()=>Pd,vModelText:()=>Ad,vShow:()=>Ou,version:()=>Bl,warn:()=>Vl,watch:()=>$s,watchEffect:()=>Xs,watchPostEffect:()=>Zs,watchSyncEffect:()=>Qs,withAsyncContext:()=>jo,withCtx:()=>R,withDefaults:()=>Co,withDirectives:()=>_i,withKeys:()=>Kd,withMemo:()=>Rl,withModifiers:()=>Wd,withScopeId:()=>hi});function df(){Ll()}process.env.NODE_ENV!==`production`&&df();const ff=()=>{process.env.NODE_ENV!==`production`&&Vl(`Runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`)},pf=e=>e.provider===`google`,mf=e=>e.provider===`bedrock`,hf=e=>e.provider===`openai`,gf=e=>e.provider===`anthropic`;function _f(e){return e?e.flatMap(e=>e.type===B?_f(e.children):[e]):[]}const vf=z({name:`PrimitiveSlot`,inheritAttrs:!1,setup(e,{attrs:t,slots:n}){return()=>{if(!n.default)return null;let e=_f(n.default()),r=e.findIndex(e=>e.type!==V);if(r===-1)return e;let i=e[r];delete i.props?.ref;let a=i.props?il(t,i.props):t,o=Zc({...i,props:{}},a);return e.length===1?o:(e[r]=o,e)}}}),yf=[`area`,`img`,`input`],bf=z({name:`Primitive`,inheritAttrs:!1,props:{asChild:{type:Boolean,default:!1},as:{type:[String,Object],default:`div`}},setup(e,{attrs:t,slots:n}){let r=e.asChild?`template`:e.as;return typeof r==`string`&&yf.includes(r)?()=>Il(r,t):r===`template`?()=>Il(vf,t,{default:n.default}):()=>Il(e.as,t,{default:n.default})}}),xf=typeof window<`u`&&typeof document<`u`,Sf=typeof WorkerGlobalScope<`u`&&globalThis instanceof WorkerGlobalScope,Cf=e=>e!==void 0;function wf(e){let t=Object.create(null);return n=>{let r=t[n];return r||(t[n]=e(n))}}const Tf=/\B([A-Z])/g,Ef=wf(e=>e.replace(Tf,`-$1`).toLowerCase()),Df=/-(\w)/g,Of=wf(e=>e.replace(Df,(e,t)=>t?t.toUpperCase():``)),kf=xf?window:void 0,Af=xf?window.document:void 0,jf=xf?window.navigator:void 0,Mf=xf?window.location:void 0;function Nf(e){var t;let n=In(e);return(t=n?.$el)??n}const Pf=Symbol(`vueuse-ssr-width`);function Ff(e){return JSON.parse(JSON.stringify(e))}const If=[{max:6e4,value:1e3,name:`second`},{max:276e4,value:6e4,name:`minute`},{max:72e6,value:36e5,name:`hour`},{max:5184e5,value:864e5,name:`day`},{max:24192e5,value:6048e5,name:`week`},{max:28512e6,value:2592e6,name:`month`},{max:1/0,value:31536e6,name:`year`}];function Lf(e,t,n,r={}){var i,a,o;let{clone:s=!1,passive:c=!1,eventName:l,deep:u=!1,defaultValue:d,shouldEmit:f}=r,p=ul(),m=n||p?.emit||(i=p?.$emit)?.bind(p)||(o=(a=p?.proxy)?.$emit)?.bind(p?.proxy),h=l;t||=`modelValue`,h||=`update:${t.toString()}`;let g=e=>s?typeof s==`function`?s(e):Ff(e):e,_=()=>Cf(e[t])?g(e[t]):d,v=e=>{f?f(e)&&m(h,e):m(h,e)};if(c){let n=_(),r=F(n),i=!1;return $s(()=>e[t],e=>{i||(i=!0,r.value=g(e),Dr(()=>i=!1))}),$s(r,n=>{!i&&(n!==e[t]||u)&&v(n)},{deep:u}),r}else return J({get(){return _()},set(e){v(e)}})}function Rf(e,t){let n=typeof e==`string`&&!t?`${e}Context`:t,r=Symbol(n),i=t=>{let n=$o(r,t);if(n||n===null)return n;throw Error(`Injection \`${r.toString()}\` not found. Component must be used within ${Array.isArray(e)?`one of the following components: ${e.join(`, `)}`:`\`${e}\``}`)},a=e=>(Qo(r,e),e);return[i,a]}const[zf,Bf]=Rf(`ConfigProvider`);function Vf(e){let t=zf({dir:F(`ltr`)});return J(()=>e?.value||t.dir?.value||`ltr`)}function Hf(){let e=ul(),t=F(),n=J(()=>[`#text`,`#comment`].includes(t.value?.$el.nodeName)?t.value?.$el.nextElementSibling:Nf(t)),r=Object.assign({},e.exposed),i={};for(let t in e.props)Object.defineProperty(i,t,{enumerable:!0,configurable:!0,get:()=>e.props[t]});if(Object.keys(r).length>0)for(let e in r)Object.defineProperty(i,e,{enumerable:!0,configurable:!0,get:()=>r[e]});Object.defineProperty(i,`$el`,{enumerable:!0,configurable:!0,get:()=>e.vnode.el}),e.exposed=i;function a(n){t.value=n,n&&(Object.defineProperty(i,`$el`,{enumerable:!0,configurable:!0,get:()=>n instanceof Element?n:n.$el}),e.exposed=i)}return{forwardRef:a,currentRef:t,currentElement:n}}let Uf=0;function Wf(e,t=`reka`){if(e)return e;let n=zf({useId:void 0});return Object.hasOwn(uf,`useId`)?`${t}-${qi?.()}`:n.useId?`${t}-${n.useId()}`:`${t}-${++Uf}`}function Gf(e,t){let n=F(e);function r(e){let r=t[n.value][e];return r??n.value}let i=e=>{n.value=r(e)};return{state:n,dispatch:i}}function Kf(e,t){let n=F({}),r=F(`none`),i=F(e),a=e.value?`mounted`:`unmounted`,o,s=t.value?.ownerDocument.defaultView??kf,{state:c,dispatch:l}=Gf(a,{mounted:{UNMOUNT:`unmounted`,ANIMATION_OUT:`unmountSuspended`},unmountSuspended:{MOUNT:`mounted`,ANIMATION_END:`unmounted`},unmounted:{MOUNT:`mounted`}}),u=e=>{if(xf){let n=new CustomEvent(e,{bubbles:!1,cancelable:!1});t.value?.dispatchEvent(n)}};$s(e,async(e,i)=>{let a=i!==e;if(await Dr(),a){let a=r.value,o=qf(t.value);if(e)l(`MOUNT`),u(`enter`),o===`none`&&u(`after-enter`);else if(o===`none`||o===`undefined`||n.value?.display===`none`)l(`UNMOUNT`),u(`leave`),u(`after-leave`);else{let e=a!==o;i&&e?(l(`ANIMATION_OUT`),u(`leave`)):(l(`UNMOUNT`),u(`after-leave`))}}},{immediate:!0});let d=e=>{let n=qf(t.value),r=n.includes(e.animationName),a=c.value===`mounted`?`enter`:`leave`;if(e.target===t.value&&r&&(u(`after-${a}`),l(`ANIMATION_END`),!i.value)){let e=t.value.style.animationFillMode;t.value.style.animationFillMode=`forwards`,o=s?.setTimeout(()=>{t.value?.style.animationFillMode===`forwards`&&(t.value.style.animationFillMode=e)})}e.target===t.value&&n===`none`&&l(`ANIMATION_END`)},f=e=>{e.target===t.value&&(r.value=qf(t.value))},p=$s(t,(e,t)=>{e?(n.value=getComputedStyle(e),e.addEventListener(`animationstart`,f),e.addEventListener(`animationcancel`,d),e.addEventListener(`animationend`,d)):(l(`ANIMATION_END`),o!==void 0&&s?.clearTimeout(o),t?.removeEventListener(`animationstart`,f),t?.removeEventListener(`animationcancel`,d),t?.removeEventListener(`animationend`,d))},{immediate:!0}),m=$s(c,()=>{let e=qf(t.value);r.value=c.value===`mounted`?e:`none`});Ha(()=>{p(),m()});let h=J(()=>[`mounted`,`unmountSuspended`].includes(c.value));return{isPresent:h}}function qf(e){return e&&getComputedStyle(e).animationName||`none`}const Jf=z({name:`Presence`,props:{present:{type:Boolean,required:!0},forceMount:{type:Boolean}},slots:{},setup(e,{slots:t,expose:n}){let{present:r,forceMount:i}=Vn(e),a=F(),{isPresent:o}=Kf(r,a);n({present:o});let s=t.default({present:o.value});s=_f(s||[]);let c=ul();if(s&&s?.length>1){let e=c?.parent?.type.name?`<${c.parent.type.name} />`:`component`;throw Error([`Detected an invalid children for \`${e}\` for  \`Presence\` component.`,``,"Note: Presence works similarly to `v-if` directly, but it waits for animation/transition to finished before unmounting. So it expect only one direct child of valid VNode type.",`You can apply a few solutions:`,["Provide a single child element so that `presence` directive attach correctly.",`Ensure the first child is an actual element instead of a raw text node or comment node.`].map(e=>`  - ${e}`).join(`
`)].join(`
`))}return()=>i.value||r.value||o.value?Il(t.default({present:o.value})[0],{ref:e=>{let t=Nf(e);return t?.hasAttribute===void 0||(t?.hasAttribute(`data-reka-popper-content-wrapper`)?a.value=t.firstElementChild:a.value=t),t}}):null}});function Yf(e){let t=ul(),n=t?.type.emits,r={};return n?.length||console.warn(`No emitted event found. Please check component: ${t?.type.__name}`),n?.forEach(t=>{r[me(k(t))]=(...n)=>e(t,...n)}),r}function Xf(){let e=document.activeElement;if(e==null)return null;for(;e!=null&&e.shadowRoot!=null&&e.shadowRoot.activeElement!=null;)e=e.shadowRoot.activeElement;return e}function Zf(e){let t=ul(),n=Object.keys(t?.type.props??{}).reduce((e,n)=>{let r=(t?.type.props[n]).default;return r!==void 0&&(e[n]=r),e},{}),r=Wn(e);return J(()=>{let e={},i=t?.vnode.props??{};return Object.keys(i).forEach(t=>{e[k(t)]=i[t]}),Object.keys({...n,...e}).reduce((e,t)=>(r.value[t]!==void 0&&(e[t]=r.value[t]),e),{})})}function Qf(e,t){let n=Zf(e),r=t?Yf(t):{};return J(()=>({...n.value,...r}))}function $f(){let e=F(),t=J(()=>[`#text`,`#comment`].includes(e.value?.$el.nodeName)?e.value?.$el.nextElementSibling:Nf(e));return{primitiveElement:e,currentElement:t}}const ep=`data-reka-collection-item`;function tp(e={}){let{key:t=``,isProvider:n=!1}=e,r=`${t}CollectionProvider`,i;if(n){let e=F(new Map),t=F();i={collectionRef:t,itemMap:e},Qo(r,i)}else i=$o(r);let a=(e=!1)=>{let t=i.collectionRef.value;if(!t)return[];let n=Array.from(t.querySelectorAll(`[${ep}]`)),r=Array.from(i.itemMap.value.values()),a=r.sort((e,t)=>n.indexOf(e.ref)-n.indexOf(t.ref));return e?a:a.filter(e=>e.ref.dataset.disabled!==``)},o=z({name:`CollectionSlot`,setup(e,{slots:t}){let{primitiveElement:n,currentElement:r}=$f();return $s(r,()=>{i.collectionRef.value=r.value}),()=>Il(vf,{ref:n},t)}}),s=z({name:`CollectionItem`,inheritAttrs:!1,props:{value:{validator:()=>!0}},setup(e,{slots:t,attrs:n}){let{primitiveElement:r,currentElement:a}=$f();return Xs(t=>{if(a.value){let n=kn(a.value);i.itemMap.value.set(n,{ref:a.value,value:e.value}),t(()=>i.itemMap.value.delete(n))}}),()=>Il(vf,{...n,[ep]:``,ref:r},t)}}),c=J(()=>Array.from(i.itemMap.value.values())),l=J(()=>i.itemMap.value.size);return{getItems:a,reactiveItems:c,itemMapSize:l,CollectionSlot:o,CollectionItem:s}}const np=`rovingFocusGroup.onEntryFocus`,rp={bubbles:!1,cancelable:!0},ip={ArrowLeft:`prev`,ArrowUp:`prev`,ArrowRight:`next`,ArrowDown:`next`,PageUp:`first`,Home:`first`,PageDown:`last`,End:`last`};function ap(e,t){return t===`rtl`?e===`ArrowLeft`?`ArrowRight`:e===`ArrowRight`?`ArrowLeft`:e:e}function op(e,t,n){let r=ap(e.key,n);if(!(t===`vertical`&&[`ArrowLeft`,`ArrowRight`].includes(r))&&!(t===`horizontal`&&[`ArrowUp`,`ArrowDown`].includes(r)))return ip[r]}function sp(e,t=!1){let n=Xf();for(let r of e)if(r===n||(r.focus({preventScroll:t}),Xf()!==n))return}function cp(e,t){return e.map((n,r)=>e[(t+r)%e.length])}const[lp,up]=Rf(`RovingFocusGroup`),dp=z({__name:`RovingFocusGroup`,props:{orientation:{default:void 0},dir:{},loop:{type:Boolean,default:!1},currentTabStopId:{},defaultCurrentTabStopId:{},preventScrollOnEntryFocus:{type:Boolean,default:!1},asChild:{type:Boolean},as:{}},emits:[`entryFocus`,`update:currentTabStopId`],setup(e,{expose:t,emit:n}){let r=e,i=n,{loop:a,orientation:o,dir:s}=Vn(r),c=Vf(s),l=Lf(r,`currentTabStopId`,i,{defaultValue:r.defaultCurrentTabStopId,passive:r.currentTabStopId===void 0}),u=F(!1),d=F(!1),f=F(0),{getItems:p,CollectionSlot:m}=tp({isProvider:!0});function h(e){let t=!d.value;if(e.currentTarget&&e.target===e.currentTarget&&t&&!u.value){let t=new CustomEvent(np,rp);if(e.currentTarget.dispatchEvent(t),i(`entryFocus`,t),!t.defaultPrevented){let e=p().map(e=>e.ref).filter(e=>e.dataset.disabled!==``),t=e.find(e=>e.getAttribute(`data-active`)===``),n=e.find(e=>e.id===l.value),i=[t,n,...e].filter(Boolean);sp(i,r.preventScrollOnEntryFocus)}}d.value=!1}function g(){setTimeout(()=>{d.value=!1},1)}return t({getItems:p}),up({loop:a,dir:c,orientation:o,currentTabStopId:l,onItemFocus:e=>{l.value=e},onItemShiftTab:()=>{u.value=!0},onFocusableItemAdd:()=>{f.value++},onFocusableItemRemove:()=>{f.value--}}),(e,t)=>(H(),W(I(m),null,{default:R(()=>[K(I(bf),{tabindex:u.value||f.value===0?-1:0,"data-orientation":I(o),as:e.as,"as-child":e.asChild,dir:I(c),style:{outline:`none`},onMousedown:t[0]||=e=>d.value=!0,onMouseup:g,onFocus:h,onBlur:t[1]||=e=>u.value=!1},{default:R(()=>[ro(e.$slots,`default`)]),_:3},8,[`tabindex`,`data-orientation`,`as`,`as-child`,`dir`])]),_:3}))}}),fp=z({__name:`RovingFocusItem`,props:{tabStopId:{},focusable:{type:Boolean,default:!0},active:{type:Boolean},allowShiftKey:{type:Boolean},asChild:{type:Boolean},as:{default:`span`}},setup(e){let t=e,n=lp(),r=Wf(),i=J(()=>t.tabStopId||r),a=J(()=>n.currentTabStopId.value===i.value),{getItems:o,CollectionItem:s}=tp();Ra(()=>{t.focusable&&n.onFocusableItemAdd()}),Ha(()=>{t.focusable&&n.onFocusableItemRemove()});function c(e){if(e.key===`Tab`&&e.shiftKey){n.onItemShiftTab();return}if(e.target!==e.currentTarget)return;let r=op(e,n.orientation.value,n.dir.value);if(r!==void 0){if(e.metaKey||e.ctrlKey||e.altKey||!t.allowShiftKey&&e.shiftKey)return;e.preventDefault();let i=[...o().map(e=>e.ref).filter(e=>e.dataset.disabled!==``)];if(r===`last`)i.reverse();else if(r===`prev`||r===`next`){r===`prev`&&i.reverse();let t=i.indexOf(e.currentTarget);i=n.loop.value?cp(i,t+1):i.slice(t+1)}Dr(()=>sp(i))}}return(e,t)=>(H(),W(I(s),null,{default:R(()=>[K(I(bf),{tabindex:a.value?0:-1,"data-orientation":I(n).orientation.value,"data-active":e.active?``:void 0,"data-disabled":e.focusable?void 0:``,as:e.as,"as-child":e.asChild,onMousedown:t[0]||=t=>{e.focusable?I(n).onItemFocus(i.value):t.preventDefault()},onFocus:t[1]||=e=>I(n).onItemFocus(i.value),onKeydown:c},{default:R(()=>[ro(e.$slots,`default`)]),_:3},8,[`tabindex`,`data-orientation`,`data-active`,`data-disabled`,`as`,`as-child`])]),_:3}))}}),pp=z({__name:`Label`,props:{for:{},asChild:{type:Boolean},as:{default:`label`}},setup(e){let t=e;return Hf(),(e,n)=>(H(),W(I(bf),il(t,{onMousedown:n[0]||=e=>{!e.defaultPrevented&&e.detail>1&&e.preventDefault()}}),{default:R(()=>[ro(e.$slots,`default`)]),_:3},16))}});function mp(e,t){return`${e}-trigger-${t}`}function hp(e,t){return`${e}-content-${t}`}const[gp,_p]=Rf(`TabsRoot`),vp=z({__name:`TabsRoot`,props:{defaultValue:{},orientation:{default:`horizontal`},dir:{},activationMode:{default:`automatic`},modelValue:{},unmountOnHide:{type:Boolean,default:!0},asChild:{type:Boolean},as:{}},emits:[`update:modelValue`],setup(e,{emit:t}){let n=e,r=t,{orientation:i,unmountOnHide:a,dir:o}=Vn(n),s=Vf(o);Hf();let c=Lf(n,`modelValue`,r,{defaultValue:n.defaultValue,passive:n.modelValue===void 0}),l=F();return _p({modelValue:c,changeModelValue:e=>{c.value=e},orientation:i,dir:s,unmountOnHide:a,activationMode:n.activationMode,baseId:Wf(void 0,`reka-tabs`),tabsList:l}),(e,t)=>(H(),W(I(bf),{dir:I(s),"data-orientation":I(i),"as-child":e.asChild,as:e.as},{default:R(()=>[ro(e.$slots,`default`,{modelValue:I(c)})]),_:3},8,[`dir`,`data-orientation`,`as-child`,`as`]))}}),yp=z({__name:`TabsContent`,props:{value:{},forceMount:{type:Boolean},asChild:{type:Boolean},as:{}},setup(e){let t=e,{forwardRef:n}=Hf(),r=gp(),i=J(()=>mp(r.baseId,t.value)),a=J(()=>hp(r.baseId,t.value)),o=J(()=>t.value===r.modelValue.value),s=F(o.value);return Ra(()=>{requestAnimationFrame(()=>{s.value=!1})}),(e,t)=>(H(),W(I(Jf),{present:e.forceMount||o.value,"force-mount":``},{default:R(({present:t})=>[K(I(bf),{id:a.value,ref:I(n),"as-child":e.asChild,as:e.as,role:`tabpanel`,"data-state":o.value?`active`:`inactive`,"data-orientation":I(r).orientation.value,"aria-labelledby":i.value,hidden:!t,tabindex:`0`,style:we({animationDuration:s.value?`0s`:void 0})},{default:R(()=>[!I(r).unmountOnHide.value||t?ro(e.$slots,`default`,{key:0}):el(``,!0)]),_:2},1032,[`id`,`as-child`,`as`,`data-state`,`data-orientation`,`aria-labelledby`,`hidden`,`style`])]),_:3},8,[`present`]))}}),bp=z({__name:`TabsList`,props:{loop:{type:Boolean,default:!0},asChild:{type:Boolean},as:{}},setup(e){let t=e,{loop:n}=Vn(t),{forwardRef:r,currentElement:i}=Hf(),a=gp();return a.tabsList=i,(e,t)=>(H(),W(I(dp),{"as-child":``,orientation:I(a).orientation.value,dir:I(a).dir.value,loop:I(n)},{default:R(()=>[K(I(bf),{ref:I(r),role:`tablist`,"as-child":e.asChild,as:e.as,"aria-orientation":I(a).orientation.value},{default:R(()=>[ro(e.$slots,`default`)]),_:3},8,[`as-child`,`as`,`aria-orientation`])]),_:3},8,[`orientation`,`dir`,`loop`]))}}),xp=z({__name:`TabsTrigger`,props:{value:{},disabled:{type:Boolean,default:!1},asChild:{type:Boolean},as:{default:`button`}},setup(e){let t=e,{forwardRef:n}=Hf(),r=gp(),i=J(()=>mp(r.baseId,t.value)),a=J(()=>hp(r.baseId,t.value)),o=J(()=>t.value===r.modelValue.value);return(e,t)=>(H(),W(I(fp),{"as-child":``,focusable:!e.disabled,active:o.value},{default:R(()=>[K(I(bf),{id:i.value,ref:I(n),role:`tab`,type:e.as===`button`?`button`:void 0,as:e.as,"as-child":e.asChild,"aria-selected":o.value?`true`:`false`,"aria-controls":a.value,"data-state":o.value?`active`:`inactive`,disabled:e.disabled,"data-disabled":e.disabled?``:void 0,"data-orientation":I(r).orientation.value,onMousedown:t[0]||=Wd(t=>{!e.disabled&&t.ctrlKey===!1?I(r).changeModelValue(e.value):t.preventDefault()},[`left`]),onKeydown:t[1]||=Kd(t=>I(r).changeModelValue(e.value),[`enter`,`space`]),onFocus:t[2]||=()=>{let t=I(r).activationMode!==`manual`;!o.value&&!e.disabled&&t&&I(r).changeModelValue(e.value)}},{default:R(()=>[ro(e.$slots,`default`)]),_:3},8,[`id`,`type`,`as`,`as-child`,`aria-selected`,`aria-controls`,`data-state`,`disabled`,`data-disabled`,`data-orientation`])]),_:3},8,[`focusable`,`active`]))}});function Sp(e){var t,n,r=``;if(typeof e==`string`||typeof e==`number`)r+=e;else if(typeof e==`object`)if(Array.isArray(e)){var i=e.length;for(t=0;t<i;t++)e[t]&&(n=Sp(e[t]))&&(r&&(r+=` `),r+=n)}else for(n in e)e[n]&&(r&&(r+=` `),r+=n);return r}function Cp(){for(var e,t,n=0,r=``,i=arguments.length;n<i;n++)(e=arguments[n])&&(t=Sp(e))&&(r&&(r+=` `),r+=t);return r}const wp=`-`,Tp=e=>{let t=kp(e),{conflictingClassGroups:n,conflictingClassGroupModifiers:r}=e,i=e=>{let n=e.split(wp);return n[0]===``&&n.length!==1&&n.shift(),Ep(n,t)||Op(e)},a=(e,t)=>{let i=n[e]||[];return t&&r[e]?[...i,...r[e]]:i};return{getClassGroupId:i,getConflictingClassGroupIds:a}},Ep=(e,t)=>{if(e.length===0)return t.classGroupId;let n=e[0],r=t.nextPart.get(n),i=r?Ep(e.slice(1),r):void 0;if(i)return i;if(t.validators.length===0)return;let a=e.join(wp);return t.validators.find(({validator:e})=>e(a))?.classGroupId},Dp=/^\[(.+)\]$/,Op=e=>{if(Dp.test(e)){let t=Dp.exec(e)[1],n=t?.substring(0,t.indexOf(`:`));if(n)return`arbitrary..`+n}},kp=e=>{let{theme:t,classGroups:n}=e,r={nextPart:new Map,validators:[]};for(let e in n)Ap(n[e],r,e,t);return r},Ap=(e,t,n,r)=>{e.forEach(e=>{if(typeof e==`string`){let r=e===``?t:jp(t,e);r.classGroupId=n;return}if(typeof e==`function`){if(Mp(e)){Ap(e(r),t,n,r);return}t.validators.push({validator:e,classGroupId:n});return}Object.entries(e).forEach(([e,i])=>{Ap(i,jp(t,e),n,r)})})},jp=(e,t)=>{let n=e;return t.split(wp).forEach(e=>{n.nextPart.has(e)||n.nextPart.set(e,{nextPart:new Map,validators:[]}),n=n.nextPart.get(e)}),n},Mp=e=>e.isThemeGetter,Np=e=>{if(e<1)return{get:()=>void 0,set:()=>{}};let t=0,n=new Map,r=new Map,i=(i,a)=>{n.set(i,a),t++,t>e&&(t=0,r=n,n=new Map)};return{get(e){let t=n.get(e);if(t!==void 0)return t;if((t=r.get(e))!==void 0)return i(e,t),t},set(e,t){n.has(e)?n.set(e,t):i(e,t)}}},Pp=`!`,Fp=`:`,Ip=1,Lp=e=>{let{prefix:t,experimentalParseClassName:n}=e,r=e=>{let t=[],n=0,r=0,i=0,a;for(let o=0;o<e.length;o++){let s=e[o];if(n===0&&r===0){if(s===Fp){t.push(e.slice(i,o)),i=o+Ip;continue}if(s===`/`){a=o;continue}}s===`[`?n++:s===`]`?n--:s===`(`?r++:s===`)`&&r--}let o=t.length===0?e:e.substring(i),s=Rp(o),c=s!==o,l=a&&a>i?a-i:void 0;return{modifiers:t,hasImportantModifier:c,baseClassName:s,maybePostfixModifierPosition:l}};if(t){let e=t+Fp,n=r;r=t=>t.startsWith(e)?n(t.substring(e.length)):{isExternal:!0,modifiers:[],hasImportantModifier:!1,baseClassName:t,maybePostfixModifierPosition:void 0}}if(n){let e=r;r=t=>n({className:t,parseClassName:e})}return r},Rp=e=>e.endsWith(Pp)?e.substring(0,e.length-1):e.startsWith(Pp)?e.substring(1):e,zp=e=>{let t=Object.fromEntries(e.orderSensitiveModifiers.map(e=>[e,!0])),n=e=>{if(e.length<=1)return e;let n=[],r=[];return e.forEach(e=>{let i=e[0]===`[`||t[e];i?(n.push(...r.sort(),e),r=[]):r.push(e)}),n.push(...r.sort()),n};return n},Bp=e=>({cache:Np(e.cacheSize),parseClassName:Lp(e),sortModifiers:zp(e),...Tp(e)}),Vp=/\s+/,Hp=(e,t)=>{let{parseClassName:n,getClassGroupId:r,getConflictingClassGroupIds:i,sortModifiers:a}=t,o=[],s=e.trim().split(Vp),c=``;for(let e=s.length-1;e>=0;--e){let t=s[e],{isExternal:l,modifiers:u,hasImportantModifier:d,baseClassName:f,maybePostfixModifierPosition:p}=n(t);if(l){c=t+(c.length>0?` `+c:c);continue}let m=!!p,h=r(m?f.substring(0,p):f);if(!h){if(!m){c=t+(c.length>0?` `+c:c);continue}if(h=r(f),!h){c=t+(c.length>0?` `+c:c);continue}m=!1}let g=a(u).join(`:`),_=d?g+Pp:g,v=_+h;if(o.includes(v))continue;o.push(v);let y=i(h,m);for(let e=0;e<y.length;++e){let t=y[e];o.push(_+t)}c=t+(c.length>0?` `+c:c)}return c};function Up(){let e=0,t,n,r=``;for(;e<arguments.length;)(t=arguments[e++])&&(n=Wp(t))&&(r&&(r+=` `),r+=n);return r}const Wp=e=>{if(typeof e==`string`)return e;let t,n=``;for(let r=0;r<e.length;r++)e[r]&&(t=Wp(e[r]))&&(n&&(n+=` `),n+=t);return n};function Gp(e,...t){let n,r,i,a=o;function o(o){let c=t.reduce((e,t)=>t(e),e());return n=Bp(c),r=n.cache.get,i=n.cache.set,a=s,s(o)}function s(e){let t=r(e);if(t)return t;let a=Hp(e,n);return i(e,a),a}return function(){return a(Up.apply(null,arguments))}}const Kp=e=>{let t=t=>t[e]||[];return t.isThemeGetter=!0,t},qp=/^\[(?:(\w[\w-]*):)?(.+)\]$/i,Jp=/^\((?:(\w[\w-]*):)?(.+)\)$/i,Yp=/^\d+\/\d+$/,Xp=/^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/,Zp=/\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/,Qp=/^(rgba?|hsla?|hwb|(ok)?(lab|lch)|color-mix)\(.+\)$/,$p=/^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/,em=/^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/,tm=e=>Yp.test(e),Y=e=>!!e&&!Number.isNaN(Number(e)),nm=e=>!!e&&Number.isInteger(Number(e)),rm=e=>e.endsWith(`%`)&&Y(e.slice(0,-1)),im=e=>Xp.test(e),am=()=>!0,om=e=>Zp.test(e)&&!Qp.test(e),sm=()=>!1,cm=e=>$p.test(e),lm=e=>em.test(e),um=e=>!X(e)&&!Z(e),dm=e=>Cm(e,Dm,sm),X=e=>qp.test(e),fm=e=>Cm(e,Om,om),pm=e=>Cm(e,km,Y),mm=e=>Cm(e,Tm,sm),hm=e=>Cm(e,Em,lm),gm=e=>Cm(e,jm,cm),Z=e=>Jp.test(e),_m=e=>wm(e,Om),vm=e=>wm(e,Am),ym=e=>wm(e,Tm),bm=e=>wm(e,Dm),xm=e=>wm(e,Em),Sm=e=>wm(e,jm,!0),Cm=(e,t,n)=>{let r=qp.exec(e);return r?r[1]?t(r[1]):n(r[2]):!1},wm=(e,t,n=!1)=>{let r=Jp.exec(e);return r?r[1]?t(r[1]):n:!1},Tm=e=>e===`position`||e===`percentage`,Em=e=>e===`image`||e===`url`,Dm=e=>e===`length`||e===`size`||e===`bg-size`,Om=e=>e===`length`,km=e=>e===`number`,Am=e=>e===`family-name`,jm=e=>e===`shadow`,Mm=()=>{let e=Kp(`color`),t=Kp(`font`),n=Kp(`text`),r=Kp(`font-weight`),i=Kp(`tracking`),a=Kp(`leading`),o=Kp(`breakpoint`),s=Kp(`container`),c=Kp(`spacing`),l=Kp(`radius`),u=Kp(`shadow`),d=Kp(`inset-shadow`),f=Kp(`text-shadow`),p=Kp(`drop-shadow`),m=Kp(`blur`),h=Kp(`perspective`),g=Kp(`aspect`),_=Kp(`ease`),v=Kp(`animate`),y=()=>[`auto`,`avoid`,`all`,`avoid-page`,`page`,`left`,`right`,`column`],b=()=>[`center`,`top`,`bottom`,`left`,`right`,`top-left`,`left-top`,`top-right`,`right-top`,`bottom-right`,`right-bottom`,`bottom-left`,`left-bottom`],x=()=>[...b(),Z,X],S=()=>[`auto`,`hidden`,`clip`,`visible`,`scroll`],C=()=>[`auto`,`contain`,`none`],w=()=>[Z,X,c],ee=()=>[tm,`full`,`auto`,...w()],te=()=>[nm,`none`,`subgrid`,Z,X],T=()=>[`auto`,{span:[`full`,nm,Z,X]},nm,Z,X],E=()=>[nm,`auto`,Z,X],ne=()=>[`auto`,`min`,`max`,`fr`,Z,X],D=()=>[`start`,`end`,`center`,`between`,`around`,`evenly`,`stretch`,`baseline`,`center-safe`,`end-safe`],re=()=>[`start`,`end`,`center`,`stretch`,`center-safe`,`end-safe`],ie=()=>[`auto`,...w()],ae=()=>[tm,`auto`,`full`,`dvw`,`dvh`,`lvw`,`lvh`,`svw`,`svh`,`min`,`max`,`fit`,...w()],O=()=>[e,Z,X],oe=()=>[...b(),ym,mm,{position:[Z,X]}],se=()=>[`no-repeat`,{repeat:[``,`x`,`y`,`space`,`round`]}],ce=()=>[`auto`,`cover`,`contain`,bm,dm,{size:[Z,X]}],le=()=>[rm,_m,fm],ue=()=>[``,`none`,`full`,l,Z,X],de=()=>[``,Y,_m,fm],k=()=>[`solid`,`dashed`,`dotted`,`double`],fe=()=>[`normal`,`multiply`,`screen`,`overlay`,`darken`,`lighten`,`color-dodge`,`color-burn`,`hard-light`,`soft-light`,`difference`,`exclusion`,`hue`,`saturation`,`color`,`luminosity`],A=()=>[Y,rm,ym,mm],pe=()=>[``,`none`,m,Z,X],me=()=>[`none`,Y,Z,X],he=()=>[`none`,Y,Z,X],ge=()=>[Y,Z,X],_e=()=>[tm,`full`,...w()];return{cacheSize:500,theme:{animate:[`spin`,`ping`,`pulse`,`bounce`],aspect:[`video`],blur:[im],breakpoint:[im],color:[am],container:[im],"drop-shadow":[im],ease:[`in`,`out`,`in-out`],font:[um],"font-weight":[`thin`,`extralight`,`light`,`normal`,`medium`,`semibold`,`bold`,`extrabold`,`black`],"inset-shadow":[im],leading:[`none`,`tight`,`snug`,`normal`,`relaxed`,`loose`],perspective:[`dramatic`,`near`,`normal`,`midrange`,`distant`,`none`],radius:[im],shadow:[im],spacing:[`px`,Y],text:[im],"text-shadow":[im],tracking:[`tighter`,`tight`,`normal`,`wide`,`wider`,`widest`]},classGroups:{aspect:[{aspect:[`auto`,`square`,tm,X,Z,g]}],container:[`container`],columns:[{columns:[Y,X,Z,s]}],"break-after":[{"break-after":y()}],"break-before":[{"break-before":y()}],"break-inside":[{"break-inside":[`auto`,`avoid`,`avoid-page`,`avoid-column`]}],"box-decoration":[{"box-decoration":[`slice`,`clone`]}],box:[{box:[`border`,`content`]}],display:[`block`,`inline-block`,`inline`,`flex`,`inline-flex`,`table`,`inline-table`,`table-caption`,`table-cell`,`table-column`,`table-column-group`,`table-footer-group`,`table-header-group`,`table-row-group`,`table-row`,`flow-root`,`grid`,`inline-grid`,`contents`,`list-item`,`hidden`],sr:[`sr-only`,`not-sr-only`],float:[{float:[`right`,`left`,`none`,`start`,`end`]}],clear:[{clear:[`left`,`right`,`both`,`none`,`start`,`end`]}],isolation:[`isolate`,`isolation-auto`],"object-fit":[{object:[`contain`,`cover`,`fill`,`none`,`scale-down`]}],"object-position":[{object:x()}],overflow:[{overflow:S()}],"overflow-x":[{"overflow-x":S()}],"overflow-y":[{"overflow-y":S()}],overscroll:[{overscroll:C()}],"overscroll-x":[{"overscroll-x":C()}],"overscroll-y":[{"overscroll-y":C()}],position:[`static`,`fixed`,`absolute`,`relative`,`sticky`],inset:[{inset:ee()}],"inset-x":[{"inset-x":ee()}],"inset-y":[{"inset-y":ee()}],start:[{start:ee()}],end:[{end:ee()}],top:[{top:ee()}],right:[{right:ee()}],bottom:[{bottom:ee()}],left:[{left:ee()}],visibility:[`visible`,`invisible`,`collapse`],z:[{z:[nm,`auto`,Z,X]}],basis:[{basis:[tm,`full`,`auto`,s,...w()]}],"flex-direction":[{flex:[`row`,`row-reverse`,`col`,`col-reverse`]}],"flex-wrap":[{flex:[`nowrap`,`wrap`,`wrap-reverse`]}],flex:[{flex:[Y,tm,`auto`,`initial`,`none`,X]}],grow:[{grow:[``,Y,Z,X]}],shrink:[{shrink:[``,Y,Z,X]}],order:[{order:[nm,`first`,`last`,`none`,Z,X]}],"grid-cols":[{"grid-cols":te()}],"col-start-end":[{col:T()}],"col-start":[{"col-start":E()}],"col-end":[{"col-end":E()}],"grid-rows":[{"grid-rows":te()}],"row-start-end":[{row:T()}],"row-start":[{"row-start":E()}],"row-end":[{"row-end":E()}],"grid-flow":[{"grid-flow":[`row`,`col`,`dense`,`row-dense`,`col-dense`]}],"auto-cols":[{"auto-cols":ne()}],"auto-rows":[{"auto-rows":ne()}],gap:[{gap:w()}],"gap-x":[{"gap-x":w()}],"gap-y":[{"gap-y":w()}],"justify-content":[{justify:[...D(),`normal`]}],"justify-items":[{"justify-items":[...re(),`normal`]}],"justify-self":[{"justify-self":[`auto`,...re()]}],"align-content":[{content:[`normal`,...D()]}],"align-items":[{items:[...re(),{baseline:[``,`last`]}]}],"align-self":[{self:[`auto`,...re(),{baseline:[``,`last`]}]}],"place-content":[{"place-content":D()}],"place-items":[{"place-items":[...re(),`baseline`]}],"place-self":[{"place-self":[`auto`,...re()]}],p:[{p:w()}],px:[{px:w()}],py:[{py:w()}],ps:[{ps:w()}],pe:[{pe:w()}],pt:[{pt:w()}],pr:[{pr:w()}],pb:[{pb:w()}],pl:[{pl:w()}],m:[{m:ie()}],mx:[{mx:ie()}],my:[{my:ie()}],ms:[{ms:ie()}],me:[{me:ie()}],mt:[{mt:ie()}],mr:[{mr:ie()}],mb:[{mb:ie()}],ml:[{ml:ie()}],"space-x":[{"space-x":w()}],"space-x-reverse":[`space-x-reverse`],"space-y":[{"space-y":w()}],"space-y-reverse":[`space-y-reverse`],size:[{size:ae()}],w:[{w:[s,`screen`,...ae()]}],"min-w":[{"min-w":[s,`screen`,`none`,...ae()]}],"max-w":[{"max-w":[s,`screen`,`none`,`prose`,{screen:[o]},...ae()]}],h:[{h:[`screen`,`lh`,...ae()]}],"min-h":[{"min-h":[`screen`,`lh`,`none`,...ae()]}],"max-h":[{"max-h":[`screen`,`lh`,...ae()]}],"font-size":[{text:[`base`,n,_m,fm]}],"font-smoothing":[`antialiased`,`subpixel-antialiased`],"font-style":[`italic`,`not-italic`],"font-weight":[{font:[r,Z,pm]}],"font-stretch":[{"font-stretch":[`ultra-condensed`,`extra-condensed`,`condensed`,`semi-condensed`,`normal`,`semi-expanded`,`expanded`,`extra-expanded`,`ultra-expanded`,rm,X]}],"font-family":[{font:[vm,X,t]}],"fvn-normal":[`normal-nums`],"fvn-ordinal":[`ordinal`],"fvn-slashed-zero":[`slashed-zero`],"fvn-figure":[`lining-nums`,`oldstyle-nums`],"fvn-spacing":[`proportional-nums`,`tabular-nums`],"fvn-fraction":[`diagonal-fractions`,`stacked-fractions`],tracking:[{tracking:[i,Z,X]}],"line-clamp":[{"line-clamp":[Y,`none`,Z,pm]}],leading:[{leading:[a,...w()]}],"list-image":[{"list-image":[`none`,Z,X]}],"list-style-position":[{list:[`inside`,`outside`]}],"list-style-type":[{list:[`disc`,`decimal`,`none`,Z,X]}],"text-alignment":[{text:[`left`,`center`,`right`,`justify`,`start`,`end`]}],"placeholder-color":[{placeholder:O()}],"text-color":[{text:O()}],"text-decoration":[`underline`,`overline`,`line-through`,`no-underline`],"text-decoration-style":[{decoration:[...k(),`wavy`]}],"text-decoration-thickness":[{decoration:[Y,`from-font`,`auto`,Z,fm]}],"text-decoration-color":[{decoration:O()}],"underline-offset":[{"underline-offset":[Y,`auto`,Z,X]}],"text-transform":[`uppercase`,`lowercase`,`capitalize`,`normal-case`],"text-overflow":[`truncate`,`text-ellipsis`,`text-clip`],"text-wrap":[{text:[`wrap`,`nowrap`,`balance`,`pretty`]}],indent:[{indent:w()}],"vertical-align":[{align:[`baseline`,`top`,`middle`,`bottom`,`text-top`,`text-bottom`,`sub`,`super`,Z,X]}],whitespace:[{whitespace:[`normal`,`nowrap`,`pre`,`pre-line`,`pre-wrap`,`break-spaces`]}],break:[{break:[`normal`,`words`,`all`,`keep`]}],wrap:[{wrap:[`break-word`,`anywhere`,`normal`]}],hyphens:[{hyphens:[`none`,`manual`,`auto`]}],content:[{content:[`none`,Z,X]}],"bg-attachment":[{bg:[`fixed`,`local`,`scroll`]}],"bg-clip":[{"bg-clip":[`border`,`padding`,`content`,`text`]}],"bg-origin":[{"bg-origin":[`border`,`padding`,`content`]}],"bg-position":[{bg:oe()}],"bg-repeat":[{bg:se()}],"bg-size":[{bg:ce()}],"bg-image":[{bg:[`none`,{linear:[{to:[`t`,`tr`,`r`,`br`,`b`,`bl`,`l`,`tl`]},nm,Z,X],radial:[``,Z,X],conic:[nm,Z,X]},xm,hm]}],"bg-color":[{bg:O()}],"gradient-from-pos":[{from:le()}],"gradient-via-pos":[{via:le()}],"gradient-to-pos":[{to:le()}],"gradient-from":[{from:O()}],"gradient-via":[{via:O()}],"gradient-to":[{to:O()}],rounded:[{rounded:ue()}],"rounded-s":[{"rounded-s":ue()}],"rounded-e":[{"rounded-e":ue()}],"rounded-t":[{"rounded-t":ue()}],"rounded-r":[{"rounded-r":ue()}],"rounded-b":[{"rounded-b":ue()}],"rounded-l":[{"rounded-l":ue()}],"rounded-ss":[{"rounded-ss":ue()}],"rounded-se":[{"rounded-se":ue()}],"rounded-ee":[{"rounded-ee":ue()}],"rounded-es":[{"rounded-es":ue()}],"rounded-tl":[{"rounded-tl":ue()}],"rounded-tr":[{"rounded-tr":ue()}],"rounded-br":[{"rounded-br":ue()}],"rounded-bl":[{"rounded-bl":ue()}],"border-w":[{border:de()}],"border-w-x":[{"border-x":de()}],"border-w-y":[{"border-y":de()}],"border-w-s":[{"border-s":de()}],"border-w-e":[{"border-e":de()}],"border-w-t":[{"border-t":de()}],"border-w-r":[{"border-r":de()}],"border-w-b":[{"border-b":de()}],"border-w-l":[{"border-l":de()}],"divide-x":[{"divide-x":de()}],"divide-x-reverse":[`divide-x-reverse`],"divide-y":[{"divide-y":de()}],"divide-y-reverse":[`divide-y-reverse`],"border-style":[{border:[...k(),`hidden`,`none`]}],"divide-style":[{divide:[...k(),`hidden`,`none`]}],"border-color":[{border:O()}],"border-color-x":[{"border-x":O()}],"border-color-y":[{"border-y":O()}],"border-color-s":[{"border-s":O()}],"border-color-e":[{"border-e":O()}],"border-color-t":[{"border-t":O()}],"border-color-r":[{"border-r":O()}],"border-color-b":[{"border-b":O()}],"border-color-l":[{"border-l":O()}],"divide-color":[{divide:O()}],"outline-style":[{outline:[...k(),`none`,`hidden`]}],"outline-offset":[{"outline-offset":[Y,Z,X]}],"outline-w":[{outline:[``,Y,_m,fm]}],"outline-color":[{outline:O()}],shadow:[{shadow:[``,`none`,u,Sm,gm]}],"shadow-color":[{shadow:O()}],"inset-shadow":[{"inset-shadow":[`none`,d,Sm,gm]}],"inset-shadow-color":[{"inset-shadow":O()}],"ring-w":[{ring:de()}],"ring-w-inset":[`ring-inset`],"ring-color":[{ring:O()}],"ring-offset-w":[{"ring-offset":[Y,fm]}],"ring-offset-color":[{"ring-offset":O()}],"inset-ring-w":[{"inset-ring":de()}],"inset-ring-color":[{"inset-ring":O()}],"text-shadow":[{"text-shadow":[`none`,f,Sm,gm]}],"text-shadow-color":[{"text-shadow":O()}],opacity:[{opacity:[Y,Z,X]}],"mix-blend":[{"mix-blend":[...fe(),`plus-darker`,`plus-lighter`]}],"bg-blend":[{"bg-blend":fe()}],"mask-clip":[{"mask-clip":[`border`,`padding`,`content`,`fill`,`stroke`,`view`]},`mask-no-clip`],"mask-composite":[{mask:[`add`,`subtract`,`intersect`,`exclude`]}],"mask-image-linear-pos":[{"mask-linear":[Y]}],"mask-image-linear-from-pos":[{"mask-linear-from":A()}],"mask-image-linear-to-pos":[{"mask-linear-to":A()}],"mask-image-linear-from-color":[{"mask-linear-from":O()}],"mask-image-linear-to-color":[{"mask-linear-to":O()}],"mask-image-t-from-pos":[{"mask-t-from":A()}],"mask-image-t-to-pos":[{"mask-t-to":A()}],"mask-image-t-from-color":[{"mask-t-from":O()}],"mask-image-t-to-color":[{"mask-t-to":O()}],"mask-image-r-from-pos":[{"mask-r-from":A()}],"mask-image-r-to-pos":[{"mask-r-to":A()}],"mask-image-r-from-color":[{"mask-r-from":O()}],"mask-image-r-to-color":[{"mask-r-to":O()}],"mask-image-b-from-pos":[{"mask-b-from":A()}],"mask-image-b-to-pos":[{"mask-b-to":A()}],"mask-image-b-from-color":[{"mask-b-from":O()}],"mask-image-b-to-color":[{"mask-b-to":O()}],"mask-image-l-from-pos":[{"mask-l-from":A()}],"mask-image-l-to-pos":[{"mask-l-to":A()}],"mask-image-l-from-color":[{"mask-l-from":O()}],"mask-image-l-to-color":[{"mask-l-to":O()}],"mask-image-x-from-pos":[{"mask-x-from":A()}],"mask-image-x-to-pos":[{"mask-x-to":A()}],"mask-image-x-from-color":[{"mask-x-from":O()}],"mask-image-x-to-color":[{"mask-x-to":O()}],"mask-image-y-from-pos":[{"mask-y-from":A()}],"mask-image-y-to-pos":[{"mask-y-to":A()}],"mask-image-y-from-color":[{"mask-y-from":O()}],"mask-image-y-to-color":[{"mask-y-to":O()}],"mask-image-radial":[{"mask-radial":[Z,X]}],"mask-image-radial-from-pos":[{"mask-radial-from":A()}],"mask-image-radial-to-pos":[{"mask-radial-to":A()}],"mask-image-radial-from-color":[{"mask-radial-from":O()}],"mask-image-radial-to-color":[{"mask-radial-to":O()}],"mask-image-radial-shape":[{"mask-radial":[`circle`,`ellipse`]}],"mask-image-radial-size":[{"mask-radial":[{closest:[`side`,`corner`],farthest:[`side`,`corner`]}]}],"mask-image-radial-pos":[{"mask-radial-at":b()}],"mask-image-conic-pos":[{"mask-conic":[Y]}],"mask-image-conic-from-pos":[{"mask-conic-from":A()}],"mask-image-conic-to-pos":[{"mask-conic-to":A()}],"mask-image-conic-from-color":[{"mask-conic-from":O()}],"mask-image-conic-to-color":[{"mask-conic-to":O()}],"mask-mode":[{mask:[`alpha`,`luminance`,`match`]}],"mask-origin":[{"mask-origin":[`border`,`padding`,`content`,`fill`,`stroke`,`view`]}],"mask-position":[{mask:oe()}],"mask-repeat":[{mask:se()}],"mask-size":[{mask:ce()}],"mask-type":[{"mask-type":[`alpha`,`luminance`]}],"mask-image":[{mask:[`none`,Z,X]}],filter:[{filter:[``,`none`,Z,X]}],blur:[{blur:pe()}],brightness:[{brightness:[Y,Z,X]}],contrast:[{contrast:[Y,Z,X]}],"drop-shadow":[{"drop-shadow":[``,`none`,p,Sm,gm]}],"drop-shadow-color":[{"drop-shadow":O()}],grayscale:[{grayscale:[``,Y,Z,X]}],"hue-rotate":[{"hue-rotate":[Y,Z,X]}],invert:[{invert:[``,Y,Z,X]}],saturate:[{saturate:[Y,Z,X]}],sepia:[{sepia:[``,Y,Z,X]}],"backdrop-filter":[{"backdrop-filter":[``,`none`,Z,X]}],"backdrop-blur":[{"backdrop-blur":pe()}],"backdrop-brightness":[{"backdrop-brightness":[Y,Z,X]}],"backdrop-contrast":[{"backdrop-contrast":[Y,Z,X]}],"backdrop-grayscale":[{"backdrop-grayscale":[``,Y,Z,X]}],"backdrop-hue-rotate":[{"backdrop-hue-rotate":[Y,Z,X]}],"backdrop-invert":[{"backdrop-invert":[``,Y,Z,X]}],"backdrop-opacity":[{"backdrop-opacity":[Y,Z,X]}],"backdrop-saturate":[{"backdrop-saturate":[Y,Z,X]}],"backdrop-sepia":[{"backdrop-sepia":[``,Y,Z,X]}],"border-collapse":[{border:[`collapse`,`separate`]}],"border-spacing":[{"border-spacing":w()}],"border-spacing-x":[{"border-spacing-x":w()}],"border-spacing-y":[{"border-spacing-y":w()}],"table-layout":[{table:[`auto`,`fixed`]}],caption:[{caption:[`top`,`bottom`]}],transition:[{transition:[``,`all`,`colors`,`opacity`,`shadow`,`transform`,`none`,Z,X]}],"transition-behavior":[{transition:[`normal`,`discrete`]}],duration:[{duration:[Y,`initial`,Z,X]}],ease:[{ease:[`linear`,`initial`,_,Z,X]}],delay:[{delay:[Y,Z,X]}],animate:[{animate:[`none`,v,Z,X]}],backface:[{backface:[`hidden`,`visible`]}],perspective:[{perspective:[h,Z,X]}],"perspective-origin":[{"perspective-origin":x()}],rotate:[{rotate:me()}],"rotate-x":[{"rotate-x":me()}],"rotate-y":[{"rotate-y":me()}],"rotate-z":[{"rotate-z":me()}],scale:[{scale:he()}],"scale-x":[{"scale-x":he()}],"scale-y":[{"scale-y":he()}],"scale-z":[{"scale-z":he()}],"scale-3d":[`scale-3d`],skew:[{skew:ge()}],"skew-x":[{"skew-x":ge()}],"skew-y":[{"skew-y":ge()}],transform:[{transform:[Z,X,``,`none`,`gpu`,`cpu`]}],"transform-origin":[{origin:x()}],"transform-style":[{transform:[`3d`,`flat`]}],translate:[{translate:_e()}],"translate-x":[{"translate-x":_e()}],"translate-y":[{"translate-y":_e()}],"translate-z":[{"translate-z":_e()}],"translate-none":[`translate-none`],accent:[{accent:O()}],appearance:[{appearance:[`none`,`auto`]}],"caret-color":[{caret:O()}],"color-scheme":[{scheme:[`normal`,`dark`,`light`,`light-dark`,`only-dark`,`only-light`]}],cursor:[{cursor:[`auto`,`default`,`pointer`,`wait`,`text`,`move`,`help`,`not-allowed`,`none`,`context-menu`,`progress`,`cell`,`crosshair`,`vertical-text`,`alias`,`copy`,`no-drop`,`grab`,`grabbing`,`all-scroll`,`col-resize`,`row-resize`,`n-resize`,`e-resize`,`s-resize`,`w-resize`,`ne-resize`,`nw-resize`,`se-resize`,`sw-resize`,`ew-resize`,`ns-resize`,`nesw-resize`,`nwse-resize`,`zoom-in`,`zoom-out`,Z,X]}],"field-sizing":[{"field-sizing":[`fixed`,`content`]}],"pointer-events":[{"pointer-events":[`auto`,`none`]}],resize:[{resize:[`none`,``,`y`,`x`]}],"scroll-behavior":[{scroll:[`auto`,`smooth`]}],"scroll-m":[{"scroll-m":w()}],"scroll-mx":[{"scroll-mx":w()}],"scroll-my":[{"scroll-my":w()}],"scroll-ms":[{"scroll-ms":w()}],"scroll-me":[{"scroll-me":w()}],"scroll-mt":[{"scroll-mt":w()}],"scroll-mr":[{"scroll-mr":w()}],"scroll-mb":[{"scroll-mb":w()}],"scroll-ml":[{"scroll-ml":w()}],"scroll-p":[{"scroll-p":w()}],"scroll-px":[{"scroll-px":w()}],"scroll-py":[{"scroll-py":w()}],"scroll-ps":[{"scroll-ps":w()}],"scroll-pe":[{"scroll-pe":w()}],"scroll-pt":[{"scroll-pt":w()}],"scroll-pr":[{"scroll-pr":w()}],"scroll-pb":[{"scroll-pb":w()}],"scroll-pl":[{"scroll-pl":w()}],"snap-align":[{snap:[`start`,`end`,`center`,`align-none`]}],"snap-stop":[{snap:[`normal`,`always`]}],"snap-type":[{snap:[`none`,`x`,`y`,`both`]}],"snap-strictness":[{snap:[`mandatory`,`proximity`]}],touch:[{touch:[`auto`,`none`,`manipulation`]}],"touch-x":[{"touch-pan":[`x`,`left`,`right`]}],"touch-y":[{"touch-pan":[`y`,`up`,`down`]}],"touch-pz":[`touch-pinch-zoom`],select:[{select:[`none`,`text`,`all`,`auto`]}],"will-change":[{"will-change":[`auto`,`scroll`,`contents`,`transform`,Z,X]}],fill:[{fill:[`none`,...O()]}],"stroke-w":[{stroke:[Y,_m,fm,pm]}],stroke:[{stroke:[`none`,...O()]}],"forced-color-adjust":[{"forced-color-adjust":[`auto`,`none`]}]},conflictingClassGroups:{overflow:[`overflow-x`,`overflow-y`],overscroll:[`overscroll-x`,`overscroll-y`],inset:[`inset-x`,`inset-y`,`start`,`end`,`top`,`right`,`bottom`,`left`],"inset-x":[`right`,`left`],"inset-y":[`top`,`bottom`],flex:[`basis`,`grow`,`shrink`],gap:[`gap-x`,`gap-y`],p:[`px`,`py`,`ps`,`pe`,`pt`,`pr`,`pb`,`pl`],px:[`pr`,`pl`],py:[`pt`,`pb`],m:[`mx`,`my`,`ms`,`me`,`mt`,`mr`,`mb`,`ml`],mx:[`mr`,`ml`],my:[`mt`,`mb`],size:[`w`,`h`],"font-size":[`leading`],"fvn-normal":[`fvn-ordinal`,`fvn-slashed-zero`,`fvn-figure`,`fvn-spacing`,`fvn-fraction`],"fvn-ordinal":[`fvn-normal`],"fvn-slashed-zero":[`fvn-normal`],"fvn-figure":[`fvn-normal`],"fvn-spacing":[`fvn-normal`],"fvn-fraction":[`fvn-normal`],"line-clamp":[`display`,`overflow`],rounded:[`rounded-s`,`rounded-e`,`rounded-t`,`rounded-r`,`rounded-b`,`rounded-l`,`rounded-ss`,`rounded-se`,`rounded-ee`,`rounded-es`,`rounded-tl`,`rounded-tr`,`rounded-br`,`rounded-bl`],"rounded-s":[`rounded-ss`,`rounded-es`],"rounded-e":[`rounded-se`,`rounded-ee`],"rounded-t":[`rounded-tl`,`rounded-tr`],"rounded-r":[`rounded-tr`,`rounded-br`],"rounded-b":[`rounded-br`,`rounded-bl`],"rounded-l":[`rounded-tl`,`rounded-bl`],"border-spacing":[`border-spacing-x`,`border-spacing-y`],"border-w":[`border-w-x`,`border-w-y`,`border-w-s`,`border-w-e`,`border-w-t`,`border-w-r`,`border-w-b`,`border-w-l`],"border-w-x":[`border-w-r`,`border-w-l`],"border-w-y":[`border-w-t`,`border-w-b`],"border-color":[`border-color-x`,`border-color-y`,`border-color-s`,`border-color-e`,`border-color-t`,`border-color-r`,`border-color-b`,`border-color-l`],"border-color-x":[`border-color-r`,`border-color-l`],"border-color-y":[`border-color-t`,`border-color-b`],translate:[`translate-x`,`translate-y`,`translate-none`],"translate-none":[`translate`,`translate-x`,`translate-y`,`translate-z`],"scroll-m":[`scroll-mx`,`scroll-my`,`scroll-ms`,`scroll-me`,`scroll-mt`,`scroll-mr`,`scroll-mb`,`scroll-ml`],"scroll-mx":[`scroll-mr`,`scroll-ml`],"scroll-my":[`scroll-mt`,`scroll-mb`],"scroll-p":[`scroll-px`,`scroll-py`,`scroll-ps`,`scroll-pe`,`scroll-pt`,`scroll-pr`,`scroll-pb`,`scroll-pl`],"scroll-px":[`scroll-pr`,`scroll-pl`],"scroll-py":[`scroll-pt`,`scroll-pb`],touch:[`touch-x`,`touch-y`,`touch-pz`],"touch-x":[`touch`],"touch-y":[`touch`],"touch-pz":[`touch`]},conflictingClassGroupModifiers:{"font-size":[`leading`]},orderSensitiveModifiers:[`*`,`**`,`after`,`backdrop`,`before`,`details-content`,`file`,`first-letter`,`first-line`,`marker`,`placeholder`,`selection`]}},Nm=Gp(Mm);function Pm(...e){return Nm(Cp(e))}const Fm=e=>typeof e==`boolean`?`${e}`:e===0?`0`:e,Im=Cp,Lm=(e,t)=>n=>{var r;if(t?.variants==null)return Im(e,n?.class,n?.className);let{variants:i,defaultVariants:a}=t,o=Object.keys(i).map(e=>{let t=n?.[e],r=a?.[e];if(t===null)return null;let o=Fm(t)||Fm(r);return i[e][o]}),s=n&&Object.entries(n).reduce((e,t)=>{let[n,r]=t;return r===void 0||(e[n]=r),e},{}),c=t==null?void 0:(r=t.compoundVariants)?.reduce((e,t)=>{let{class:n,className:r,...i}=t;return Object.entries(i).every(e=>{let[t,n]=e;return Array.isArray(n)?n.includes({...a,...s}[t]):{...a,...s}[t]===n})?[...e,n,r]:e},[]);return Im(e,o,c,n?.class,n?.className)};var Rm=z({__name:`Button`,props:{variant:{},size:{},class:{},asChild:{type:Boolean},as:{default:`button`}},setup(e){let t=Lm(`inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive cursor-pointer`,{variants:{variant:{default:`bg-primary text-primary-foreground shadow-xs hover:bg-primary/90`,destructive:`bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60`,outline:`border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50`,secondary:`bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80`,ghost:`hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50`,link:`text-primary underline-offset-4 hover:underline`},size:{default:`h-9 px-4 py-2 has-[>svg]:px-3`,sm:`h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5`,lg:`h-10 rounded-md px-6 has-[>svg]:px-4`,icon:`size-9`}},defaultVariants:{variant:`default`,size:`default`}}),n=e;return(e,r)=>(H(),W(I(bf),{"data-slot":`button`,as:e.as,"as-child":e.asChild,class:j(I(Pm)(I(t)({variant:e.variant,size:e.size}),n.class))},{default:R(()=>[ro(e.$slots,`default`)]),_:3},8,[`as`,`as-child`,`class`]))}}),zm=Rm;function Bm(e){let t=!1,n,r=nt(!0);return(...i)=>(t||(n=r.run(()=>e(...i)),t=!0),n)}function Vm(e){if(!P(e))return bn(e);let t=new Proxy({},{get(t,n,r){return I(Reflect.get(e.value,n,r))},set(t,n,r){return P(e.value[n])&&!P(r)?e.value[n].value=r:e.value[n]=r,!0},deleteProperty(t,n){return Reflect.deleteProperty(e.value,n)},has(t,n){return Reflect.has(e.value,n)},ownKeys(){return Object.keys(e.value)},getOwnPropertyDescriptor(){return{enumerable:!0,configurable:!0}}});return bn(t)}function Hm(e){return Vm(J(e))}function Um(e,...t){let n=t.flat(),r=n[0];return Hm(()=>typeof r==`function`?Object.fromEntries(Object.entries(Vn(e)).filter(([e,t])=>!r(In(t),e))):Object.fromEntries(Object.entries(Vn(e)).filter(e=>!n.includes(e[0]))))}const Wm=typeof window<`u`&&typeof document<`u`,Gm=typeof WorkerGlobalScope<`u`&&globalThis instanceof WorkerGlobalScope,Km=e=>e!==void 0;function qm(e){let t=Object.create(null);return n=>{let r=t[n];return r||(t[n]=e(n))}}const Jm=/\B([A-Z])/g,Ym=qm(e=>e.replace(Jm,`-$1`).toLowerCase()),Xm=/-(\w)/g,Zm=qm(e=>e.replace(Xm,(e,t)=>t?t.toUpperCase():``)),Qm=Wm?window.document:void 0,$m=Wm?window.navigator:void 0,eh=Wm?window.location:void 0,th=Symbol(`vueuse-ssr-width`);function nh(e){return JSON.parse(JSON.stringify(e))}const rh=[{max:6e4,value:1e3,name:`second`},{max:276e4,value:6e4,name:`minute`},{max:72e6,value:36e5,name:`hour`},{max:5184e5,value:864e5,name:`day`},{max:24192e5,value:6048e5,name:`week`},{max:28512e6,value:2592e6,name:`month`},{max:1/0,value:31536e6,name:`year`}];function ih(e,t,n,r={}){var i,a,o;let{clone:s=!1,passive:c=!1,eventName:l,deep:u=!1,defaultValue:d,shouldEmit:f}=r,p=ul(),m=n||p?.emit||(i=p?.$emit)?.bind(p)||(o=(a=p?.proxy)?.$emit)?.bind(p?.proxy),h=l;t||=`modelValue`,h||=`update:${t.toString()}`;let g=e=>s?typeof s==`function`?s(e):nh(e):e,_=()=>Km(e[t])?g(e[t]):d,v=e=>{f?f(e)&&m(h,e):m(h,e)};if(c){let n=_(),r=F(n),i=!1;return $s(()=>e[t],e=>{i||(i=!0,r.value=g(e),Dr(()=>i=!1))}),$s(r,n=>{!i&&(n!==e[t]||u)&&v(n)},{deep:u}),r}else return J({get(){return _()},set(e){v(e)}})}var ah=z({__name:`Input`,props:{defaultValue:{},modelValue:{},class:{}},emits:[`update:modelValue`],setup(e,{emit:t}){let n=e,r=t,i=ih(n,`modelValue`,r,{passive:!0,defaultValue:n.defaultValue});return(e,t)=>_i((H(),U(`input`,{"onUpdate:modelValue":t[0]||=e=>P(i)?i.value=e:null,"data-slot":`input`,class:j(I(Pm)(`file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm`,`focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]`,`aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive`,n.class))},null,2)),[[Ad,I(i)]])}}),oh=ah,sh=z({__name:`Label`,props:{for:{},asChild:{type:Boolean},as:{},class:{}},setup(e){let t=e,n=Um(t,`class`);return(e,r)=>(H(),W(I(pp),il({"data-slot":`label`},I(n),{class:I(Pm)(`flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50`,t.class)}),{default:R(()=>[ro(e.$slots,`default`)]),_:3},16,[`class`]))}}),ch=sh,lh=z({__name:`Textarea`,props:{class:{},defaultValue:{},modelValue:{}},emits:[`update:modelValue`],setup(e,{emit:t}){let n=e,r=t,i=ih(n,`modelValue`,r,{passive:!0,defaultValue:n.defaultValue});return(e,t)=>_i((H(),U(`textarea`,{"onUpdate:modelValue":t[0]||=e=>P(i)?i.value=e:null,"data-slot":`textarea`,class:j(I(Pm)(`border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm`,n.class))},null,2)),[[Ad,I(i)]])}}),uh=lh;
/**
* @license lucide-vue-next v0.525.0 - ISC
*
* This source code is licensed under the ISC license.
* See the LICENSE file in the root directory of this source tree.
*/
const dh=e=>e.replace(/([a-z0-9])([A-Z])/g,`$1-$2`).toLowerCase(),fh=e=>e.replace(/^([A-Z])|[\s-_]+(\w)/g,(e,t,n)=>n?n.toUpperCase():t.toLowerCase()),ph=e=>{let t=fh(e);return t.charAt(0).toUpperCase()+t.slice(1)},mh=(...e)=>e.filter((e,t,n)=>!!e&&e.trim()!==``&&n.indexOf(e)===t).join(` `).trim();
/**
* @license lucide-vue-next v0.525.0 - ISC
*
* This source code is licensed under the ISC license.
* See the LICENSE file in the root directory of this source tree.
*/
var hh={xmlns:`http://www.w3.org/2000/svg`,width:24,height:24,viewBox:`0 0 24 24`,fill:`none`,stroke:`currentColor`,"stroke-width":2,"stroke-linecap":`round`,"stroke-linejoin":`round`};const gh=({size:e,strokeWidth:t=2,absoluteStrokeWidth:n,color:r,iconNode:i,name:a,class:o,...s},{slots:c})=>Il(`svg`,{...hh,width:e||hh.width,height:e||hh.height,stroke:r||hh.stroke,"stroke-width":n?Number(t)*24/Number(e):t,class:mh(`lucide`,...a?[`lucide-${dh(ph(a))}-icon`,`lucide-${dh(a)}`]:[`lucide-icon`]),...s},[...i.map(e=>Il(...e)),...c.default?[c.default()]:[]]),Q=(e,t)=>(n,{slots:r})=>Il(gh,{...n,iconNode:t,name:e},r),_h=Q(`bot`,[[`path`,{d:`M12 8V4H8`,key:`hb8ula`}],[`rect`,{width:`16`,height:`12`,x:`4`,y:`8`,rx:`2`,key:`enze0r`}],[`path`,{d:`M2 14h2`,key:`vft8re`}],[`path`,{d:`M20 14h2`,key:`4cs60a`}],[`path`,{d:`M15 13v2`,key:`1xurst`}],[`path`,{d:`M9 13v2`,key:`rq6x2g`}]]),vh=Q(`brain`,[[`path`,{d:`M12 5a3 3 0 1 0-5.997.125 4 4 0 0 0-2.526 5.77 4 4 0 0 0 .556 6.588A4 4 0 1 0 12 18Z`,key:`l5xja`}],[`path`,{d:`M12 5a3 3 0 1 1 5.997.125 4 4 0 0 1 2.526 5.77 4 4 0 0 1-.556 6.588A4 4 0 1 1 12 18Z`,key:`ep3f8r`}],[`path`,{d:`M15 13a4.5 4.5 0 0 1-3-4 4.5 4.5 0 0 1-3 4`,key:`1p4c4q`}],[`path`,{d:`M17.599 6.5a3 3 0 0 0 .399-1.375`,key:`tmeiqw`}],[`path`,{d:`M6.003 5.125A3 3 0 0 0 6.401 6.5`,key:`105sqy`}],[`path`,{d:`M3.477 10.896a4 4 0 0 1 .585-.396`,key:`ql3yin`}],[`path`,{d:`M19.938 10.5a4 4 0 0 1 .585.396`,key:`1qfode`}],[`path`,{d:`M6 18a4 4 0 0 1-1.967-.516`,key:`2e4loj`}],[`path`,{d:`M19.967 17.484A4 4 0 0 1 18 18`,key:`159ez6`}]]),yh=Q(`check`,[[`path`,{d:`M20 6 9 17l-5-5`,key:`1gmf2c`}]]),bh=Q(`chevron-down`,[[`path`,{d:`m6 9 6 6 6-6`,key:`qrunsl`}]]),xh=Q(`chevron-right`,[[`path`,{d:`m9 18 6-6-6-6`,key:`mthhwq`}]]),Sh=Q(`circle-check-big`,[[`path`,{d:`M21.801 10A10 10 0 1 1 17 3.335`,key:`yps3ct`}],[`path`,{d:`m9 11 3 3L22 4`,key:`1pflzl`}]]),Ch=Q(`circle-check`,[[`circle`,{cx:`12`,cy:`12`,r:`10`,key:`1mglay`}],[`path`,{d:`m9 12 2 2 4-4`,key:`dzmm74`}]]),wh=Q(`circle-x`,[[`circle`,{cx:`12`,cy:`12`,r:`10`,key:`1mglay`}],[`path`,{d:`m15 9-6 6`,key:`1uzhvr`}],[`path`,{d:`m9 9 6 6`,key:`z0biqf`}]]),Th=Q(`circle`,[[`circle`,{cx:`12`,cy:`12`,r:`10`,key:`1mglay`}]]),Eh=Q(`clock`,[[`path`,{d:`M12 6v6l4 2`,key:`mmk7yg`}],[`circle`,{cx:`12`,cy:`12`,r:`10`,key:`1mglay`}]]),Dh=Q(`code`,[[`path`,{d:`m16 18 6-6-6-6`,key:`eg8j8`}],[`path`,{d:`m8 6-6 6 6 6`,key:`ppft3o`}]]),Oh=Q(`download`,[[`path`,{d:`M12 15V3`,key:`m9g1x1`}],[`path`,{d:`M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4`,key:`ih7n3h`}],[`path`,{d:`m7 10 5 5 5-5`,key:`brsn70`}]]),kh=Q(`eye-off`,[[`path`,{d:`M10.733 5.076a10.744 10.744 0 0 1 11.205 6.575 1 1 0 0 1 0 .696 10.747 10.747 0 0 1-1.444 2.49`,key:`ct8e1f`}],[`path`,{d:`M14.084 14.158a3 3 0 0 1-4.242-4.242`,key:`151rxh`}],[`path`,{d:`M17.479 17.499a10.75 10.75 0 0 1-15.417-5.151 1 1 0 0 1 0-.696 10.75 10.75 0 0 1 4.446-5.143`,key:`13bj9a`}],[`path`,{d:`m2 2 20 20`,key:`1ooewy`}]]),Ah=Q(`eye`,[[`path`,{d:`M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0`,key:`1nclc0`}],[`circle`,{cx:`12`,cy:`12`,r:`3`,key:`1v7zrd`}]]),jh=Q(`globe`,[[`circle`,{cx:`12`,cy:`12`,r:`10`,key:`1mglay`}],[`path`,{d:`M12 2a14.5 14.5 0 0 0 0 20 14.5 14.5 0 0 0 0-20`,key:`13o1zl`}],[`path`,{d:`M2 12h20`,key:`9i4pu4`}]]),Mh=Q(`history`,[[`path`,{d:`M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8`,key:`1357e3`}],[`path`,{d:`M3 3v5h5`,key:`1xhq8a`}],[`path`,{d:`M12 7v5l4 2`,key:`1fdv2h`}]]),Nh=Q(`house`,[[`path`,{d:`M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8`,key:`5wwlr5`}],[`path`,{d:`M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z`,key:`1d0kgt`}]]),Ph=Q(`info`,[[`circle`,{cx:`12`,cy:`12`,r:`10`,key:`1mglay`}],[`path`,{d:`M12 16v-4`,key:`1dtifu`}],[`path`,{d:`M12 8h.01`,key:`e9boi3`}]]),Fh=Q(`key`,[[`path`,{d:`m15.5 7.5 2.3 2.3a1 1 0 0 0 1.4 0l2.1-2.1a1 1 0 0 0 0-1.4L19 4`,key:`g0fldk`}],[`path`,{d:`m21 2-9.6 9.6`,key:`1j0ho8`}],[`circle`,{cx:`7.5`,cy:`15.5`,r:`5.5`,key:`yqb3hr`}]]),Ih=Q(`loader-circle`,[[`path`,{d:`M21 12a9 9 0 1 1-6.219-8.56`,key:`13zald`}]]),Lh=Q(`message-square`,[[`path`,{d:`M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z`,key:`1lielz`}]]),Rh=Q(`play`,[[`polygon`,{points:`6 3 20 12 6 21 6 3`,key:`1oa8hb`}]]),zh=Q(`plus`,[[`path`,{d:`M5 12h14`,key:`1ays0h`}],[`path`,{d:`M12 5v14`,key:`s699le`}]]),Bh=Q(`power`,[[`path`,{d:`M12 2v10`,key:`mnfbl`}],[`path`,{d:`M18.4 6.6a9 9 0 1 1-12.77.04`,key:`obofu9`}]]),Vh=Q(`rotate-ccw`,[[`path`,{d:`M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8`,key:`1357e3`}],[`path`,{d:`M3 3v5h5`,key:`1xhq8a`}]]),Hh=Q(`settings`,[[`path`,{d:`M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z`,key:`1qme2f`}],[`circle`,{cx:`12`,cy:`12`,r:`3`,key:`1v7zrd`}]]),Uh=Q(`shield`,[[`path`,{d:`M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z`,key:`oel41y`}]]),Wh=Q(`trash-2`,[[`path`,{d:`M3 6h18`,key:`d0wm0j`}],[`path`,{d:`M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6`,key:`4alrt4`}],[`path`,{d:`M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2`,key:`v07s0e`}],[`line`,{x1:`10`,x2:`10`,y1:`11`,y2:`17`,key:`1uufr5`}],[`line`,{x1:`14`,x2:`14`,y1:`11`,y2:`17`,key:`xtxkd`}]]),Gh=Q(`triangle-alert`,[[`path`,{d:`m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3`,key:`wmoenq`}],[`path`,{d:`M12 9v4`,key:`juzpu7`}],[`path`,{d:`M12 17h.01`,key:`p32p05`}]]),Kh=Q(`wifi-off`,[[`path`,{d:`M12 20h.01`,key:`zekei9`}],[`path`,{d:`M8.5 16.429a5 5 0 0 1 7 0`,key:`1bycff`}],[`path`,{d:`M5 12.859a10 10 0 0 1 5.17-2.69`,key:`1dl1wf`}],[`path`,{d:`M19 12.859a10 10 0 0 0-2.007-1.523`,key:`4k23kn`}],[`path`,{d:`M2 8.82a15 15 0 0 1 4.177-2.643`,key:`1grhjp`}],[`path`,{d:`M22 8.82a15 15 0 0 0-11.288-3.764`,key:`z3jwby`}],[`path`,{d:`m2 2 20 20`,key:`1ooewy`}]]),qh=Q(`wifi`,[[`path`,{d:`M12 20h.01`,key:`zekei9`}],[`path`,{d:`M2 8.82a15 15 0 0 1 20 0`,key:`dnpr2z`}],[`path`,{d:`M5 12.859a10 10 0 0 1 14 0`,key:`1x1e6c`}],[`path`,{d:`M8.5 16.429a5 5 0 0 1 7 0`,key:`1bycff`}]]),Jh=Q(`zap`,[[`path`,{d:`M4 14a1 1 0 0 1-.78-1.63l9.9-10.2a.5.5 0 0 1 .86.46l-1.92 6.02A1 1 0 0 0 13 10h7a1 1 0 0 1 .78 1.63l-9.9 10.2a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14z`,key:`1xq2db`}]]),Yh={key:0,class:`absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-primary via-primary/80 to-primary`},Xh={class:`space-y-3`},Zh={class:`flex items-start justify-between gap-3`},Qh={class:`space-y-2 min-w-0 flex-1`},$h={class:`flex items-center gap-2`},eg={class:`text-xs font-medium text-muted-foreground`},tg={class:`flex items-center gap-1`},ng={key:1,class:`flex items-center gap-2 text-sm text-primary font-semibold`},rg={key:0,class:`inline-flex items-center gap-1.5 px-3 py-1.5 bg-gradient-to-r from-primary to-primary/80 text-primary-foreground text-xs font-semibold rounded-full shadow-md`};var ig=z({__name:`ModelCard`,props:{model:{},index:{},isActive:{type:Boolean}},emits:[`set-active`,`remove`,`show-form`],setup(e,{emit:t}){let n=e,r=t,i=()=>{r(`set-active`,n.model.modelId||``)},a=()=>{r(`remove`,n.index)},o=()=>{r(`show-form`,n.index)},s=J(()=>{let e=n.model.provider;switch(e){case`google`:return`Google`;case`openai`:return`OpenAI`;case`anthropic`:return`Anthropic`;case`bedrock`:return`Bedrock`;default:return e}}),c=J(()=>{let e=n.model.provider;switch(e){case`google`:return`bg-blue-500`;case`openai`:return`bg-green-500`;case`anthropic`:return`bg-orange-500`;case`bedrock`:return`bg-purple-500`;default:return`bg-gray-500`}});return(e,t)=>(H(),U(`div`,{class:j([`rounded-lg border transition-all duration-300 p-4 relative overflow-hidden`,e.isActive?`border-primary bg-gradient-to-br from-primary/10 via-primary/5 to-transparent ring-2 ring-primary/30 transform scale-[1.02]`:`border-border bg-card hover:border-primary/50 hover:shadow-md hover:transform hover:scale-[1.01]`])},[e.isActive?(H(),U(`div`,Yh)):el(``,!0),G(`div`,Xh,[G(`div`,Zh,[G(`div`,Qh,[G(`div`,$h,[G(`div`,{class:j([`w-3 h-3 rounded-full`,c.value])},null,2),G(`span`,eg,Xe(s.value),1)]),G(`h3`,{class:j([`text-sm font-medium m-0 break-words transition-colors duration-300`,e.isActive?`text-primary font-semibold`:`text-foreground`])},Xe(e.model.modelId||`New Model`),3)]),G(`div`,tg,[K(zm,{variant:`ghost`,size:`sm`,onClick:o,class:`p-2 text-muted-foreground hover:text-foreground hover:bg-secondary rounded transition-colors`,title:`Configure Model`},{default:R(()=>[K(I(Hh),{class:`w-4 h-4`})]),_:1})])]),G(`div`,{class:j([`flex items-center justify-between gap-2 pt-3 border-t transition-all duration-300`,e.isActive?`border-primary/30`:`border-border`])},[e.isActive?(H(),U(`div`,ng,[e.isActive?(H(),U(`div`,rg,[K(I(yh),{class:`w-3.5 h-3.5`}),t[1]||=q(` Active Model `)])):el(``,!0)])):(H(),W(zm,{key:0,onClick:i,class:`px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-all duration-300 font-medium text-sm hover:shadow-md hover:scale-105`},{default:R(()=>t[0]||=[q(` Set Active `)]),_:1,__:[0]}))],2)])],2))}}),ag=ig;const og={class:`embedded-app-root max-w-4xl mx-auto space-y-8`},sg={class:`bg-card rounded-xl border border-border p-6 space-y-4`},cg={class:`flex items-start gap-3`},lg={class:`p-2 bg-primary/10 rounded-lg`},ug={class:`space-y-4`},dg={class:`relative`},fg={class:`absolute right-3 top-1/2 -translate-y-1/2 flex items-center gap-2`},pg={key:0,class:`flex items-center gap-2 p-3 bg-green-500/10 border border-green-500/20 rounded-lg`},mg={key:1,class:`flex items-center gap-2 p-3 bg-red-500/10 border border-red-500/20 rounded-lg`},hg={class:`flex items-start gap-2 p-3 bg-secondary rounded-lg`},gg={class:`bg-card rounded-xl border border-border p-6 space-y-4`},_g={class:`flex items-start gap-3`},vg={class:`p-2 bg-primary/10 rounded-lg`},yg={class:`space-y-4`},bg={class:`space-y-2`},xg={class:`flex-1`},Sg={class:`flex items-center gap-2`},Cg={class:`text-sm text-muted-foreground mt-0.5`},wg={class:`flex items-center gap-3`},Tg={class:`bg-card rounded-xl border border-border p-6 space-y-4`},Eg={class:`flex items-start gap-3`},Dg={class:`p-2 bg-primary/10 rounded-lg`},Og={class:`space-y-6`},kg={class:`space-y-4`},Ag={class:`flex flex-wrap gap-3`},jg={class:`font-medium`},Mg={class:`grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4`},Ng={key:0,class:`bg-card rounded-xl border border-border p-6 space-y-4`},Pg={class:`flex items-start justify-between gap-3`},Fg={class:`flex items-start gap-3`},Ig={class:`p-2 bg-primary/10 rounded-lg`},Lg={class:`flex-1 space-y-2`},Rg={class:`text-muted-foreground text-sm`},zg={class:`space-y-6`},Bg={class:`space-y-4`},Vg={class:`grid grid-cols-1 md:grid-cols-2 gap-4`},Hg={class:`space-y-2`},Ug={class:`space-y-2`},Wg={class:`space-y-4`},Gg={class:`grid grid-cols-1 md:grid-cols-3 gap-4`},Kg={class:`space-y-2`},qg={class:`space-y-2`},Jg={class:`space-y-2`},Yg={class:`space-y-4`},Xg={key:0,class:`space-y-2`},Zg={key:1,class:`grid grid-cols-1 md:grid-cols-2 gap-4`},Qg={class:`space-y-2`},$g={class:`space-y-2`},e_={class:`space-y-2 md:col-span-2`},t_={key:2,class:`space-y-2`},n_={key:3,class:`grid grid-cols-1 md:grid-cols-2 gap-4`},r_={class:`space-y-2`},i_={class:`space-y-2`},a_={class:`space-y-2 md:col-span-2`},o_={class:`flex justify-between items-center pt-4 border-t border-border`},s_={class:`flex gap-2`},c_={class:`space-y-4`},l_={class:`space-y-2`},u_={class:`flex justify-end`};var d_=z({__name:`Setting`,setup(e){let t=$o(`useAiPlugin`),n=F({socketAddress:``,models:[],activeModelId:``,systemPrompt:``,debug:!1,licenseKey:``}),r=e=>{if(typeof structuredClone<`u`)try{return structuredClone(e)}catch(e){console.warn(`structuredClone failed, falling back to JSON method:`,e)}try{return JSON.parse(JSON.stringify(e))}catch(t){return console.error(`Failed to clone settings:`,t),{...e}}},i=F(``),a=F(``),o=F(!1),s=F(`disconnected`),c=F(null),l=F(``),u=F(null),d=F(!1),f=[];Ra(()=>{n.value=r(t.settings),s.value=t.getSocketConnectionStatus(),p()}),Ha(()=>{f.forEach(e=>{t.events.offref(e)}),f.length=0});let p=()=>{let e=t.events.on(`socket:status-changed`,e=>{s.value=e.status,l.value=e.error||``,c.value=e.timestamp||null});f.push(e);let n=t.events.on(`socket:connected`,e=>{s.value=`connected`,c.value=new Date,l.value=``});f.push(n);let r=t.events.on(`socket:disconnected`,e=>{s.value=`disconnected`,l.value=e||``,c.value=null});f.push(r);let i=t.events.on(`socket:connecting`,e=>{s.value=`connecting`,l.value=``});f.push(i);let a=t.events.on(`socket:error`,e=>{s.value=`error`,l.value=e});f.push(a);let o=t.events.on(`socket:reconnecting`,e=>{s.value=`reconnecting`,l.value=`Reconnection attempt #${e}`});f.push(o)},m=async()=>{if(!n.value.socketAddress.trim()){l.value=`Socket address is required!`,s.value=`error`;return}await w(),t.events.trigger(`socket:connect-request`,n.value.socketAddress)},h=()=>{t.events.trigger(`socket:disconnect-request`)},g=async()=>{t.events.trigger(`socket:reconnect-request`)},_=async()=>{await w(),s.value===`connected`&&g()},v=J(()=>{switch(s.value){case`connected`:return{icon:qh,color:`text-green-500`,bgColor:`bg-green-500/10`,borderColor:`border-green-500/20`,label:`Connected`,description:c.value?`Connected at ${c.value.toLocaleTimeString()}`:`Successfully connected to server`};case`connecting`:return{icon:Ih,color:`text-blue-500`,bgColor:`bg-blue-500/10`,borderColor:`border-blue-500/20`,label:`Connecting...`,description:`Establishing connection to server`};case`reconnecting`:return{icon:Vh,color:`text-yellow-500`,bgColor:`bg-yellow-500/10`,borderColor:`border-yellow-500/20`,label:`Reconnecting...`,description:l.value||`Attempting to reconnect to server`};case`error`:return{icon:Gh,color:`text-red-500`,bgColor:`bg-red-500/10`,borderColor:`border-red-500/20`,label:`Connection Error`,description:l.value||`Failed to connect to server`};default:return{icon:Kh,color:`text-muted-foreground`,bgColor:`bg-secondary`,borderColor:`border-border`,label:`Disconnected`,description:`Not connected to server`}}}),y=[{name:`Google`,icon:jh,color:`bg-blue-500`},{name:`OpenAI`,icon:vh,color:`bg-green-500`},{name:`Anthropic`,icon:Uh,color:`bg-orange-500`},{name:`Bedrock`,icon:Jh,color:`bg-purple-500`}],b=e=>{let t=`${e.toLowerCase()}-${Date.now()}`,n={internalId:`model_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,provider:e.toLowerCase(),modelId:``,color:`#4285F4`,temperature:.7,topK:40,topP:.9};switch(e){case`Google`:return{...n,provider:`google`,modelId:`gemini-pro`,apiKey:``};case`OpenAI`:return{...n,provider:`openai`,modelId:`gpt-4`,apiKey:``,organization:``,baseUrl:``};case`Anthropic`:return{...n,provider:`anthropic`,modelId:`claude-3-sonnet`,apiKey:``};case`Bedrock`:return{...n,provider:`bedrock`,modelId:`anthropic.claude-3-sonnet`,accessKeyId:``,secretAccessKey:``,region:`us-east-1`,modelArn:``};default:throw Error(`Unknown provider: ${e}`)}},x=e=>{let t=b(e),i=r(t);n.value.models.unshift(i)},S=e=>{let t=n.value.models[e];n.value.models.splice(e,1),t.modelId===n.value.activeModelId&&n.value.models.length>0&&(n.value.activeModelId=n.value.models[0].modelId)},C=e=>{n.value.activeModelId=e,n.value.models.forEach(t=>{`active`in t&&(t.active=t.modelId===e)})},w=async()=>{let e=r(n.value);Object.assign(t.settings,e),await t.saveSettings()},ee=(e,t)=>{let i=r(t);n.value.models[e]=i,w(),T()},te=e=>{u.value=e,d.value=!0},T=()=>{u.value=null,d.value=!1},E=J(()=>u.value!==null&&n.value.models[u.value]?n.value.models[u.value]:null);return(e,t)=>(H(),U(`div`,og,[G(`div`,sg,[G(`div`,cg,[G(`div`,lg,[K(I(Fh),{class:`w-5 h-5 text-primary`})]),t[19]||=G(`div`,{class:`flex-1 space-y-2`},[G(`h2`,{class:`text-xl font-semibold text-foreground`},`License Key`),G(`p`,{class:`text-muted-foreground text-sm`},` Enter your license key to activate premium features and unlock all AI models `)],-1)]),G(`div`,ug,[G(`div`,dg,[K(oh,{type:o.value?`text`:`password`,modelValue:i.value,"onUpdate:modelValue":t[0]||=e=>i.value=e,onInput:t[1]||=e=>a.value=``,placeholder:`XXXX-XXXX-XXXX-XXXX`,class:j([`w-full p-3 pr-24 bg-background border rounded-lg text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary/50 transition-all`,a.value===`valid`?`border-green-500 focus:border-green-500`:a.value===`invalid`?`border-red-500 focus:border-red-500`:`border-border focus:border-primary`])},null,8,[`type`,`modelValue`,`class`]),G(`div`,fg,[a.value===`checking`?(H(),W(I(Ih),{key:0,class:`w-4 h-4 text-primary animate-spin`})):el(``,!0),a.value===`valid`?(H(),W(I(Ch),{key:1,class:`w-4 h-4 text-green-500`})):el(``,!0),a.value===`invalid`?(H(),W(I(wh),{key:2,class:`w-4 h-4 text-red-500`})):el(``,!0),G(`button`,{type:`button`,onClick:t[2]||=e=>o.value=!o.value,class:`text-muted-foreground hover:text-foreground`},[(H(),W(Za(o.value?I(kh):I(Ah)),{class:`w-4 h-4`}))])])]),a.value===`valid`?(H(),U(`div`,pg,[K(I(Ch),{class:`w-4 h-4 text-green-600`}),t[20]||=G(`span`,{class:`text-sm text-green-600`},`License validated successfully! All features are unlocked.`,-1)])):el(``,!0),a.value===`invalid`?(H(),U(`div`,mg,[K(I(wh),{class:`w-4 h-4 text-red-600`}),t[21]||=G(`span`,{class:`text-sm text-red-600`},`Invalid license key. Please check and try again.`,-1)])):el(``,!0),G(`div`,hg,[K(I(Ph),{class:`w-4 h-4 text-muted-foreground mt-0.5`}),t[22]||=G(`div`,{class:`text-sm text-muted-foreground`},[G(`p`,null,[q(`Don't have a license key? `),G(`a`,{href:`#`,class:`text-primary hover:underline`},`Purchase one here`)]),G(`p`,{class:`mt-1`},[q(`Need help? `),G(`a`,{href:`#`,class:`text-primary hover:underline`},`Contact support`)])],-1)])])]),G(`div`,gg,[G(`div`,_g,[G(`div`,vg,[K(I(qh),{class:`w-5 h-5 text-primary`})]),t[23]||=G(`div`,{class:`flex-1 space-y-2`},[G(`h2`,{class:`text-xl font-semibold text-foreground`},`Socket Connection`),G(`p`,{class:`text-muted-foreground text-sm`},` Configure and manage your WebSocket connection for real-time communication `)],-1)]),G(`div`,yg,[G(`div`,bg,[K(ch,{class:`text-sm font-medium text-foreground`},{default:R(()=>t[24]||=[q(` Socket Address `)]),_:1,__:[24]}),K(oh,{modelValue:n.value.socketAddress,"onUpdate:modelValue":t[3]||=e=>n.value.socketAddress=e,placeholder:`https://useai-server.fly.dev`,class:`w-full`,onChange:_},null,8,[`modelValue`]),t[25]||=G(`p`,{class:`text-xs text-muted-foreground`},`The WebSocket address for real-time communication`,-1)]),G(`div`,{class:j([`flex items-center gap-3 p-4 rounded-lg border`,v.value.bgColor,v.value.borderColor])},[(H(),W(Za(v.value.icon),{class:j([`w-5 h-5`,v.value.color,s.value===`connecting`?`animate-spin`:``])},null,8,[`class`])),G(`div`,xg,[G(`div`,Sg,[G(`span`,{class:j([`font-medium`,v.value.color])},Xe(v.value.label),3)]),G(`p`,Cg,Xe(v.value.description),1)])],2),G(`div`,wg,[K(zm,{onClick:m,disabled:s.value===`connecting`||s.value===`connected`||s.value===`reconnecting`,class:`flex items-center gap-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors font-medium disabled:opacity-50 disabled:cursor-not-allowed`},{default:R(()=>[K(I(Bh),{class:`w-4 h-4`}),t[26]||=q(` Connect `)]),_:1,__:[26]},8,[`disabled`]),K(zm,{onClick:h,disabled:s.value===`disconnected`,class:`flex items-center gap-2 px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors font-medium disabled:opacity-50 disabled:cursor-not-allowed`},{default:R(()=>[K(I(Kh),{class:`w-4 h-4`}),t[27]||=q(` Disconnect `)]),_:1,__:[27]},8,[`disabled`]),K(zm,{onClick:g,disabled:s.value===`connecting`||s.value===`reconnecting`,class:`flex items-center gap-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors font-medium disabled:opacity-50 disabled:cursor-not-allowed`},{default:R(()=>[K(I(Vh),{class:j([`w-4 h-4`,s.value===`reconnecting`?`animate-spin`:``])},null,8,[`class`]),t[28]||=q(` Reconnect `)]),_:1,__:[28]},8,[`disabled`])])])]),G(`div`,Tg,[G(`div`,Eg,[G(`div`,Dg,[K(I(vh),{class:`w-5 h-5 text-primary`})]),t[29]||=G(`div`,{class:`flex-1 space-y-2`},[G(`h2`,{class:`text-xl font-semibold text-foreground`},`LLM Models`),G(`p`,{class:`text-muted-foreground text-sm`},` Configure and manage your AI models for different providers `)],-1)]),G(`div`,Og,[G(`div`,kg,[K(ch,{class:`text-sm font-medium text-foreground`},{default:R(()=>t[30]||=[q(` Add New Model `)]),_:1,__:[30]}),G(`div`,Ag,[(H(),U(B,null,to(y,e=>K(zm,{key:e.name,onClick:t=>x(e.name),class:`flex items-center gap-2 px-4 py-2 bg-secondary hover:bg-secondary/80 text-secondary-foreground rounded-lg border border-border transition-all duration-200 hover:shadow-md`},{default:R(()=>[G(`div`,{class:j([`w-2 h-2 rounded-full`,e.color])},null,2),K(I(zh),{class:`w-4 h-4`}),G(`span`,jg,Xe(e.name),1)]),_:2},1032,[`onClick`])),64))])]),G(`div`,Mg,[(H(!0),U(B,null,to(n.value.models,(e,t)=>(H(),W(ag,{key:e.internalId||e.modelId,model:e,index:t,"is-active":e.modelId===n.value.activeModelId,onSetActive:C,onRemove:S,onSave:ee,onShowForm:te},null,8,[`model`,`index`,`is-active`]))),128))])])]),d.value&&E.value?(H(),U(`div`,Ng,[G(`div`,Pg,[G(`div`,Fg,[G(`div`,Ig,[K(I(Hh),{class:`w-5 h-5 text-primary`})]),G(`div`,Lg,[t[31]||=G(`h2`,{class:`text-xl font-semibold text-foreground`},`Configure Model`,-1),G(`p`,Rg,` Update settings for `+Xe(E.value.modelId||`this model`),1)])]),K(zm,{onClick:T,variant:`ghost`,size:`sm`,class:`p-2 text-muted-foreground hover:text-foreground hover:bg-secondary rounded transition-colors`},{default:R(()=>[K(I(wh),{class:`w-5 h-5`})]),_:1})]),G(`div`,zg,[G(`div`,Bg,[t[34]||=G(`h3`,{class:`text-lg font-medium text-foreground`},`Model Configuration`,-1),G(`div`,Vg,[G(`div`,Hg,[K(ch,{class:`text-sm font-medium text-foreground`},{default:R(()=>t[32]||=[q(`Model ID`)]),_:1,__:[32]}),K(oh,{type:`text`,modelValue:E.value.modelId,"onUpdate:modelValue":t[4]||=e=>E.value.modelId=e,class:`w-full`,placeholder:`Enter model ID`},null,8,[`modelValue`])]),G(`div`,Ug,[K(ch,{class:`text-sm font-medium text-foreground`},{default:R(()=>t[33]||=[q(`Provider`)]),_:1,__:[33]}),K(oh,{type:`text`,value:E.value.provider,class:`w-full`,readonly:``},null,8,[`value`])])])]),G(`div`,Wg,[t[38]||=G(`h3`,{class:`text-lg font-medium text-foreground`},`Parameters`,-1),G(`div`,Gg,[G(`div`,Kg,[K(ch,{class:`text-sm font-medium text-foreground`},{default:R(()=>t[35]||=[q(`Temperature`)]),_:1,__:[35]}),K(oh,{type:`number`,min:`0`,max:`2`,step:`0.1`,modelValue:E.value.temperature,"onUpdate:modelValue":t[5]||=e=>E.value.temperature=e,modelModifiers:{number:!0},class:`w-full`},null,8,[`modelValue`])]),G(`div`,qg,[K(ch,{class:`text-sm font-medium text-foreground`},{default:R(()=>t[36]||=[q(`Top K`)]),_:1,__:[36]}),K(oh,{type:`number`,min:`1`,max:`100`,modelValue:E.value.topK,"onUpdate:modelValue":t[6]||=e=>E.value.topK=e,modelModifiers:{number:!0},class:`w-full`},null,8,[`modelValue`])]),G(`div`,Jg,[K(ch,{class:`text-sm font-medium text-foreground`},{default:R(()=>t[37]||=[q(`Top P`)]),_:1,__:[37]}),K(oh,{type:`number`,min:`0`,max:`1`,step:`0.01`,modelValue:E.value.topP,"onUpdate:modelValue":t[7]||=e=>E.value.topP=e,modelModifiers:{number:!0},class:`w-full`},null,8,[`modelValue`])])])]),G(`div`,Yg,[t[47]||=G(`h3`,{class:`text-lg font-medium text-foreground`},`Credentials`,-1),I(pf)(E.value)?(H(),U(`div`,Xg,[K(ch,{class:`text-sm font-medium text-foreground`},{default:R(()=>t[39]||=[q(`API Key`)]),_:1,__:[39]}),K(oh,{type:`password`,modelValue:E.value.apiKey,"onUpdate:modelValue":t[8]||=e=>E.value.apiKey=e,class:`w-full`,placeholder:`Google API key`},null,8,[`modelValue`])])):I(hf)(E.value)?(H(),U(`div`,Zg,[G(`div`,Qg,[K(ch,{class:`text-sm font-medium text-foreground`},{default:R(()=>t[40]||=[q(`API Key`)]),_:1,__:[40]}),K(oh,{type:`password`,modelValue:E.value.apiKey,"onUpdate:modelValue":t[9]||=e=>E.value.apiKey=e,class:`w-full`,placeholder:`OpenAI API key`},null,8,[`modelValue`])]),G(`div`,$g,[K(ch,{class:`text-sm font-medium text-foreground`},{default:R(()=>t[41]||=[q(`Organization ID`)]),_:1,__:[41]}),K(oh,{type:`text`,modelValue:E.value.organization,"onUpdate:modelValue":t[10]||=e=>E.value.organization=e,class:`w-full`,placeholder:`Optional`},null,8,[`modelValue`])]),G(`div`,e_,[K(ch,{class:`text-sm font-medium text-foreground`},{default:R(()=>t[42]||=[q(`Base URL`)]),_:1,__:[42]}),K(oh,{type:`text`,modelValue:E.value.baseUrl,"onUpdate:modelValue":t[11]||=e=>E.value.baseUrl=e,class:`w-full`,placeholder:`Optional`},null,8,[`modelValue`])])])):I(gf)(E.value)?(H(),U(`div`,t_,[K(ch,{class:`text-sm font-medium text-foreground`},{default:R(()=>t[43]||=[q(`API Key`)]),_:1,__:[43]}),K(oh,{type:`password`,modelValue:E.value.apiKey,"onUpdate:modelValue":t[12]||=e=>E.value.apiKey=e,class:`w-full`,placeholder:`Anthropic API key`},null,8,[`modelValue`])])):I(mf)(E.value)?(H(),U(`div`,n_,[G(`div`,r_,[K(ch,{class:`text-sm font-medium text-foreground`},{default:R(()=>t[44]||=[q(`Access Key ID`)]),_:1,__:[44]}),K(oh,{type:`password`,modelValue:E.value.accessKeyId,"onUpdate:modelValue":t[13]||=e=>E.value.accessKeyId=e,class:`w-full`,placeholder:`AWS Access Key ID`},null,8,[`modelValue`])]),G(`div`,i_,[K(ch,{class:`text-sm font-medium text-foreground`},{default:R(()=>t[45]||=[q(`Secret Access Key`)]),_:1,__:[45]}),K(oh,{type:`password`,modelValue:E.value.secretAccessKey,"onUpdate:modelValue":t[14]||=e=>E.value.secretAccessKey=e,class:`w-full`,placeholder:`AWS Secret Access Key`},null,8,[`modelValue`])]),G(`div`,a_,[K(ch,{class:`text-sm font-medium text-foreground`},{default:R(()=>t[46]||=[q(`Region`)]),_:1,__:[46]}),K(oh,{type:`text`,modelValue:E.value.region,"onUpdate:modelValue":t[15]||=e=>E.value.region=e,class:`w-full`,placeholder:`us-east-1`},null,8,[`modelValue`])])])):el(``,!0)]),G(`div`,o_,[K(zm,{onClick:t[16]||=e=>S(u.value),variant:`destructive`,class:`flex items-center gap-2`},{default:R(()=>[K(I(Wh),{class:`w-4 h-4`}),t[48]||=q(` Delete Model `)]),_:1,__:[48]}),G(`div`,s_,[K(zm,{onClick:T,variant:`secondary`},{default:R(()=>t[49]||=[q(` Cancel `)]),_:1,__:[49]}),K(zm,{onClick:t[17]||=e=>ee(u.value,E.value),class:`bg-primary text-primary-foreground hover:bg-primary/90`},{default:R(()=>t[50]||=[q(` Save Changes `)]),_:1,__:[50]})])])])])):el(``,!0),G(`div`,c_,[G(`div`,l_,[K(ch,{class:`text-sm font-medium text-foreground`},{default:R(()=>t[51]||=[q(` System Prompt `)]),_:1,__:[51]}),K(uh,{modelValue:n.value.systemPrompt,"onUpdate:modelValue":t[18]||=e=>n.value.systemPrompt=e,class:`w-full h-32 p-4 bg-background border border-border rounded-lg text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary/50 focus:border-primary resize-none`,placeholder:`Enter your system prompt here...`},null,8,[`modelValue`])]),G(`div`,u_,[K(zm,{onClick:w,class:`px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors font-medium`},{default:R(()=>t[52]||=[q(` Save Changes `)]),_:1,__:[52]})])])]))}}),f_=d_,p_=class extends u.Events{constructor(){super()}on(e,t){return super.on(e,t)}trigger(e,...t){return super.trigger(e,...t)}};const m_=``,h_=[{internalId:`default_google_gemini`,provider:`google`,modelId:`gemini-2.0-flash-exp`,modelName:`Gemini 2.0 Flash`,apiKey:``,color:`#4285F4`},{internalId:`default_openai_gpt4o`,provider:`openai`,modelId:`gpt-4o`,modelName:`GPT-4o`,apiKey:``,color:`#10A37F`},{internalId:`default_anthropic_claude`,provider:`anthropic`,modelId:`claude-3-5-sonnet-20241022`,modelName:`Claude 3.5 Sonnet`,apiKey:``,color:`#D4A574`}],g_={debug:!1,systemPrompt:m_,socketAddress:`https://useai-server.fly.dev`,models:h_,activeModelId:h_.length>0?h_[0].modelId:``,licenseKey:``},__=Object.create(null);__.open=`0`,__.close=`1`,__.ping=`2`,__.pong=`3`,__.message=`4`,__.upgrade=`5`,__.noop=`6`;const v_=Object.create(null);Object.keys(__).forEach(e=>{v_[__[e]]=e});const y_={type:`error`,data:`parser error`},b_=typeof Blob==`function`||typeof Blob<`u`&&Object.prototype.toString.call(Blob)===`[object BlobConstructor]`,x_=typeof ArrayBuffer==`function`,S_=e=>typeof ArrayBuffer.isView==`function`?ArrayBuffer.isView(e):e&&e.buffer instanceof ArrayBuffer,C_=({type:e,data:t},n,r)=>b_&&t instanceof Blob?n?r(t):w_(t,r):x_&&(t instanceof ArrayBuffer||S_(t))?n?r(t):w_(new Blob([t]),r):r(__[e]+(t||``)),w_=(e,t)=>{let n=new FileReader;return n.onload=function(){let e=n.result.split(`,`)[1];t(`b`+(e||``))},n.readAsDataURL(e)};function T_(e){return e instanceof Uint8Array?e:e instanceof ArrayBuffer?new Uint8Array(e):new Uint8Array(e.buffer,e.byteOffset,e.byteLength)}let E_;function D_(e,t){if(b_&&e.data instanceof Blob)return e.data.arrayBuffer().then(T_).then(t);if(x_&&(e.data instanceof ArrayBuffer||S_(e.data)))return t(T_(e.data));C_(e,!1,e=>{E_||=new TextEncoder,t(E_.encode(e))})}const O_=`ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/`,k_=typeof Uint8Array>`u`?[]:new Uint8Array(256);for(let e=0;e<64;e++)k_[O_.charCodeAt(e)]=e;const A_=e=>{let t=e.length*.75,n=e.length,r,i=0,a,o,s,c;e[e.length-1]===`=`&&(t--,e[e.length-2]===`=`&&t--);let l=new ArrayBuffer(t),u=new Uint8Array(l);for(r=0;r<n;r+=4)a=k_[e.charCodeAt(r)],o=k_[e.charCodeAt(r+1)],s=k_[e.charCodeAt(r+2)],c=k_[e.charCodeAt(r+3)],u[i++]=a<<2|o>>4,u[i++]=(o&15)<<4|s>>2,u[i++]=(s&3)<<6|c&63;return l},j_=typeof ArrayBuffer==`function`,M_=(e,t)=>{if(typeof e!=`string`)return{type:`message`,data:P_(e,t)};let n=e.charAt(0);if(n===`b`)return{type:`message`,data:N_(e.substring(1),t)};let r=v_[n];return r?e.length>1?{type:v_[n],data:e.substring(1)}:{type:v_[n]}:y_},N_=(e,t)=>{if(j_){let n=A_(e);return P_(n,t)}else return{base64:!0,data:e}},P_=(e,t)=>{switch(t){case`blob`:return e instanceof Blob?e:new Blob([e]);case`arraybuffer`:default:return e instanceof ArrayBuffer?e:e.buffer}},F_=``,I_=(e,t)=>{let n=e.length,r=Array(n),i=0;e.forEach((e,a)=>{C_(e,!1,e=>{r[a]=e,++i===n&&t(r.join(F_))})})},L_=(e,t)=>{let n=e.split(F_),r=[];for(let e=0;e<n.length;e++){let i=M_(n[e],t);if(r.push(i),i.type===`error`)break}return r};function R_(){return new TransformStream({transform(e,t){D_(e,n=>{let r=n.length,i;if(r<126)i=new Uint8Array(1),new DataView(i.buffer).setUint8(0,r);else if(r<65536){i=new Uint8Array(3);let e=new DataView(i.buffer);e.setUint8(0,126),e.setUint16(1,r)}else{i=new Uint8Array(9);let e=new DataView(i.buffer);e.setUint8(0,127),e.setBigUint64(1,BigInt(r))}e.data&&typeof e.data!=`string`&&(i[0]|=128),t.enqueue(i),t.enqueue(n)})}})}let z_;function B_(e){return e.reduce((e,t)=>e+t.length,0)}function V_(e,t){if(e[0].length===t)return e.shift();let n=new Uint8Array(t),r=0;for(let i=0;i<t;i++)n[i]=e[0][r++],r===e[0].length&&(e.shift(),r=0);return e.length&&r<e[0].length&&(e[0]=e[0].slice(r)),n}function H_(e,t){z_||=new TextDecoder;let n=[],r=0,i=-1,a=!1;return new TransformStream({transform(o,s){for(n.push(o);;){if(r===0){if(B_(n)<1)break;let e=V_(n,1);a=(e[0]&128)==128,i=e[0]&127,r=i<126?3:i===126?1:2}else if(r===1){if(B_(n)<2)break;let e=V_(n,2);i=new DataView(e.buffer,e.byteOffset,e.length).getUint16(0),r=3}else if(r===2){if(B_(n)<8)break;let e=V_(n,8),t=new DataView(e.buffer,e.byteOffset,e.length),a=t.getUint32(0);if(a>2**21-1){s.enqueue(y_);break}i=a*2**32+t.getUint32(4),r=3}else{if(B_(n)<i)break;let e=V_(n,i);s.enqueue(M_(a?e:z_.decode(e),t)),r=0}if(i===0||i>e){s.enqueue(y_);break}}}})}const U_=4;function W_(e){if(e)return G_(e)}function G_(e){for(var t in W_.prototype)e[t]=W_.prototype[t];return e}W_.prototype.on=W_.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks[`$`+e]=this._callbacks[`$`+e]||[]).push(t),this},W_.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},W_.prototype.off=W_.prototype.removeListener=W_.prototype.removeAllListeners=W_.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},arguments.length==0)return this._callbacks={},this;var n=this._callbacks[`$`+e];if(!n)return this;if(arguments.length==1)return delete this._callbacks[`$`+e],this;for(var r,i=0;i<n.length;i++)if(r=n[i],r===t||r.fn===t){n.splice(i,1);break}return n.length===0&&delete this._callbacks[`$`+e],this},W_.prototype.emit=function(e){this._callbacks=this._callbacks||{};for(var t=Array(arguments.length-1),n=this._callbacks[`$`+e],r=1;r<arguments.length;r++)t[r-1]=arguments[r];if(n){n=n.slice(0);for(var r=0,i=n.length;r<i;++r)n[r].apply(this,t)}return this},W_.prototype.emitReserved=W_.prototype.emit,W_.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks[`$`+e]||[]},W_.prototype.hasListeners=function(e){return!!this.listeners(e).length};const K_=(()=>{let e=typeof Promise==`function`&&typeof Promise.resolve==`function`;return e?e=>Promise.resolve().then(e):(e,t)=>t(e,0)})(),q_=(()=>typeof self<`u`?self:typeof window<`u`?window:Function(`return this`)())(),J_=`arraybuffer`;function Y_(){}function X_(e,...t){return t.reduce((t,n)=>(e.hasOwnProperty(n)&&(t[n]=e[n]),t),{})}const Z_=q_.setTimeout,Q_=q_.clearTimeout;function $_(e,t){t.useNativeTimers?(e.setTimeoutFn=Z_.bind(q_),e.clearTimeoutFn=Q_.bind(q_)):(e.setTimeoutFn=q_.setTimeout.bind(q_),e.clearTimeoutFn=q_.clearTimeout.bind(q_))}const ev=1.33;function tv(e){return typeof e==`string`?nv(e):Math.ceil((e.byteLength||e.size)*ev)}function nv(e){let t=0,n=0;for(let r=0,i=e.length;r<i;r++)t=e.charCodeAt(r),t<128?n+=1:t<2048?n+=2:t<55296||t>=57344?n+=3:(r++,n+=4);return n}function rv(){return Date.now().toString(36).substring(3)+Math.random().toString(36).substring(2,5)}function iv(e){let t=``;for(let n in e)e.hasOwnProperty(n)&&(t.length&&(t+=`&`),t+=encodeURIComponent(n)+`=`+encodeURIComponent(e[n]));return t}function av(e){let t={},n=e.split(`&`);for(let e=0,r=n.length;e<r;e++){let r=n[e].split(`=`);t[decodeURIComponent(r[0])]=decodeURIComponent(r[1])}return t}var ov=class extends Error{constructor(e,t,n){super(e),this.description=t,this.context=n,this.type=`TransportError`}},sv=class extends W_{constructor(e){super(),this.writable=!1,$_(this,e),this.opts=e,this.query=e.query,this.socket=e.socket,this.supportsBinary=!e.forceBase64}onError(e,t,n){return super.emitReserved(`error`,new ov(e,t,n)),this}open(){return this.readyState=`opening`,this.doOpen(),this}close(){return(this.readyState===`opening`||this.readyState===`open`)&&(this.doClose(),this.onClose()),this}send(e){this.readyState===`open`&&this.write(e)}onOpen(){this.readyState=`open`,this.writable=!0,super.emitReserved(`open`)}onData(e){let t=M_(e,this.socket.binaryType);this.onPacket(t)}onPacket(e){super.emitReserved(`packet`,e)}onClose(e){this.readyState=`closed`,super.emitReserved(`close`,e)}pause(e){}createUri(e,t={}){return e+`://`+this._hostname()+this._port()+this.opts.path+this._query(t)}_hostname(){let e=this.opts.hostname;return e.indexOf(`:`)===-1?e:`[`+e+`]`}_port(){return this.opts.port&&(this.opts.secure&&Number(this.opts.port!==443)||!this.opts.secure&&Number(this.opts.port)!==80)?`:`+this.opts.port:``}_query(e){let t=iv(e);return t.length?`?`+t:``}},cv=class extends sv{constructor(){super(...arguments),this._polling=!1}get name(){return`polling`}doOpen(){this._poll()}pause(e){this.readyState=`pausing`;let t=()=>{this.readyState=`paused`,e()};if(this._polling||!this.writable){let e=0;this._polling&&(e++,this.once(`pollComplete`,function(){--e||t()})),this.writable||(e++,this.once(`drain`,function(){--e||t()}))}else t()}_poll(){this._polling=!0,this.doPoll(),this.emitReserved(`poll`)}onData(e){let t=e=>{if(this.readyState===`opening`&&e.type===`open`&&this.onOpen(),e.type===`close`)return this.onClose({description:`transport closed by the server`}),!1;this.onPacket(e)};L_(e,this.socket.binaryType).forEach(t),this.readyState!==`closed`&&(this._polling=!1,this.emitReserved(`pollComplete`),this.readyState===`open`&&this._poll())}doClose(){let e=()=>{this.write([{type:`close`}])};this.readyState===`open`?e():this.once(`open`,e)}write(e){this.writable=!1,I_(e,e=>{this.doWrite(e,()=>{this.writable=!0,this.emitReserved(`drain`)})})}uri(){let e=this.opts.secure?`https`:`http`,t=this.query||{};return this.opts.timestampRequests!==!1&&(t[this.opts.timestampParam]=rv()),!this.supportsBinary&&!t.sid&&(t.b64=1),this.createUri(e,t)}};let lv=!1;try{lv=typeof XMLHttpRequest<`u`&&`withCredentials`in new XMLHttpRequest}catch{}const uv=lv;function dv(){}var fv=class extends cv{constructor(e){if(super(e),typeof location<`u`){let t=location.protocol===`https:`,n=location.port;n||=t?`443`:`80`,this.xd=typeof location<`u`&&e.hostname!==location.hostname||n!==e.port}}doWrite(e,t){let n=this.request({method:`POST`,data:e});n.on(`success`,t),n.on(`error`,(e,t)=>{this.onError(`xhr post error`,e,t)})}doPoll(){let e=this.request();e.on(`data`,this.onData.bind(this)),e.on(`error`,(e,t)=>{this.onError(`xhr poll error`,e,t)}),this.pollXhr=e}},pv=class e extends W_{constructor(e,t,n){super(),this.createRequest=e,$_(this,n),this._opts=n,this._method=n.method||`GET`,this._uri=t,this._data=n.data===void 0?null:n.data,this._create()}_create(){var t;let n=X_(this._opts,`agent`,`pfx`,`key`,`passphrase`,`cert`,`ca`,`ciphers`,`rejectUnauthorized`,`autoUnref`);n.xdomain=!!this._opts.xd;let r=this._xhr=this.createRequest(n);try{r.open(this._method,this._uri,!0);try{if(this._opts.extraHeaders)for(let e in r.setDisableHeaderCheck&&r.setDisableHeaderCheck(!0),this._opts.extraHeaders)this._opts.extraHeaders.hasOwnProperty(e)&&r.setRequestHeader(e,this._opts.extraHeaders[e])}catch{}if(this._method===`POST`)try{r.setRequestHeader(`Content-type`,`text/plain;charset=UTF-8`)}catch{}try{r.setRequestHeader(`Accept`,`*/*`)}catch{}(t=this._opts.cookieJar)==null||t.addCookies(r),`withCredentials`in r&&(r.withCredentials=this._opts.withCredentials),this._opts.requestTimeout&&(r.timeout=this._opts.requestTimeout),r.onreadystatechange=()=>{var e;r.readyState===3&&((e=this._opts.cookieJar)==null||e.parseCookies(r.getResponseHeader(`set-cookie`))),r.readyState===4&&(r.status===200||r.status===1223?this._onLoad():this.setTimeoutFn(()=>{this._onError(typeof r.status==`number`?r.status:0)},0))},r.send(this._data)}catch(e){this.setTimeoutFn(()=>{this._onError(e)},0);return}typeof document<`u`&&(this._index=e.requestsCount++,e.requests[this._index]=this)}_onError(e){this.emitReserved(`error`,e,this._xhr),this._cleanup(!0)}_cleanup(t){if(!(this._xhr===void 0||this._xhr===null)){if(this._xhr.onreadystatechange=dv,t)try{this._xhr.abort()}catch{}typeof document<`u`&&delete e.requests[this._index],this._xhr=null}}_onLoad(){let e=this._xhr.responseText;e!==null&&(this.emitReserved(`data`,e),this.emitReserved(`success`),this._cleanup())}abort(){this._cleanup()}};if(pv.requestsCount=0,pv.requests={},typeof document<`u`){if(typeof attachEvent==`function`)attachEvent(`onunload`,mv);else if(typeof addEventListener==`function`){let e=`onpagehide`in q_?`pagehide`:`unload`;addEventListener(e,mv,!1)}}function mv(){for(let e in pv.requests)pv.requests.hasOwnProperty(e)&&pv.requests[e].abort()}const hv=function(){let e=_v({xdomain:!1});return e&&e.responseType!==null}();var gv=class extends fv{constructor(e){super(e);let t=e&&e.forceBase64;this.supportsBinary=hv&&!t}request(e={}){return Object.assign(e,{xd:this.xd},this.opts),new pv(_v,this.uri(),e)}};function _v(e){let t=e.xdomain;try{if(typeof XMLHttpRequest<`u`&&(!t||uv))return new XMLHttpRequest}catch{}if(!t)try{return new q_[[`Active`,`Object`].join(`X`)](`Microsoft.XMLHTTP`)}catch{}}const vv=typeof navigator<`u`&&typeof navigator.product==`string`&&navigator.product.toLowerCase()===`reactnative`;var yv=class extends sv{get name(){return`websocket`}doOpen(){let e=this.uri(),t=this.opts.protocols,n=vv?{}:X_(this.opts,`agent`,`perMessageDeflate`,`pfx`,`key`,`passphrase`,`cert`,`ca`,`ciphers`,`rejectUnauthorized`,`localAddress`,`protocolVersion`,`origin`,`maxPayload`,`family`,`checkServerIdentity`);this.opts.extraHeaders&&(n.headers=this.opts.extraHeaders);try{this.ws=this.createSocket(e,t,n)}catch(e){return this.emitReserved(`error`,e)}this.ws.binaryType=this.socket.binaryType,this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=e=>this.onClose({description:`websocket connection closed`,context:e}),this.ws.onmessage=e=>this.onData(e.data),this.ws.onerror=e=>this.onError(`websocket error`,e)}write(e){this.writable=!1;for(let t=0;t<e.length;t++){let n=e[t],r=t===e.length-1;C_(n,this.supportsBinary,e=>{try{this.doWrite(n,e)}catch{}r&&K_(()=>{this.writable=!0,this.emitReserved(`drain`)},this.setTimeoutFn)})}}doClose(){this.ws!==void 0&&(this.ws.onerror=()=>{},this.ws.close(),this.ws=null)}uri(){let e=this.opts.secure?`wss`:`ws`,t=this.query||{};return this.opts.timestampRequests&&(t[this.opts.timestampParam]=rv()),this.supportsBinary||(t.b64=1),this.createUri(e,t)}};const bv=q_.WebSocket||q_.MozWebSocket;var xv=class extends yv{createSocket(e,t,n){return vv?new bv(e,t,n):t?new bv(e,t):new bv(e)}doWrite(e,t){this.ws.send(t)}},Sv=class extends sv{get name(){return`webtransport`}doOpen(){try{this._transport=new WebTransport(this.createUri(`https`),this.opts.transportOptions[this.name])}catch(e){return this.emitReserved(`error`,e)}this._transport.closed.then(()=>{this.onClose()}).catch(e=>{this.onError(`webtransport error`,e)}),this._transport.ready.then(()=>{this._transport.createBidirectionalStream().then(e=>{let t=H_(2**53-1,this.socket.binaryType),n=e.readable.pipeThrough(t).getReader(),r=R_();r.readable.pipeTo(e.writable),this._writer=r.writable.getWriter();let i=()=>{n.read().then(({done:e,value:t})=>{e||(this.onPacket(t),i())}).catch(e=>{})};i();let a={type:`open`};this.query.sid&&(a.data=`{"sid":"${this.query.sid}"}`),this._writer.write(a).then(()=>this.onOpen())})})}write(e){this.writable=!1;for(let t=0;t<e.length;t++){let n=e[t],r=t===e.length-1;this._writer.write(n).then(()=>{r&&K_(()=>{this.writable=!0,this.emitReserved(`drain`)},this.setTimeoutFn)})}}doClose(){var e;(e=this._transport)==null||e.close()}};const Cv={websocket:xv,webtransport:Sv,polling:gv},wv=/^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,Tv=[`source`,`protocol`,`authority`,`userInfo`,`user`,`password`,`host`,`port`,`relative`,`path`,`directory`,`file`,`query`,`anchor`];function Ev(e){if(e.length>8e3)throw`URI too long`;let t=e,n=e.indexOf(`[`),r=e.indexOf(`]`);n!=-1&&r!=-1&&(e=e.substring(0,n)+e.substring(n,r).replace(/:/g,`;`)+e.substring(r,e.length));let i=wv.exec(e||``),a={},o=14;for(;o--;)a[Tv[o]]=i[o]||``;return n!=-1&&r!=-1&&(a.source=t,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,`:`),a.authority=a.authority.replace(`[`,``).replace(`]`,``).replace(/;/g,`:`),a.ipv6uri=!0),a.pathNames=Dv(a,a.path),a.queryKey=Ov(a,a.query),a}function Dv(e,t){let n=/\/{2,9}/g,r=t.replace(n,`/`).split(`/`);return(t.slice(0,1)==`/`||t.length===0)&&r.splice(0,1),t.slice(-1)==`/`&&r.splice(r.length-1,1),r}function Ov(e,t){let n={};return t.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,function(e,t,r){t&&(n[t]=r)}),n}const kv=typeof addEventListener==`function`&&typeof removeEventListener==`function`,Av=[];kv&&addEventListener(`offline`,()=>{Av.forEach(e=>e())},!1);var jv=class e extends W_{constructor(e,t){if(super(),this.binaryType=J_,this.writeBuffer=[],this._prevBufferLen=0,this._pingInterval=-1,this._pingTimeout=-1,this._maxPayload=-1,this._pingTimeoutTime=1/0,e&&typeof e==`object`&&(t=e,e=null),e){let n=Ev(e);t.hostname=n.host,t.secure=n.protocol===`https`||n.protocol===`wss`,t.port=n.port,n.query&&(t.query=n.query)}else t.host&&(t.hostname=Ev(t.host).host);$_(this,t),this.secure=t.secure==null?typeof location<`u`&&location.protocol===`https:`:t.secure,t.hostname&&!t.port&&(t.port=this.secure?`443`:`80`),this.hostname=t.hostname||(typeof location<`u`?location.hostname:`localhost`),this.port=t.port||(typeof location<`u`&&location.port?location.port:this.secure?`443`:`80`),this.transports=[],this._transportsByName={},t.transports.forEach(e=>{let t=e.prototype.name;this.transports.push(t),this._transportsByName[t]=e}),this.opts=Object.assign({path:`/engine.io`,agent:!1,withCredentials:!1,upgrade:!0,timestampParam:`t`,rememberUpgrade:!1,addTrailingSlash:!0,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!1},t),this.opts.path=this.opts.path.replace(/\/$/,``)+(this.opts.addTrailingSlash?`/`:``),typeof this.opts.query==`string`&&(this.opts.query=av(this.opts.query)),kv&&(this.opts.closeOnBeforeunload&&(this._beforeunloadEventListener=()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())},addEventListener(`beforeunload`,this._beforeunloadEventListener,!1)),this.hostname!==`localhost`&&(this._offlineEventListener=()=>{this._onClose(`transport close`,{description:`network connection lost`})},Av.push(this._offlineEventListener))),this.opts.withCredentials&&(this._cookieJar=Y_()),this._open()}createTransport(e){let t=Object.assign({},this.opts.query);t.EIO=U_,t.transport=e,this.id&&(t.sid=this.id);let n=Object.assign({},this.opts,{query:t,socket:this,hostname:this.hostname,secure:this.secure,port:this.port},this.opts.transportOptions[e]);return new this._transportsByName[e](n)}_open(){if(this.transports.length===0){this.setTimeoutFn(()=>{this.emitReserved(`error`,`No transports available`)},0);return}let t=this.opts.rememberUpgrade&&e.priorWebsocketSuccess&&this.transports.indexOf(`websocket`)!==-1?`websocket`:this.transports[0];this.readyState=`opening`;let n=this.createTransport(t);n.open(),this.setTransport(n)}setTransport(e){this.transport&&this.transport.removeAllListeners(),this.transport=e,e.on(`drain`,this._onDrain.bind(this)).on(`packet`,this._onPacket.bind(this)).on(`error`,this._onError.bind(this)).on(`close`,e=>this._onClose(`transport close`,e))}onOpen(){this.readyState=`open`,e.priorWebsocketSuccess=this.transport.name===`websocket`,this.emitReserved(`open`),this.flush()}_onPacket(e){if(this.readyState===`opening`||this.readyState===`open`||this.readyState===`closing`)switch(this.emitReserved(`packet`,e),this.emitReserved(`heartbeat`),e.type){case`open`:this.onHandshake(JSON.parse(e.data));break;case`ping`:this._sendPacket(`pong`),this.emitReserved(`ping`),this.emitReserved(`pong`),this._resetPingTimeout();break;case`error`:let t=Error(`server error`);t.code=e.data,this._onError(t);break;case`message`:this.emitReserved(`data`,e.data),this.emitReserved(`message`,e.data);break}}onHandshake(e){this.emitReserved(`handshake`,e),this.id=e.sid,this.transport.query.sid=e.sid,this._pingInterval=e.pingInterval,this._pingTimeout=e.pingTimeout,this._maxPayload=e.maxPayload,this.onOpen(),this.readyState!==`closed`&&this._resetPingTimeout()}_resetPingTimeout(){this.clearTimeoutFn(this._pingTimeoutTimer);let e=this._pingInterval+this._pingTimeout;this._pingTimeoutTime=Date.now()+e,this._pingTimeoutTimer=this.setTimeoutFn(()=>{this._onClose(`ping timeout`)},e),this.opts.autoUnref&&this._pingTimeoutTimer.unref()}_onDrain(){this.writeBuffer.splice(0,this._prevBufferLen),this._prevBufferLen=0,this.writeBuffer.length===0?this.emitReserved(`drain`):this.flush()}flush(){if(this.readyState!==`closed`&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){let e=this._getWritablePackets();this.transport.send(e),this._prevBufferLen=e.length,this.emitReserved(`flush`)}}_getWritablePackets(){let e=this._maxPayload&&this.transport.name===`polling`&&this.writeBuffer.length>1;if(!e)return this.writeBuffer;let t=1;for(let e=0;e<this.writeBuffer.length;e++){let n=this.writeBuffer[e].data;if(n&&(t+=tv(n)),e>0&&t>this._maxPayload)return this.writeBuffer.slice(0,e);t+=2}return this.writeBuffer}_hasPingExpired(){if(!this._pingTimeoutTime)return!0;let e=Date.now()>this._pingTimeoutTime;return e&&(this._pingTimeoutTime=0,K_(()=>{this._onClose(`ping timeout`)},this.setTimeoutFn)),e}write(e,t,n){return this._sendPacket(`message`,e,t,n),this}send(e,t,n){return this._sendPacket(`message`,e,t,n),this}_sendPacket(e,t,n,r){if(typeof t==`function`&&(r=t,t=void 0),typeof n==`function`&&(r=n,n=null),this.readyState===`closing`||this.readyState===`closed`)return;n||={},n.compress=n.compress!==!1;let i={type:e,data:t,options:n};this.emitReserved(`packetCreate`,i),this.writeBuffer.push(i),r&&this.once(`flush`,r),this.flush()}close(){let e=()=>{this._onClose(`forced close`),this.transport.close()},t=()=>{this.off(`upgrade`,t),this.off(`upgradeError`,t),e()},n=()=>{this.once(`upgrade`,t),this.once(`upgradeError`,t)};return(this.readyState===`opening`||this.readyState===`open`)&&(this.readyState=`closing`,this.writeBuffer.length?this.once(`drain`,()=>{this.upgrading?n():e()}):this.upgrading?n():e()),this}_onError(t){if(e.priorWebsocketSuccess=!1,this.opts.tryAllTransports&&this.transports.length>1&&this.readyState===`opening`)return this.transports.shift(),this._open();this.emitReserved(`error`,t),this._onClose(`transport error`,t)}_onClose(e,t){if(this.readyState===`opening`||this.readyState===`open`||this.readyState===`closing`){if(this.clearTimeoutFn(this._pingTimeoutTimer),this.transport.removeAllListeners(`close`),this.transport.close(),this.transport.removeAllListeners(),kv&&(this._beforeunloadEventListener&&removeEventListener(`beforeunload`,this._beforeunloadEventListener,!1),this._offlineEventListener)){let e=Av.indexOf(this._offlineEventListener);e!==-1&&Av.splice(e,1)}this.readyState=`closed`,this.id=null,this.emitReserved(`close`,e,t),this.writeBuffer=[],this._prevBufferLen=0}}};jv.protocol=U_;var Mv=class extends jv{constructor(){super(...arguments),this._upgrades=[]}onOpen(){if(super.onOpen(),this.readyState===`open`&&this.opts.upgrade)for(let e=0;e<this._upgrades.length;e++)this._probe(this._upgrades[e])}_probe(e){let t=this.createTransport(e),n=!1;jv.priorWebsocketSuccess=!1;let r=()=>{n||(t.send([{type:`ping`,data:`probe`}]),t.once(`packet`,e=>{if(!n)if(e.type===`pong`&&e.data===`probe`){if(this.upgrading=!0,this.emitReserved(`upgrading`,t),!t)return;jv.priorWebsocketSuccess=t.name===`websocket`,this.transport.pause(()=>{n||this.readyState!==`closed`&&(l(),this.setTransport(t),t.send([{type:`upgrade`}]),this.emitReserved(`upgrade`,t),t=null,this.upgrading=!1,this.flush())})}else{let e=Error(`probe error`);e.transport=t.name,this.emitReserved(`upgradeError`,e)}}))};function i(){n||(n=!0,l(),t.close(),t=null)}let a=e=>{let n=Error(`probe error: `+e);n.transport=t.name,i(),this.emitReserved(`upgradeError`,n)};function o(){a(`transport closed`)}function s(){a(`socket closed`)}function c(e){t&&e.name!==t.name&&i()}let l=()=>{t.removeListener(`open`,r),t.removeListener(`error`,a),t.removeListener(`close`,o),this.off(`close`,s),this.off(`upgrading`,c)};t.once(`open`,r),t.once(`error`,a),t.once(`close`,o),this.once(`close`,s),this.once(`upgrading`,c),this._upgrades.indexOf(`webtransport`)!==-1&&e!==`webtransport`?this.setTimeoutFn(()=>{n||t.open()},200):t.open()}onHandshake(e){this._upgrades=this._filterUpgrades(e.upgrades),super.onHandshake(e)}_filterUpgrades(e){let t=[];for(let n=0;n<e.length;n++)~this.transports.indexOf(e[n])&&t.push(e[n]);return t}},Nv=class extends Mv{constructor(e,t={}){let n=typeof e==`object`?e:t;(!n.transports||n.transports&&typeof n.transports[0]==`string`)&&(n.transports=(n.transports||[`polling`,`websocket`,`webtransport`]).map(e=>Cv[e]).filter(e=>!!e)),super(e,n)}};const Pv=Nv.protocol;function Fv(e,t=``,n){let r=e;n||=typeof location<`u`&&location,e??=n.protocol+`//`+n.host,typeof e==`string`&&(e.charAt(0)===`/`&&(e=e.charAt(1)===`/`?n.protocol+e:n.host+e),/^(https?|wss?):\/\//.test(e)||(e=n===void 0?`https://`+e:n.protocol+`//`+e),r=Ev(e)),r.port||(/^(http|ws)$/.test(r.protocol)?r.port=`80`:/^(http|ws)s$/.test(r.protocol)&&(r.port=`443`)),r.path=r.path||`/`;let i=r.host.indexOf(`:`)!==-1,a=i?`[`+r.host+`]`:r.host;return r.id=r.protocol+`://`+a+`:`+r.port+t,r.href=r.protocol+`://`+a+(n&&n.port===r.port?``:`:`+r.port),r}const Iv=typeof ArrayBuffer==`function`,Lv=e=>typeof ArrayBuffer.isView==`function`?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer,Rv=Object.prototype.toString,zv=typeof Blob==`function`||typeof Blob<`u`&&Rv.call(Blob)===`[object BlobConstructor]`,Bv=typeof File==`function`||typeof File<`u`&&Rv.call(File)===`[object FileConstructor]`;function Vv(e){return Iv&&(e instanceof ArrayBuffer||Lv(e))||zv&&e instanceof Blob||Bv&&e instanceof File}function Hv(e,t){if(!e||typeof e!=`object`)return!1;if(Array.isArray(e)){for(let t=0,n=e.length;t<n;t++)if(Hv(e[t]))return!0;return!1}if(Vv(e))return!0;if(e.toJSON&&typeof e.toJSON==`function`&&arguments.length===1)return Hv(e.toJSON(),!0);for(let t in e)if(Object.prototype.hasOwnProperty.call(e,t)&&Hv(e[t]))return!0;return!1}function Uv(e){let t=[],n=e.data,r=e;return r.data=Wv(n,t),r.attachments=t.length,{packet:r,buffers:t}}function Wv(e,t){if(!e)return e;if(Vv(e)){let n={_placeholder:!0,num:t.length};return t.push(e),n}else if(Array.isArray(e)){let n=Array(e.length);for(let r=0;r<e.length;r++)n[r]=Wv(e[r],t);return n}else if(typeof e==`object`&&!(e instanceof Date)){let n={};for(let r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=Wv(e[r],t));return n}return e}function Gv(e,t){return e.data=Kv(e.data,t),delete e.attachments,e}function Kv(e,t){if(!e)return e;if(e&&e._placeholder===!0){let n=typeof e.num==`number`&&e.num>=0&&e.num<t.length;if(n)return t[e.num];throw Error(`illegal attachments`)}else if(Array.isArray(e))for(let n=0;n<e.length;n++)e[n]=Kv(e[n],t);else if(typeof e==`object`)for(let n in e)Object.prototype.hasOwnProperty.call(e,n)&&(e[n]=Kv(e[n],t));return e}var qv={};s(qv,{Decoder:()=>Qv,Encoder:()=>Xv,PacketType:()=>$,protocol:()=>Yv});const Jv=[`connect`,`connect_error`,`disconnect`,`disconnecting`,`newListener`,`removeListener`],Yv=5;var $;(function(e){e[e.CONNECT=0]=`CONNECT`,e[e.DISCONNECT=1]=`DISCONNECT`,e[e.EVENT=2]=`EVENT`,e[e.ACK=3]=`ACK`,e[e.CONNECT_ERROR=4]=`CONNECT_ERROR`,e[e.BINARY_EVENT=5]=`BINARY_EVENT`,e[e.BINARY_ACK=6]=`BINARY_ACK`})($||={});var Xv=class{constructor(e){this.replacer=e}encode(e){return(e.type===$.EVENT||e.type===$.ACK)&&Hv(e)?this.encodeAsBinary({type:e.type===$.EVENT?$.BINARY_EVENT:$.BINARY_ACK,nsp:e.nsp,data:e.data,id:e.id}):[this.encodeAsString(e)]}encodeAsString(e){let t=``+e.type;return(e.type===$.BINARY_EVENT||e.type===$.BINARY_ACK)&&(t+=e.attachments+`-`),e.nsp&&e.nsp!==`/`&&(t+=e.nsp+`,`),e.id!=null&&(t+=e.id),e.data!=null&&(t+=JSON.stringify(e.data,this.replacer)),t}encodeAsBinary(e){let t=Uv(e),n=this.encodeAsString(t.packet),r=t.buffers;return r.unshift(n),r}};function Zv(e){return Object.prototype.toString.call(e)===`[object Object]`}var Qv=class e extends W_{constructor(e){super(),this.reviver=e}add(e){let t;if(typeof e==`string`){if(this.reconstructor)throw Error(`got plaintext data when reconstructing a packet`);t=this.decodeString(e);let n=t.type===$.BINARY_EVENT;n||t.type===$.BINARY_ACK?(t.type=n?$.EVENT:$.ACK,this.reconstructor=new $v(t),t.attachments===0&&super.emitReserved(`decoded`,t)):super.emitReserved(`decoded`,t)}else if(Vv(e)||e.base64)if(this.reconstructor)t=this.reconstructor.takeBinaryData(e),t&&(this.reconstructor=null,super.emitReserved(`decoded`,t));else throw Error(`got binary data when not reconstructing a packet`);else throw Error(`Unknown type: `+e)}decodeString(t){let n=0,r={type:Number(t.charAt(0))};if($[r.type]===void 0)throw Error(`unknown packet type `+r.type);if(r.type===$.BINARY_EVENT||r.type===$.BINARY_ACK){let e=n+1;for(;t.charAt(++n)!==`-`&&n!=t.length;);let i=t.substring(e,n);if(i!=Number(i)||t.charAt(n)!==`-`)throw Error(`Illegal attachments`);r.attachments=Number(i)}if(t.charAt(n+1)===`/`){let e=n+1;for(;++n;){let e=t.charAt(n);if(e===`,`||n===t.length)break}r.nsp=t.substring(e,n)}else r.nsp=`/`;let i=t.charAt(n+1);if(i!==``&&Number(i)==i){let e=n+1;for(;++n;){let e=t.charAt(n);if(e==null||Number(e)!=e){--n;break}if(n===t.length)break}r.id=Number(t.substring(e,n+1))}if(t.charAt(++n)){let i=this.tryParse(t.substr(n));if(e.isPayloadValid(r.type,i))r.data=i;else throw Error(`invalid payload`)}return r}tryParse(e){try{return JSON.parse(e,this.reviver)}catch{return!1}}static isPayloadValid(e,t){switch(e){case $.CONNECT:return Zv(t);case $.DISCONNECT:return t===void 0;case $.CONNECT_ERROR:return typeof t==`string`||Zv(t);case $.EVENT:case $.BINARY_EVENT:return Array.isArray(t)&&(typeof t[0]==`number`||typeof t[0]==`string`&&Jv.indexOf(t[0])===-1);case $.ACK:case $.BINARY_ACK:return Array.isArray(t)}}destroy(){this.reconstructor&&(this.reconstructor.finishedReconstruction(),this.reconstructor=null)}},$v=class{constructor(e){this.packet=e,this.buffers=[],this.reconPack=e}takeBinaryData(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){let e=Gv(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}};function ey(e,t,n){return e.on(t,n),function(){e.off(t,n)}}const ty=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});var ny=class extends W_{constructor(e,t,n){super(),this.connected=!1,this.recovered=!1,this.receiveBuffer=[],this.sendBuffer=[],this._queue=[],this._queueSeq=0,this.ids=0,this.acks={},this.flags={},this.io=e,this.nsp=t,n&&n.auth&&(this.auth=n.auth),this._opts=Object.assign({},n),this.io._autoConnect&&this.open()}get disconnected(){return!this.connected}subEvents(){if(this.subs)return;let e=this.io;this.subs=[ey(e,`open`,this.onopen.bind(this)),ey(e,`packet`,this.onpacket.bind(this)),ey(e,`error`,this.onerror.bind(this)),ey(e,`close`,this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected?this:(this.subEvents(),this.io._reconnecting||this.io.open(),this.io._readyState===`open`&&this.onopen(),this)}open(){return this.connect()}send(...e){return e.unshift(`message`),this.emit.apply(this,e),this}emit(e,...t){var n,r,i;if(ty.hasOwnProperty(e))throw Error(`"`+e.toString()+`" is a reserved event name`);if(t.unshift(e),this._opts.retries&&!this.flags.fromQueue&&!this.flags.volatile)return this._addToQueue(t),this;let a={type:$.EVENT,data:t};if(a.options={},a.options.compress=this.flags.compress!==!1,typeof t[t.length-1]==`function`){let e=this.ids++,n=t.pop();this._registerAckCallback(e,n),a.id=e}let o=(r=(n=this.io.engine)?.transport)?.writable,s=this.connected&&!(i=this.io.engine)?._hasPingExpired(),c=this.flags.volatile&&!o;return c||(s?(this.notifyOutgoingListeners(a),this.packet(a)):this.sendBuffer.push(a)),this.flags={},this}_registerAckCallback(e,t){var n;let r=(n=this.flags.timeout)??this._opts.ackTimeout;if(r===void 0){this.acks[e]=t;return}let i=this.io.setTimeoutFn(()=>{delete this.acks[e];for(let t=0;t<this.sendBuffer.length;t++)this.sendBuffer[t].id===e&&this.sendBuffer.splice(t,1);t.call(this,Error(`operation has timed out`))},r),a=(...e)=>{this.io.clearTimeoutFn(i),t.apply(this,e)};a.withError=!0,this.acks[e]=a}emitWithAck(e,...t){return new Promise((n,r)=>{let i=(e,t)=>e?r(e):n(t);i.withError=!0,t.push(i),this.emit(e,...t)})}_addToQueue(e){let t;typeof e[e.length-1]==`function`&&(t=e.pop());let n={id:this._queueSeq++,tryCount:0,pending:!1,args:e,flags:Object.assign({fromQueue:!0},this.flags)};e.push((e,...r)=>{if(n!==this._queue[0])return;let i=e!==null;return i?n.tryCount>this._opts.retries&&(this._queue.shift(),t&&t(e)):(this._queue.shift(),t&&t(null,...r)),n.pending=!1,this._drainQueue()}),this._queue.push(n),this._drainQueue()}_drainQueue(e=!1){if(!this.connected||this._queue.length===0)return;let t=this._queue[0];t.pending&&!e||(t.pending=!0,t.tryCount++,this.flags=t.flags,this.emit.apply(this,t.args))}packet(e){e.nsp=this.nsp,this.io._packet(e)}onopen(){typeof this.auth==`function`?this.auth(e=>{this._sendConnectPacket(e)}):this._sendConnectPacket(this.auth)}_sendConnectPacket(e){this.packet({type:$.CONNECT,data:this._pid?Object.assign({pid:this._pid,offset:this._lastOffset},e):e})}onerror(e){this.connected||this.emitReserved(`connect_error`,e)}onclose(e,t){this.connected=!1,delete this.id,this.emitReserved(`disconnect`,e,t),this._clearAcks()}_clearAcks(){Object.keys(this.acks).forEach(e=>{let t=this.sendBuffer.some(t=>String(t.id)===e);if(!t){let t=this.acks[e];delete this.acks[e],t.withError&&t.call(this,Error(`socket has been disconnected`))}})}onpacket(e){let t=e.nsp===this.nsp;if(t)switch(e.type){case $.CONNECT:e.data&&e.data.sid?this.onconnect(e.data.sid,e.data.pid):this.emitReserved(`connect_error`,Error(`It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)`));break;case $.EVENT:case $.BINARY_EVENT:this.onevent(e);break;case $.ACK:case $.BINARY_ACK:this.onack(e);break;case $.DISCONNECT:this.ondisconnect();break;case $.CONNECT_ERROR:this.destroy();let t=Error(e.data.message);t.data=e.data.data,this.emitReserved(`connect_error`,t);break}}onevent(e){let t=e.data||[];e.id!=null&&t.push(this.ack(e.id)),this.connected?this.emitEvent(t):this.receiveBuffer.push(Object.freeze(t))}emitEvent(e){if(this._anyListeners&&this._anyListeners.length){let t=this._anyListeners.slice();for(let n of t)n.apply(this,e)}super.emit.apply(this,e),this._pid&&e.length&&typeof e[e.length-1]==`string`&&(this._lastOffset=e[e.length-1])}ack(e){let t=this,n=!1;return function(...r){n||(n=!0,t.packet({type:$.ACK,id:e,data:r}))}}onack(e){let t=this.acks[e.id];typeof t==`function`&&(delete this.acks[e.id],t.withError&&e.data.unshift(null),t.apply(this,e.data))}onconnect(e,t){this.id=e,this.recovered=t&&this._pid===t,this._pid=t,this.connected=!0,this.emitBuffered(),this.emitReserved(`connect`),this._drainQueue(!0)}emitBuffered(){this.receiveBuffer.forEach(e=>this.emitEvent(e)),this.receiveBuffer=[],this.sendBuffer.forEach(e=>{this.notifyOutgoingListeners(e),this.packet(e)}),this.sendBuffer=[]}ondisconnect(){this.destroy(),this.onclose(`io server disconnect`)}destroy(){this.subs&&(this.subs.forEach(e=>e()),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&this.packet({type:$.DISCONNECT}),this.destroy(),this.connected&&this.onclose(`io client disconnect`),this}close(){return this.disconnect()}compress(e){return this.flags.compress=e,this}get volatile(){return this.flags.volatile=!0,this}timeout(e){return this.flags.timeout=e,this}onAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(e),this}prependAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(e),this}offAny(e){if(!this._anyListeners)return this;if(e){let t=this._anyListeners;for(let n=0;n<t.length;n++)if(e===t[n])return t.splice(n,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}onAnyOutgoing(e){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.push(e),this}prependAnyOutgoing(e){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.unshift(e),this}offAnyOutgoing(e){if(!this._anyOutgoingListeners)return this;if(e){let t=this._anyOutgoingListeners;for(let n=0;n<t.length;n++)if(e===t[n])return t.splice(n,1),this}else this._anyOutgoingListeners=[];return this}listenersAnyOutgoing(){return this._anyOutgoingListeners||[]}notifyOutgoingListeners(e){if(this._anyOutgoingListeners&&this._anyOutgoingListeners.length){let t=this._anyOutgoingListeners.slice();for(let n of t)n.apply(this,e.data)}}};function ry(e){e||={},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}ry.prototype.duration=function(){var e=this.ms*this.factor**+ this.attempts++;if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=Math.floor(t*10)&1?e+n:e-n}return Math.min(e,this.max)|0},ry.prototype.reset=function(){this.attempts=0},ry.prototype.setMin=function(e){this.ms=e},ry.prototype.setMax=function(e){this.max=e},ry.prototype.setJitter=function(e){this.jitter=e};var iy=class extends W_{constructor(e,t){var n;super(),this.nsps={},this.subs=[],e&&typeof e==`object`&&(t=e,e=void 0),t||={},t.path=t.path||`/socket.io`,this.opts=t,$_(this,t),this.reconnection(t.reconnection!==!1),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor((n=t.randomizationFactor)??.5),this.backoff=new ry({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(t.timeout==null?2e4:t.timeout),this._readyState=`closed`,this.uri=e;let r=t.parser||qv;this.encoder=new r.Encoder,this.decoder=new r.Decoder,this._autoConnect=t.autoConnect!==!1,this._autoConnect&&this.open()}reconnection(e){return arguments.length?(this._reconnection=!!e,e||(this.skipReconnect=!0),this):this._reconnection}reconnectionAttempts(e){return e===void 0?this._reconnectionAttempts:(this._reconnectionAttempts=e,this)}reconnectionDelay(e){var t;return e===void 0?this._reconnectionDelay:(this._reconnectionDelay=e,(t=this.backoff)==null||t.setMin(e),this)}randomizationFactor(e){var t;return e===void 0?this._randomizationFactor:(this._randomizationFactor=e,(t=this.backoff)==null||t.setJitter(e),this)}reconnectionDelayMax(e){var t;return e===void 0?this._reconnectionDelayMax:(this._reconnectionDelayMax=e,(t=this.backoff)==null||t.setMax(e),this)}timeout(e){return arguments.length?(this._timeout=e,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&this.backoff.attempts===0&&this.reconnect()}open(e){if(~this._readyState.indexOf(`open`))return this;this.engine=new Nv(this.uri,this.opts);let t=this.engine,n=this;this._readyState=`opening`,this.skipReconnect=!1;let r=ey(t,`open`,function(){n.onopen(),e&&e()}),i=t=>{this.cleanup(),this._readyState=`closed`,this.emitReserved(`error`,t),e?e(t):this.maybeReconnectOnOpen()},a=ey(t,`error`,i);if(this._timeout!==!1){let e=this._timeout,n=this.setTimeoutFn(()=>{r(),i(Error(`timeout`)),t.close()},e);this.opts.autoUnref&&n.unref(),this.subs.push(()=>{this.clearTimeoutFn(n)})}return this.subs.push(r),this.subs.push(a),this}connect(e){return this.open(e)}onopen(){this.cleanup(),this._readyState=`open`,this.emitReserved(`open`);let e=this.engine;this.subs.push(ey(e,`ping`,this.onping.bind(this)),ey(e,`data`,this.ondata.bind(this)),ey(e,`error`,this.onerror.bind(this)),ey(e,`close`,this.onclose.bind(this)),ey(this.decoder,`decoded`,this.ondecoded.bind(this)))}onping(){this.emitReserved(`ping`)}ondata(e){try{this.decoder.add(e)}catch(e){this.onclose(`parse error`,e)}}ondecoded(e){K_(()=>{this.emitReserved(`packet`,e)},this.setTimeoutFn)}onerror(e){this.emitReserved(`error`,e)}socket(e,t){let n=this.nsps[e];return n?this._autoConnect&&!n.active&&n.connect():(n=new ny(this,e,t),this.nsps[e]=n),n}_destroy(e){let t=Object.keys(this.nsps);for(let e of t){let t=this.nsps[e];if(t.active)return}this._close()}_packet(e){let t=this.encoder.encode(e);for(let n=0;n<t.length;n++)this.engine.write(t[n],e.options)}cleanup(){this.subs.forEach(e=>e()),this.subs.length=0,this.decoder.destroy()}_close(){this.skipReconnect=!0,this._reconnecting=!1,this.onclose(`forced close`)}disconnect(){return this._close()}onclose(e,t){var n;this.cleanup(),(n=this.engine)==null||n.close(),this.backoff.reset(),this._readyState=`closed`,this.emitReserved(`close`,e,t),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;let e=this;if(this.backoff.attempts>=this._reconnectionAttempts)this.backoff.reset(),this.emitReserved(`reconnect_failed`),this._reconnecting=!1;else{let t=this.backoff.duration();this._reconnecting=!0;let n=this.setTimeoutFn(()=>{e.skipReconnect||(this.emitReserved(`reconnect_attempt`,e.backoff.attempts),!e.skipReconnect&&e.open(t=>{t?(e._reconnecting=!1,e.reconnect(),this.emitReserved(`reconnect_error`,t)):e.onreconnect()}))},t);this.opts.autoUnref&&n.unref(),this.subs.push(()=>{this.clearTimeoutFn(n)})}}onreconnect(){let e=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved(`reconnect`,e)}};const ay={};function oy(e,t){typeof e==`object`&&(t=e,e=void 0),t||={};let n=Fv(e,t.path||`/socket.io`),r=n.source,i=n.id,a=n.path,o=ay[i]&&a in ay[i].nsps,s=t.forceNew||t[`force new connection`]||t.multiplex===!1||o,c;return s?c=new iy(r,t):(ay[i]||(ay[i]=new iy(r,t)),c=ay[i]),n.query&&!t.query&&(t.query=n.queryKey),c.socket(n.path,t)}Object.assign(oy,{Manager:iy,Socket:ny,io:oy,connect:oy});function sy(e,t,n,r,i,a){e.emit(`generateMessage`,t,n,r,i,a)}function cy(e,t){e.on(`showNotice`,t)}function ly(e,t){e.on(`updateNodeText`,t)}function uy(e,t){e.on(`createNode`,async(e,n,r,i,a,o,s)=>{try{let c=await t(e,n,r,i,a,o);s(c)}catch(e){console.error(`[createNode] Handler error:`,e),s({message:e instanceof Error?e.message:`Unknown error`})}})}function dy(e,t){e.on(`deleteEdge`,t)}function fy(e,t){e.on(`addEdge`,t)}function py(e,t){e.on(`addAgentMessage`,t)}function my(e,t){e.on(`addStep`,t)}function hy(e,t){e.on(`setNodeStatus`,t)}function gy(e,t){e.on(`setNodeColor`,t)}function _y(e,t){e.on(`deleteNode`,t)}function vy(e,t){e.on(`searchNoteInVault`,async(e,n)=>{try{let r=await t(e);n(r)}catch(e){console.error(`[searchNoteInVault] Handler error:`,e),n({message:e instanceof Error?e.message:`Unknown error`})}})}const yy=e=>{let t=[];for(let n=0;n<e;n++)t.push((16*Math.random()|0).toString(16));return t.join(``)},by=async(e,t,n,r,i)=>{if(!e)return;let a=e.getData();a&&(e.importData({edges:[...a.edges,{...i,id:t,fromNode:n.node.id,fromSide:n.side,toNode:r.node.id,toSide:r.side}],nodes:a.nodes}),await e.requestFrame())},xy=10,Sy=5,Cy=250;function wy(e,t,n){let r=Array.from(e.nodes.values());for(let e of r){let n=t.x-xy,r=t.x+t.width+xy,i=t.y-xy,a=t.y+t.height+xy,o=e.x,s=e.x+e.width,c=e.y,l=e.y+e.height,u=!(r<=o||n>=s),d=!(a<=c||i>=l);if(u&&d)return!0}return!1}function Ty(e,t,n){let r=Array.from(e.nodes.values()),i=new Set(n?.map(e=>e.id)||[]),a=0;for(let e of r){if(i.has(e.id))continue;let n={x:t.x+t.width/2,y:t.y+t.height/2},r={x:e.x+e.width/2,y:e.y+e.height/2},o=Math.sqrt((n.x-r.x)**2+(n.y-r.y)**2),s=(t.width+e.width)/2+(t.height+e.height)/2+xy*2;o<s&&(a+=(s-o)/s*100)}return a}function Ey(e){let t=(e%360+360)%360;return t>=315||t<45?`right`:t>=45&&t<135?`bottom`:t>=135&&t<225?`left`:`top`}function Dy(e,t,n,r){if(t.length===0)throw Error(`At least one parent node is required`);let i=[],a=1,o=50,s=3;for(console.log(`Starting search with diameter: 250px, base radius: 250px`);i.length===0&&a<=o;){let c=[];for(let e=0;e<s&&a+e<=o;e++){let t=a+e,n=Cy*t;c.push(n)}console.log(`Searching batch ${a} with radii: ${c.map(e=>Math.round(e)).join(`, `)}px`);for(let a of t){let o={x:a.x+a.width/2,y:a.y+a.height/2};for(let s of c)for(let c=0;c<360;c+=Sy){let l=c*Math.PI/180,u=o.x+Math.cos(l)*s,d=o.y+Math.sin(l)*s,f={x:u-n/2,y:d-r/2,width:n,height:r};if(!wy(e,f,t)){let n=Ty(e,f,t),r=Math.sqrt((u-o.x)**2+(d-o.y)**2),l={position:f,parentNode:a,side:Ey(c),radius:s,angle:c,distanceFromParent:r,collisionScore:n};i.push(l)}}}if(a+=s,i.length>0){console.log(`Found ${i.length} candidate positions after ${a} radii checks`);break}}if(i.length===0)throw Error(`No safe positions found even after checking ${a} radii (limit: ${o})`);i.sort((e,t)=>e.collisionScore===t.collisionScore?e.radius===t.radius?e.distanceFromParent-t.distanceFromParent:e.radius-t.radius:e.collisionScore-t.collisionScore);let c=i[0];return console.log(`Selected best position: radius=${Math.round(c.radius)}px, angle=${c.angle}°, collision_score=${c.collisionScore.toFixed(2)}`),{position:c.position,bestParent:c.parentNode,side:c.side}}function Oy(e,t,n){let r=Array.from(e.nodes.values());if(r.length===0)return{x:100,y:100,width:t,height:n};let i=-1/0,a=-1/0;return r.forEach(e=>{i=Math.max(i,e.x+e.width),a=Math.max(a,e.y+e.height)}),{x:i+100,y:a+100,width:t,height:n}}const ky=async(e,t,n,r,i)=>{if(console.log(`createNode with new exhaustive algorithm`,e,t,n,r,i),!t||t.length===0)throw Error(`At least one parent node is required`);let a=n?.color??t[0].color,o=n?.size?.width??300,s=n?.size?.height??300,c;try{c=Dy(e,t,o,s)}catch(n){console.error(`Exhaustive search failed, using emergency positioning:`,n);let r=Oy(e,o,s);c={position:r,bestParent:t[0],side:`right`}}let{position:l,bestParent:u,side:d}=c,f=e.createTextNode({pos:{x:l.x,y:l.y},size:{height:l.height,width:l.width},text:n?.text,focus:!1});f.color=a,r&&f.setData(r),e.deselectAll(),e.addNode(f);let p=t.map(async t=>{let n=yy(16),r={x:t.x+t.width/2,y:t.y+t.height/2},o={x:f.x+f.width/2,y:f.y+f.height/2},s=o.x-r.x,c=o.y-r.y,l,u;Math.abs(s)>Math.abs(c)?s>0?(l=`right`,u=`left`):(l=`left`,u=`right`):c>0?(l=`bottom`,u=`top`):(l=`top`,u=`bottom`);let d={...i,color:a};return await by(e,n,{side:l,node:t},{side:u,node:f},d),n});return await Promise.all(p),e.requestSave(),f};function Ay(e){let t=e.workspace.getLeavesOfType(`canvas`),n=t.sort((e,t)=>t.activeTime-e.activeTime);for(let e of n)if(console.log(`leaf`,e),e.tabHeaderEl?.classList?.contains(`is-active`))return e.view;return null}function jy(e,t){let n=e.workspace.getLeavesOfType(`canvas`);for(let e of n){let n=e.view;if(n.state){if(n.state.file===t)return n}else if(n.file.path===t)return n}return null}function My(e){let t=Ay(e);return t?.canvas??null}function Ny(e,t){let n=jy(e,t);return n?(e.workspace.setActiveLeaf(n.leaf),n?.canvas??null):null}function Py(e,t){try{return e()}catch{return t}}function Fy(e,t){Py(()=>{e.setting?.openTabById?.(t)},void 0)}function Iy(e){Py(()=>{e.setting?.open?.()},void 0)}var Ly=z({__name:`Card`,props:{class:{}},setup(e){let t=e;return(e,n)=>(H(),U(`div`,{"data-slot":`card`,class:j(I(Pm)(`bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm`,t.class))},[ro(e.$slots,`default`)],2))}}),Ry=Ly,zy=z({__name:`CardContent`,props:{class:{}},setup(e){let t=e;return(e,n)=>(H(),U(`div`,{"data-slot":`card-content`,class:j(I(Pm)(`px-6`,t.class))},[ro(e.$slots,`default`)],2))}}),By=zy;const Vy=[{name:`Connect Ideas`,description:`Analyze content and create a network of related ideas using systems thinking to identify meaningful connections across different domains.`,prompt:`<task>
Analyze this node and identify connections to other concepts, creating a network of related ideas using systems thinking and network effects principles.
</task>

<mental_models>
- Network effects: Ideas become more valuable when connected
- Systems thinking: Understanding relationships and feedback loops
- Second-order thinking: What connections lead to what other connections?
</mental_models>

<instructions>
1. Identify the core concepts in this node
2. Think of related ideas, theories, or concepts that connect to this content
3. Create child nodes for each major connection with:
   - The related concept/idea
   - How it connects to the original content
   - Why this connection is meaningful
   - What new insights emerge from this connection
4. Consider connections across different domains (interdisciplinary thinking)
5. Look for both obvious and non-obvious relationships
</instructions>

<connection_types>
- Causal relationships (what causes what)
- Analogical connections (similar patterns in different domains)
- Contradictory ideas (what challenges this concept)
- Supporting evidence from other fields
- Historical parallels or precedents
- Future implications and trends
</connection_types>

<output_format>
Create multiple child nodes titled "Connection: [Related Concept]" with detailed explanations of how ideas relate and what insights emerge from these connections.
</output_format>`},{name:`First Principles`,description:`Break down complex concepts to their fundamental truths, questioning assumptions and rebuilding understanding from the ground up.`,prompt:`<task>
Break down the content of this node to its fundamental truths and rebuild understanding from the ground up using first principles thinking.
</task>

<mental_models>
- First principles thinking: Strip away assumptions to find fundamental truths
- Occam's razor: Seek the simplest explanation that accounts for the facts
- The map is not the territory: Distinguish between models and reality
</mental_models>

<instructions>
1. Identify all assumptions embedded in the current content
2. Question each assumption: "Is this necessarily true?"
3. Break down to the most basic, undeniable facts
4. Rebuild the concept from these fundamentals
5. Compare the rebuilt understanding with the original
6. Identify what was assumption vs. what is fundamental truth
</instructions>

<analysis_framework>
For each major claim or concept:
- What evidence supports this as a fundamental truth?
- What assumptions are we making?
- If we started from scratch, what would we conclude?
- What would someone from a completely different background think?
- What are the core mechanisms at work here?
</analysis_framework>

<output_format>
Create a child node titled "First Principles: [Topic]" with:
- Fundamental truths identified
- Assumptions questioned and evaluated
- Rebuilt understanding from basics
- Comparison with original assumptions
- New insights gained from this analysis
</output_format>`},{name:`Mental Models`,description:`Generate comprehensive multi-perspective analysis using diverse analytical lenses to reveal hidden patterns and insights.`,prompt:`<persona>You are a strategic thinking facilitator specializing in multi-perspective analysis and knowledge synthesis. You excel at breaking down complex problems into interconnected insights using diverse analytical frameworks.
</persona>

<task>
Generate a comprehensive multi-perspective analysis by creating interconnected notes that explore the topic/problem from diverse analytical angles, revealing hidden patterns, assumptions, and possibilities.
</task>

<thinking_process>
1. First, identify the core challenge or uncertainty
2. Select 3-5 complementary analytical lenses based on the nature of the content
3. For each lens, think through:
   - What unique perspective does this lens offer?
   - What patterns or insights become visible?
   - What assumptions are challenged?
   - What new questions emerge?
4. Look for connections and tensions between different perspectives
5. Synthesize emergent insights that weren't visible from any single viewpoint
</thinking_process>

<analytical_lenses>
Dynamically select from these based on relevance:

Strategic Lenses:
- Stakeholder Mapping: Who gains, who loses, who decides?
- Resource Flows: What moves where and why?
- Power Dynamics: Where does influence concentrate?
- Timeline Analysis: How does this evolve over time?

Cognitive Lenses:
- Assumption Hunting: What are we taking for granted?
- Counterfactual Thinking: What if the opposite were true?
- Analogical Reasoning: What does this remind us of?
- First Principles: What's fundamentally true here?

Systems Lenses:
- Feedback Loops: What reinforces or dampens?
- Bottlenecks: Where does flow get restricted?
- Emergence: What properties arise from interactions?
- Boundaries: What's included vs excluded?

Decision Lenses:
- Option Space: What choices actually exist?
- Reversibility: What can be undone?
- Information Value: What would we pay to know?
- Regret Minimization: What would we wish we'd considered?
</analytical_lenses>

<output_structure>
Create a network of notes with that will be connected with the selected note, following the architecture:

1. **Overview Note**: "[Topic] - Multi-Perspective Analysis"
   - Problem/situation summary
   - Key uncertainties identified
   - Map of analytical lenses applied
   - Links to all perspective notes

2. **Perspective Notes** (one per lens): "[Lens Name]: [Topic]"
   - Why this lens matters here
   - Key observations through this lens
   - Unique insights revealed
   - Critical questions raised
   - Connections to other perspectives

3. **Synthesis Note**: "Emergent Insights: [Topic]"
   - Patterns across perspectives
   - Productive tensions identified
   - Novel understanding achieved
   - Actionable next steps
   - Remaining uncertainties worth exploring

4. **Optional Deep-Dive Notes**: For particularly rich insights
   - Detailed exploration of specific findings
   - Evidence and examples
   - Implications and applications
</output_structure>

<quality_criteria>
- Each perspective should reveal something non-obvious
- Perspectives should be genuinely different, not variations of the same view
- Connections between perspectives should generate new insights
- The synthesis should be more than the sum of parts
- Output should reduce confusion while honoring complexity
</quality_criteria>

<adaptation_guidance>
- For technical problems: Emphasize systems and first-principles lenses
- For human/social challenges: Prioritize stakeholder and power dynamics
- For strategic decisions: Focus on options, timeline, and regret minimization
- For creative blocks: Use analogical and counterfactual thinking
- When completely stuck: Start with assumption hunting and inversion
</adaptation_guidance>`},{name:`Action Items`,description:`Convert insights and knowledge into systematic, executable action plans with clear outcomes and implementation strategies.`,prompt:`<context>
You are an execution strategist helping users convert knowledge into systematic action. You have access to a note graph and can create or modify notes to build comprehensive implementation plans.
</context>

<objective>
Analyze the selected note(s) to extract core insights and architect a results-driven action blueprint that bridges the gap between understanding and execution.
</objective>

<thinking_framework>
Apply these cognitive strategies:
1. Outcome Mapping: Define clear end-states before determining paths
2. Force Field Analysis: Map driving and restraining forces for each action
3. Pre-mortem Planning: Anticipate failures to design preventive measures
4. Leverage Points: Identify high-impact interventions in the system
</thinking_framework>

<process>
<step_1>
Deconstruct the note content:
- Extract 3-5 fundamental insights or principles
- Identify implicit assumptions and dependencies
- Note any referenced resources or connections
</step_1>

<step_2>
For each insight, design actions using the RAPIDS framework:
- Results: What measurable outcome will this create?
- Activities: What specific behaviors must occur?
- Prerequisites: What must be true/available first?
- Indicators: How will progress be tracked?
- Dependencies: What external factors influence success?
- Scenarios: What if things go wrong? What if they go better?
</step_2>

<step_3>
Structure actions by:
- Effort/Impact matrix (prioritize high impact, low effort)
- Sequential dependencies (what must happen first)
- Resource constraints (time, attention, tools)
- Risk exposure (what could derail progress)
</step_3>
</process>

<output_specification>
Generate a new note titled "Implementation Blueprint: [Core Topic]" containing:

## 🎯 Target Outcomes
[List 2-3 specific, measurable end results]

## 🔍 Key Insights Applied
[Brief summary of insights being actioned]

## 📋 Action Sequence
For each action:
### Action [Number]: [Descriptive Title]
- **What**: [Specific behavior/task]
- **Why**: [Link to insight & expected impact]
- **When**: [Trigger/timeline/frequency]
- **Success Looks Like**: [Observable criteria]
- **Resources Needed**: [Tools/people/information]
- **Failure Modes**: [Common pitfalls + prevention]
- **If Blocked**: [Alternative approach]
- **Next Action**: [What follows completion]

## 📊 Progress Dashboard
[Simple tracking method for the action set]

## 🔄 Review Triggers
[When/how to revisit and adjust the plan]
</output_specification>

<quality_criteria>
- Actions must be specific enough to do tomorrow
- Each action connects clearly to source insights
- Failure scenarios have mitigation strategies
- Progress is measurable without complex tracking
- The plan adapts to different scenarios
</quality_criteria>`},{name:`Assumptions Check`,description:`Systematically identify, examine, and challenge hidden assumptions and cognitive biases in arguments and beliefs.`,prompt:`<persona>
You are a critical thinking analyst specialized in uncovering hidden assumptions and cognitive biases in arguments, ideas, and beliefs.
</persona>

<context>
You're analyzing content from a note graph where users want to examine the validity of their thinking. Selected notes (if any) contain ideas, arguments, or beliefs that may rest on unexamined assumptions.
</context>

<task>
Systematically identify, examine, and challenge all assumptions within the content to help users think more clearly and avoid logical pitfalls.
</task>

<thinking_framework>
Apply these analytical lenses:
- Inversion: "What if the opposite were true?"
- First Principles: "What do we know for certain vs. what do we assume?"
- Devil's Advocate: "What would a skeptic say?"
- Hidden Dependencies: "What must be true for this to work?"
- Alternative Explanations: "What else could explain this?"
</thinking_framework>

<analysis_steps>
<step_1>
Surface all assumptions:
- Explicit statements taken as given
- Implicit beliefs underlying the logic
- Cultural or contextual assumptions
- Causal assumptions (A leads to B)
- Value judgments presented as facts
</step_1>

<step_2>
For each assumption, investigate:
- Is this actually true or just believed to be true?
- What evidence supports this?
- What evidence contradicts this?
- Who benefits from this assumption?
- What's the cost of being wrong?
</step_2>

<step_3>
Challenge through inversion:
- State the opposite of each assumption
- Explore scenarios where the opposite is true
- Identify which assumptions are most fragile
- Consider hybrid possibilities (partially true)
</step_3>
</analysis_steps>

<instructions>
1. Read through all content carefully
2. Extract every claim, belief, or statement that relies on assumptions
3. Categorize assumptions by type (factual, causal, value-based, etc.)
4. Apply the thinking framework to each major assumption
5. Rate assumption strength (1-10) based on evidence
6. Suggest ways to test or validate uncertain assumptions
7. Highlight which assumptions are most critical to the overall argument
</instructions>

<output_format>
Create a comprehensive analysis note with:

**Title:** "⚠️ Assumption Analysis: [Main Topic]"

**Summary:** Brief overview of key findings

**Assumptions Identified:**
For each assumption:
- **Assumption:** [Clear statement]
- **Type:** [Factual/Causal/Value/Cultural/etc.]
- **Evidence For:** [What supports this]
- **Evidence Against:** [What contradicts this]
- **If Inverted:** [What if opposite is true?]
- **Confidence Level:** [1-10 with reasoning]
- **Testing Method:** [How to validate]

**Critical Findings:**
- Most questionable assumptions
- Assumptions with highest impact if wrong
- Alternative interpretations overlooked

**Recommendations:**
- Which assumptions need immediate validation
- How to strengthen the argument
- Alternative approaches to consider
</output_format>

<tone>
Constructively skeptical, thorough, and intellectually honest. Challenge ideas respectfully while maintaining focus on improving thinking quality.
</tone>

<example_questions>
When analyzing, constantly ask:
- "How do we know this is true?"
- "What are we not seeing?"
- "Could there be another explanation?"
- "What would need to change for this to be false?"
- "Are we confusing correlation with causation?"
- "What biases might be influencing this view?"
</example_questions>`},{name:`Learning Path`,description:`Design comprehensive knowledge acquisition frameworks that transform information into mastery through systematic progression.`,prompt:`<persona>
You are an expert learning architect with deep expertise in cognitive science, instructional design, and knowledge management. You excel at creating personalized learning ecosystems that adapt to individual needs.
</persona>

<task>
Design a comprehensive knowledge acquisition framework that transforms raw information into mastery through systematic progression and adaptive learning strategies.
</task>

<context>
The user needs to master a complex topic but lacks a clear roadmap. Success means creating a learning journey that:
- Identifies and fills knowledge gaps systematically
- Builds competence through progressive challenges
- Ensures long-term retention and practical application
- Adapts to the learner's pace and style
</context>

<thinking_process>
Before creating the framework, analyze:
1. What is the learner's current relationship with this topic?
2. What are the hidden prerequisites often overlooked?
3. How can we create feedback loops for continuous improvement?
4. What real-world applications will cement understanding?
5. How do we measure true comprehension vs surface knowledge?
</thinking_process>

<framework_components>
<knowledge_mapping>
- Competence audit: Map what you truly understand vs what you think you know
- Dependency graph: Visualize how concepts interconnect and build upon each other
- Difficulty gradient: Order topics by cognitive load and prerequisite requirements
</knowledge_mapping>

<learning_architecture>
- Foundation phase: Core mental models and fundamental principles
- Construction phase: Building blocks and pattern recognition
- Integration phase: Connecting concepts across domains
- Mastery phase: Teaching others and creating original work
</learning_architecture>

<practice_design>
- Micro-challenges: 5-minute daily exercises targeting specific skills
- Project milestones: Real-world applications at each competence level
- Failure scenarios: Deliberately difficult problems to expose gaps
- Peer teaching: Explain concepts to validate understanding
</practice_design>

<retention_system>
- Active recall protocols: Question sets that force retrieval
- Spaced interval calendar: Optimal review timing based on forgetting curves
- Concept chaining: Link new knowledge to existing mental models
- Application diary: Document real-world uses of learned concepts
</retention_system>
</framework_components>

<output_requirements>
Generate a multi-dimensional learning blueprint that includes:

1. **Competence Baseline**
   - Current knowledge inventory with confidence ratings
   - Misconception identification and correction plan
   - Learning style assessment results

2. **Progressive Mastery Ladder**
   - Atomic skills breakdown with clear success criteria
   - Checkpoint assessments at each level
   - Alternative paths for different learning preferences

3. **Resource Ecosystem**
   - Primary sources mapped to specific objectives
   - Supplementary materials for different perspectives
   - Community connections for peer learning

4. **Implementation Schedule**
   - Daily/weekly/monthly learning rhythms
   - Buffer time for struggle and consolidation
   - Celebration milestones for motivation

5. **Evolution Metrics**
   - Leading indicators of progress
   - Competence verification methods
   - Adaptation triggers for course correction
</output_requirements>

<format>
Structure the output as an interactive learning contract with:
- Executive summary of the journey ahead
- Visual roadmap with decision points
- Detailed phase-by-phase breakdown
- Self-assessment tools and trackers
- Quick reference guides for each stage
</format>

<tone>
Empowering yet realistic, acknowledging that mastery requires effort while providing clear, achievable steps forward. Balance academic rigor with practical accessibility.
</tone>`},{name:`Decision Framework`,description:`Create systematic decision-making frameworks for complex choices using proven mental models and evaluation methods.`,prompt:`<context>
The user needs a comprehensive decision-making framework that can be applied to complex business or personal decisions.
They want to move beyond intuitive decision-making to a systematic approach that reduces bias, considers multiple perspectives, and accounts for uncertainty.
Success means creating a reusable framework that leads to better outcomes and fewer decision regrets.

The output will be used in a knowledge graph/notes system, include questions and context. that supports markdown formatting and note linking, not XML output.
</context>

<task>
Analyze the provided content and construct a multi-layered decision-making framework that integrates proven mental models, incorporates systematic evaluation methods, and provides clear implementation guidance. Use the context and your knowledge about the user's situation to create the best decision framework.
</task>

<thinking_approach>
Before creating the framework, think through these steps:
1. Identify the core decision types and complexity levels in the content
2. Select the most relevant mental models for each decision type  
3. Design evaluation criteria that balance quantitative and qualitative factors
4. Build in safeguards against common cognitive biases
5. Create feedback loops for continuous improvement
</thinking_approach>

<mental_models>
Integrate these proven mental models:
- Decision matrix: Systematic scoring of options against weighted criteria
- Opportunity cost analysis: Explicit consideration of trade-offs and alternatives foregone
- Margin of safety: Building buffers for uncertainty and downside protection
- Incentive mapping: Understanding how different stakeholders' motivations align or conflict
- Pre-mortem analysis: Anticipating failure modes before they occur
- Reversibility assessment: Evaluating the cost and feasibility of changing course
- Second-order thinking: Considering consequences of consequences
- Base rate analysis: Using historical data and outside view for calibration
</mental_models>

<framework_components>
Include these core components in the decision framework:

Decision Definition:
- Clear problem statement with specific scope and boundaries
- Key assumptions and constraints
- Decision timeline and urgency level

Stakeholder Analysis:
- Primary and secondary stakeholders
- Their interests, concerns, and decision criteria
- Power dynamics and influence mapping

Options Generation:
- Systematic brainstorming of alternatives
- Including "do nothing" and hybrid options
- Creative options beyond obvious choices

Evaluation Matrix:
- Weighted criteria based on strategic priorities
- Quantitative metrics where possible
- Qualitative assessments with clear scoring rubrics
- Risk-adjusted scoring considering uncertainty

Risk Assessment:
- Probability and impact analysis for each option
- Scenario planning (best case, worst case, most likely)
- Identification of key assumptions and sensitivities
- Mitigation strategies for top risks

Implementation Planning:
- Resource requirements and timeline
- Key milestones and decision gates
- Monitoring metrics and feedback mechanisms
- Contingency plans and pivot triggers

Humand-in-the-loop:
- in each step, if you need human to provide more information, you should leave questions.
</framework_components>

<output_format>
Provide your response in formats:

Connected Notes Structure:
Create a decision tree using multiple interconnected notes:

- Main Framework Note: Overview and navigation hub
- Decision Types Notes: Separate notes for different decision categories
- Mental Models Notes: Individual notes for each mental model with examples
- Process Templates Notes: Step-by-step guides and checklists
- Case Study Notes: Examples and lessons learned

Use [[Note Title]] format to create links between notes. Structure it so that:
- The main framework links to all sub-components
- Each mental model note links back to relevant decision types
- Process templates reference specific mental models
- Case studies demonstrate the complete workflow


- At the end of the framework, create a FINAL decision note: With title "FINAL" and guide for AI to make the decision, this node will be read by AI after user answer all the question, the will manual invoke you again to create the final note.
</output_format>

<tone>
Professional yet practical. Focus on actionable insights rather than theoretical concepts. Use clear, concise language that busy decision-makers can quickly understand and apply. Include specific examples where helpful to illustrate key points.
</tone>

<quality_standards>
The framework should be:
- Comprehensive yet usable in real-world time constraints
- Flexible enough to adapt to different decision contexts
- Grounded in proven decision science principles
- Include both individual and group decision-making considerations
- Provide clear success metrics and improvement mechanisms
- Formatted for easy navigation and cross-referencing in a notes system
- Free of XML tags in the actual output content
</quality_standards>`},{name:`Research Guide`,description:`Design strategic research approaches and investigation frameworks for systematic knowledge discovery and validation.`,prompt:`<persona>
You are a Strategic Research Architect specializing in knowledge discovery and systematic investigation design.
</persona>

<context>
The user has provided content that requires deeper investigation. Your role is to architect a research strategy that uncovers hidden insights, validates assumptions, and expands understanding through methodical inquiry.
</context>

<task>
Design an adaptive research ecosystem that evolves based on discoveries, creating a living framework for continuous knowledge development.
</task>

<thinking_framework>
Apply these cognitive lenses sequentially:
1. Knowledge Archaeology: Excavate implicit assumptions and buried questions
2. Hypothesis Cascading: Generate interconnected research hypotheses 
3. Evidence Triangulation: Design multi-source validation approaches
4. Insight Synthesis: Create frameworks for integrating findings
</thinking_framework>

<research_architecture>
<discovery_layers>
- Surface Layer: Obvious questions and immediate gaps
- Structural Layer: Underlying patterns and relationships
- Deep Layer: Fundamental assumptions and paradigms
- Meta Layer: Questions about the questions themselves
</discovery_layers>

<investigation_streams>
For each knowledge gap identified:
<stream>
  <trigger>What initiates this line of inquiry?</trigger>
  <hypothesis>What do we suspect might be true?</hypothesis>
  <null_hypothesis>What would disprove our assumption?</null_hypothesis>
  <methodology>
    - Data collection approach
    - Analysis framework
    - Validation criteria
  </methodology>
  <dependencies>What must be understood first?</dependencies>
  <emergence>What new questions might arise?</emergence>
</stream>
</investigation_streams>

<research_dynamics>
- Convergent paths: Where multiple inquiries meet
- Divergent branches: Where one question splits into many
- Recursive loops: Where findings circle back to refine earlier questions
- Emergent threads: Unexpected directions that arise during research
</research_dynamics>
</research_architecture>

<exemplar>
Topic: "Impact of remote work on team innovation"
<stream>
  <trigger>Observation of changing collaboration patterns</trigger>
  <hypothesis>Virtual environments alter creative ideation processes</hypothesis>
  <null_hypothesis>Innovation metrics remain unchanged regardless of work location</null_hypothesis>
  <methodology>
    - Mixed-methods study comparing innovation outputs
    - Network analysis of communication patterns
    - Longitudinal tracking of project outcomes
  </methodology>
  <dependencies>Define "innovation" metrics first</dependencies>
  <emergence>How do hybrid models compare? Cultural factors?</emergence>
</stream>
</exemplar>

<format>
Structure your research design as:

## Research Ecosystem: [Topic]

### Knowledge Landscape
- Current terrain (what we know)
- Uncharted territories (what we don't know)
- Contested zones (areas of disagreement)

### Investigation Matrix
| Research Thread | Priority | Method | Timeline | Success Indicator |
|----------------|----------|---------|----------|-------------------|
| [Specific question] | High/Med/Low | [Approach] | [Duration] | [Metric] |

### Discovery Protocols
1. **Phase 1: Foundation Building**
   - Essential definitions and boundaries
   - Baseline data collection
   
2. **Phase 2: Exploration**
   - Hypothesis testing
   - Pattern recognition
   
3. **Phase 3: Integration**
   - Synthesis of findings
   - Theory development

### Adaptive Mechanisms
- Pivot triggers (when to change direction)
- Escalation criteria (when to deepen investigation)
- Termination conditions (when enough is known)

### Knowledge Assets
- Data repositories to create
- Analytical frameworks to develop
- Visualization tools needed
- Documentation standards
</format>

<tone>
Intellectually rigorous yet accessible, balancing systematic methodology with creative exploration. Emphasize actionability and practical next steps.
</tone>

<output_validation>
Ensure the research design:
✓ Addresses root causes, not just symptoms
✓ Includes falsifiable hypotheses
✓ Balances breadth and depth
✓ Accommodates unexpected discoveries
✓ Provides clear decision points
✓ Generates transferable insights
</output_validation>`},{name:`Rewrite Notes`,description:`Transform verbose, unstructured notes into clear, actionable, and well-organized content while preserving key insights.`,prompt:`<persona>
You are an expert content editor specializing in transforming verbose, unstructured notes into clear, actionable, and well-organized content. You excel at distilling complex information into its essential components while maintaining all critical insights.
</persona>

<task>
Rewrite the selected notes to be more concise, direct, and structured while preserving all important information and insights. Transform rambling thoughts into clear, scannable content that communicates effectively.
</task>

<rewriting_principles>
1. **Clarity First**: Every sentence should have a clear purpose and meaning
2. **Structure Over Stream**: Organize thoughts logically rather than chronologically
3. **Active Voice**: Use direct, active language that shows who does what
4. **Eliminate Redundancy**: Remove repetitive ideas and unnecessary words
5. **Hierarchy Matters**: Use headings, bullets, and formatting to show relationships
6. **Actionable Language**: Convert vague concepts into specific, actionable statements
</rewriting_principles>

<content_transformation>
**From Verbose to Concise:**
- Remove filler words and unnecessary qualifiers
- Combine related sentences into single, powerful statements
- Replace long phrases with precise terms
- Cut redundant explanations

**From Scattered to Structured:**
- Group related ideas under clear headings
- Use bullet points for lists and key points
- Create logical flow from general to specific
- Add transitions that guide the reader

**From Passive to Active:**
- Convert passive constructions to active voice
- Make subjects and actions explicit
- Use strong verbs instead of weak verb + noun combinations
- Eliminate unnecessary "there is/are" constructions

**From Abstract to Concrete:**
- Replace vague terms with specific examples
- Add measurable criteria where possible
- Convert concepts into actionable steps
- Include relevant context and constraints
</content_transformation>

<structural_framework>
For each rewritten section, apply this hierarchy:

**Level 1: Core Message**
- What is the main point in one sentence?
- Why does this matter?

**Level 2: Key Components**
- What are the 3-5 essential elements?
- How do they relate to each other?

**Level 3: Supporting Details**
- What evidence or examples support each component?
- What specific actions or implications follow?

**Level 4: Context and Connections**
- How does this connect to other concepts?
- What assumptions or prerequisites exist?
</structural_framework>

<output_format>
Structure the rewritten content as:

# [Clear, Descriptive Title]

## Executive Summary
[2-3 sentences capturing the essence]

## Key Points
- **Point 1**: [Concise statement with brief explanation]
- **Point 2**: [Concise statement with brief explanation]
- **Point 3**: [Concise statement with brief explanation]

## Detailed Breakdown
### [Section 1 Title]
[Structured content with clear paragraphs, bullets, or numbered lists]

### [Section 2 Title]
[Structured content with clear paragraphs, bullets, or numbered lists]

## Related Concepts
- [Connection 1]: [Brief explanation]
- [Connection 2]: [Brief explanation]

## Questions for Further Exploration
- [Specific question that emerged from the content]
- [Specific question that emerged from the content]
</output_format>

<quality_checklist>
Before finalizing, ensure the rewritten content:
✓ Reduces word count by at least 20% while preserving meaning
✓ Uses clear headings and subheadings for navigation
✓ Employs bullet points and lists for scannable information
✓ Maintains logical flow from introduction to conclusion
✓ Uses active voice and strong verbs throughout
✓ Eliminates jargon or explains necessary technical terms
</quality_checklist>

<tone>
Professional yet accessible. Direct and confident without being abrupt. Focus on clarity and usefulness over academic formality. Write as if explaining to an intelligent colleague who needs the information quickly.
</tone>

<special_instructions>
- If the original content contains multiple unrelated topics, separate them into distinct sections
- If there are contradictory statements, highlight them and suggest resolution
- If key information seems missing, note what additional details would be helpful
- Preserve any unique insights or creative connections from the original
- Maintain the author's voice while improving structure and clarity
</special_instructions>`},{name:`Feature theory`,description:`Analyze trends and provide evidence-based assumptions about future developments using strategic forecasting frameworks.`,prompt:`<role>You are a strategic analyst and futurist with 15+ years of experience in trend analysis and future forecasting.</role>
<instructions>
Analyze and provide evidence-based assumptions about the future of the given topic.
</instructions>
Use the following mental models for systematic analysis:
1. Systems Thinking Lens:

Identify key system components
Analyze relationships and feedback loops
Understand ripple effects and interconnections

2. Scenario Planning Framework:

Identify main driving forces
Develop 3-4 plausible scenarios (optimistic, realistic, pessimistic, disruptive)
Assess probability and impact of each scenario

3. 5 Whys Analysis:

Dig deep into root causes of current trends
Understand underlying drivers of change
Identify sustainable vs. temporary factors

Analysis Process:

First, think step-by-step in <thinking> tags
Apply each mental model systematically
Synthesize insights to form final assumptions
</instructions>


<output_format>
Structure your response as follows:
<thinking>
[Your step-by-step thinking process - analyze the topic, apply mental models, consider influencing factors]
</thinking>
<current_state_analysis>
Current State:

Key aspects of the topic today
Ongoing trends and developments
Main challenges and opportunities
</current_state_analysis>

<driving_forces>
Key Driving Forces:

[Force 1] - Impact level & rationale
[Force 2] - Impact level & rationale
[Force 3] - Impact level & rationale
[Force 4] - Impact level & rationale
[Force 5] - Impact level & rationale
</driving_forces>

<future_scenarios>
Future Scenarios:
Scenario 1: [Scenario Name] (Probability: X%)

Situation description
Factors leading to this scenario
Key impacts and implications

Scenario 2: [Scenario Name] (Probability: X%)

[Same structure]

Scenario 3: [Scenario Name] (Probability: X%)

[Same structure]

Scenario 4: [Scenario Name] (Probability: X%)

[Same structure]
</future_scenarios>

<key_assumptions>
10 Key Future Assumptions:

[Assumption 1]

Confidence level: [High/Medium/Low]
Evidence base: [Supporting evidence and logic]
Impact if true: [Description of consequences]


[Assumption 2]

Confidence level: [High/Medium/Low]
Evidence base: [Supporting evidence and logic]
Impact if true: [Description of consequences]


[Assumption 3]

[Same structure for all 10 assumptions]



[Continue through assumption 10]
</key_assumptions>
<critical_uncertainties>
Critical Uncertainties:

[Uncertainty 1]: Why it's hard to predict and potential impact
[Uncertainty 2]: [Same structure]
[Uncertainty 3]: [Same structure]
[Uncertainty 4]: [Same structure]
</critical_uncertainties>

<strategic_implications>
Strategic Implications:

Key opportunities to capture
Risks to mitigate
Short-term action recommendations (1-2 years)
Long-term preparation recommendations (3-5 years)
Monitoring indicators to track
</strategic_implications>

<confidence_assessment>
Overall Confidence Assessment:

High confidence assumptions: [List 2-3]
Medium confidence assumptions: [List 2-3]
Low confidence assumptions: [List 2-3]
Key factors that could change these assumptions
</confidence_assessment>
</output_format>

<tone>
Maintain an analytical, objective, and evidence-based tone. Avoid overly confident predictions - instead, express confidence levels and explain the reasoning behind assumptions. Use clear, accessible language while maintaining analytical depth.
</tone>`},{name:`Expand Ideas`,description:`Systematically break down complex topics into comprehensive subtopic hierarchies and populate them with key insights.`,prompt:`<task>
Systematically expand the selected topic into a comprehensive knowledge structure through a two-phase approach: first creating a hierarchical subtopic framework, then populating each subtopic with key insights.
</task>

<mental_models>
- Tree thinking: Breaking complex topics into logical hierarchies
- Pyramid principle: Organizing information from general to specific
- Mind mapping: Creating associative knowledge networks
- Domain decomposition: Systematically dividing topics into manageable components
</mental_models>

<process>
**Phase 1: Subtopic Structure Creation**
1. Analyze the main topic to identify 4-6 primary subtopics
2. For each primary subtopic, create 2-4 secondary subtopics
3. For complex areas, add tertiary subtopics where beneficial
4. Create nodes with descriptive titles only (no content yet)
5. Ensure logical hierarchy and comprehensive coverage

**Phase 2: Key Insights Population**
1. For each created subtopic node, identify 3-5 key insights
2. Focus on actionable, memorable, and valuable information
3. Include practical applications, important principles, or critical knowledge
4. Ensure insights are specific to that subtopic
5. Connect insights across subtopics where relevant
</process>

<subtopic_generation_guidelines>
- Use parallel structure in naming (consistent grammatical patterns)
- Ensure MECE principle (Mutually Exclusive, Collectively Exhaustive)
- Create meaningful hierarchies that aid understanding
- Include both theoretical and practical aspects
- Consider different perspectives or approaches
- Balance breadth and depth appropriately
</subtopic_generation_guidelines>

<insight_development_criteria>
For each subtopic, include insights that are:
- **Actionable**: Can be applied immediately
- **Counter-intuitive**: Challenge common assumptions
- **Evidence-based**: Supported by research or experience
- **Memorable**: Easy to recall and share
- **Practical**: Solve real problems or add value
</insight_development_criteria>

<output_format>
**Phase 1 Output:**
Create child nodes with titles following this pattern:
- "Primary Topic 1: [Descriptive Name]"
  - "Secondary 1.1: [Specific Aspect]"
  - "Secondary 1.2: [Specific Aspect]"
- "Primary Topic 2: [Descriptive Name]"
  - "Secondary 2.1: [Specific Aspect]"
  - "Secondary 2.2: [Specific Aspect]"
  - "Secondary 2.3: [Specific Aspect]"

**Phase 2 Output:**
For each subtopic node, add content structured as:
## Key Insights
• **Insight 1**: [Specific, actionable knowledge point]
• **Insight 2**: [Important principle or finding]
• **Insight 3**: [Practical application or technique]
• **Insight 4**: [Critical consideration or warning]
• **Insight 5**: [Connection to broader concepts]
</output_format>

<quality_standards>
- Comprehensive coverage without overwhelming detail
- Clear logical progression from general to specific
- Balanced depth across all subtopics
- Practical value in every insight
- Natural connections between related subtopics
- Hierarchical structure that aids navigation and understanding
</quality_standards>`}],Hy={class:`space-y-1`},Uy={class:`text-left`},Wy={class:`text-sm text-neutral-200 font-medium`},Gy={class:`text-xs text-neutral-500 line-clamp-2`};var Ky=z({__name:`Presets`,emits:[`preset-selected`],setup(e,{emit:t}){let n=t,r=e=>{n(`preset-selected`,e)};return(e,t)=>(H(),U(`div`,Hy,[(H(!0),U(B,null,to(I(Vy),e=>(H(),W(I(Ry),{key:e.name,class:`w-full p-0 cursor-pointer bg-neutral-750 hover:bg-neutral-700 border border-neutral-600 hover:border-neutral-500 transition-colors`,onClick:t=>r(e)},{default:R(()=>[K(I(By),{class:`p-3`},{default:R(()=>[G(`div`,Uy,[G(`div`,Wy,Xe(e.name),1),G(`div`,Gy,Xe(e.description),1)])]),_:2},1024)]),_:2},1032,[`onClick`]))),128))]))}}),qy=Ky;const Jy={class:`p-4 border-t border-neutral-700`},Yy={class:`flex items-center space-x-2`},Xy={class:`flex-1 relative`},Zy={class:`flex items-center justify-between mt-2 text-xs text-neutral-500`},Qy={class:`flex items-center space-x-2`},$y={key:0,class:`flex items-center space-x-1`},eb={key:0,class:`flex items-center space-x-1`};var tb=z({__name:`CommandInputFooter`,props:{placeholder:{default:`Enter command or prompt...`},statusText:{default:`Press Enter to execute`},disabled:{type:Boolean,default:!1}},emits:[`command-submit`],setup(e,{emit:t}){let n=e,r=t,i=F(``),a=()=>{i.value.trim()&&!n.disabled&&(r(`command-submit`,i.value.trim()),i.value=``)},o=e=>{e.key===`Enter`&&!e.ctrlKey&&!e.shiftKey&&(e.preventDefault(),a())};return(e,t)=>(H(),U(`footer`,Jy,[G(`div`,Yy,[G(`div`,Xy,[K(oh,{modelValue:i.value,"onUpdate:modelValue":t[0]||=e=>i.value=e,placeholder:e.placeholder,disabled:e.disabled,class:j([`pr-10 text-neutral-200 placeholder:text-neutral-500 transition-all duration-200`,e.disabled?`bg-neutral-800 border-yellow-500/30 focus:border-yellow-500/50 cursor-not-allowed`:`bg-neutral-800 border-neutral-600 focus:border-neutral-500 hover:border-neutral-500`]),onKeypress:o},null,8,[`modelValue`,`placeholder`,`disabled`,`class`]),K(zm,{variant:`ghost`,size:`icon`,disabled:!i.value.trim()||e.disabled,class:j([`absolute right-1 top-1/2 transform -translate-y-1/2 size-8 transition-all duration-200`,e.disabled?`text-yellow-500 hover:text-yellow-400 hover:bg-yellow-500/10 disabled:opacity-50`:`text-neutral-400 hover:text-neutral-200 hover:bg-neutral-700 disabled:opacity-50`]),onClick:a},{default:R(()=>[K(I(Rh),{class:`size-4`})]),_:1},8,[`disabled`,`class`])])]),G(`div`,Zy,[G(`span`,null,Xe(e.statusText),1),G(`div`,Qy,[K(uu,{"enter-active-class":`transition-all duration-300 ease-out`,"enter-from-class":`opacity-0 scale-95`,"enter-to-class":`opacity-100 scale-100`,"leave-active-class":`transition-all duration-200 ease-in`,"leave-from-class":`opacity-100 scale-100`,"leave-to-class":`opacity-0 scale-95`},{default:R(()=>[e.disabled?(H(),U(`div`,$y,[K(I(Ih),{class:`size-3 text-yellow-500 animate-spin`}),t[1]||=G(`span`,{class:`text-yellow-400 font-medium`},` Processing... `,-1)])):el(``,!0)]),_:1}),K(uu,{"enter-active-class":`transition-all duration-300 ease-out`,"enter-from-class":`opacity-0 scale-95`,"enter-to-class":`opacity-100 scale-100`,"leave-active-class":`transition-all duration-200 ease-in`,"leave-from-class":`opacity-100 scale-100`,"leave-to-class":`opacity-0 scale-95`},{default:R(()=>[e.disabled?el(``,!0):(H(),U(`div`,eb,[K(I(Th),{class:`size-2 text-green-500 fill-current pulse`}),t[2]||=G(`span`,{class:`text-green-400 font-medium`},` Ready `,-1)]))]),_:1})])])]))}}),nb=tb;const rb={class:`flex flex-col h-full`},ib={id:`processing-area`,class:`flex-1 overflow-y-auto p-4 space-y-6`},ab={class:`text-center py-8`},ob={class:`w-16 h-16 bg-neutral-700 rounded-full flex items-center justify-center mx-auto mb-4`};var sb=z({__name:`ViewHome`,emits:[`command-submit`,`preset-selected`],setup(e,{emit:t}){let n=$o(`useAiPlugin`),r=t,i=e=>{r(`command-submit`,e)},a=e=>{r(`preset-selected`,e)};return(e,t)=>(H(),U(`div`,rb,[G(`main`,ib,[G(`div`,ab,[G(`div`,ob,[K(I(_h),{class:`text-neutral-300 size-8`})]),t[0]||=G(`h2`,{class:`text-lg text-neutral-200 mb-2`},`Ready to Assist`,-1),t[1]||=G(`p`,{class:`text-neutral-400`},` Enter a command or prompt below to start processing `,-1)]),K(qy,{onPresetSelected:a})]),K(nb,{onCommandSubmit:i})]))}}),cb=sb;const lb=Bm(()=>{let e=F(new Map),t=F(null),n=F(!1),r=F(null),i=J(()=>t.value?e.value.get(t.value):null),a=J(()=>i.value?.messages||[]),o=J(()=>Array.from(e.value.values()).sort((e,t)=>t.updatedAt.getTime()-e.updatedAt.getTime())),s=J(()=>t.value!==null&&i.value!==null),c=t=>{if(n.value)return console.warn(`Message generation already in progress`),!1;let i=e.value.get(t);if(!i)return console.error(`Thread with id ${t} not found`),!1;n.value=!0;let a={id:`temp-msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,role:`assistant`,content:``,timestamp:new Date};return r.value=a,!0},l=(i,a=`info`)=>{if(!n.value||!t.value)return console.warn(`No message generation in progress`),!1;let o=e.value.get(t.value);if(!o)return console.error(`Active thread ${t.value} not found`),!1;let s={id:`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,role:`assistant`,content:i,timestamp:new Date,level:a};return o.messages.push(s),o.updatedAt=new Date,e.value.set(t.value,o),n.value=!1,r.value=null,!0},u=(t=`New Conversation`,n)=>{let r=n||`thread-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,i={id:r,title:t,messages:[],createdAt:new Date,updatedAt:new Date,isActive:!1};return e.value.set(r,i),i},d=n=>{let r=e.value.get(n);if(!r)return console.error(`Thread with id ${n} not found`),!1;if(t.value){let n=e.value.get(t.value);n&&(n.isActive=!1,e.value.set(t.value,n))}return r.isActive=!0,r.updatedAt=new Date,e.value.set(n,r),t.value=n,!0},f=(t,n)=>{let r=e.value.get(t);if(!r)return console.error(`Thread with id ${t} not found`),null;let i={...n,id:`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,timestamp:new Date};return r.messages.push(i),r.updatedAt=new Date,e.value.set(t,r),i},p=(t,n,r)=>{let i=e.value.get(t);if(!i)return console.error(`Thread with id ${t} not found`),!1;let a=i.messages.findIndex(e=>e.id===n);return a===-1?(console.error(`Message with id ${n} not found in thread ${t}`),!1):(i.messages[a]={...i.messages[a],...r},i.updatedAt=new Date,e.value.set(t,i),!0)},m=(t,n)=>{let r=e.value.get(t);if(!r)return console.error(`Thread with id ${t} not found`),!1;let i=r.messages.findIndex(e=>e.id===n);return i===-1?(console.error(`Message with id ${n} not found in thread ${t}`),!1):(r.messages.splice(i,1),r.updatedAt=new Date,e.value.set(t,r),!0)},h=n=>{let r=e.value.delete(n);return r&&t.value===n&&(t.value=null),r},g=(t,n)=>{let r=e.value.get(t);return r?(r.title=n,r.updatedAt=new Date,e.value.set(t,r),!0):(console.error(`Thread with id ${t} not found`),!1)},_=()=>{e.value.clear(),t.value=null},v=(e=`New Conversation`,t)=>{let n=u(e,t);return d(n.id),n},y=t=>e.value.get(t),b=t=>e.value.has(t);return{threads:J(()=>e.value),activeThreadId:t,activeThread:i,activeMessages:a,threadList:o,hasActiveThread:s,isGenerating:n,currentAssistantMessage:r,createThread:u,setActiveThread:d,addMessage:f,updateMessage:p,removeMessage:m,removeThread:h,updateThreadTitle:g,clearAllThreads:_,createAndActivateThread:v,getThread:y,hasThread:b,startMessageGeneration:c,finishMessageGeneration:l}}),ub={class:`flex flex-col h-full`},db={class:`p-4 border-b border-neutral-700`},fb={class:`flex items-center space-x-2`},pb={class:`flex-1 overflow-y-auto p-4`},mb={key:0,class:`text-center py-8`},hb={key:1,class:`text-center py-12`},gb={key:2,class:`space-y-3`},_b={class:`flex items-start justify-between mb-2`},vb={class:`flex items-center space-x-2 text-xs text-neutral-400`},yb={class:`text-neutral-200 font-medium mb-2 leading-tight`},bb={class:`text-neutral-400 text-sm mb-3 line-clamp-2`};var xb=z({__name:`ViewHistory`,setup(e){let t=$o(`useAiPlugin`),{threadList:n,removeThread:r,setActiveThread:i}=lb(),a=F(!1),o=F([]),s=async()=>{a.value=!0;try{await new Promise(e=>setTimeout(e,500)),o.value=[{id:`1`,timestamp:new Date(Date.now()-1e3*60*30),prompt:`Create a mind map about machine learning`,preview:`Generated a comprehensive mind map covering supervised learning, unsupervised learning...`},{id:`2`,timestamp:new Date(Date.now()-1e3*60*60*2),prompt:`Explain quantum computing concepts`,preview:`Created detailed explanation nodes about qubits, superposition, entanglement...`},{id:`3`,timestamp:new Date(Date.now()-1e3*60*60*24),prompt:`Design a project workflow`,preview:`Built a project management workflow with phases, tasks, and deliverables...`}]}catch(e){console.error(`Failed to load history:`,e)}finally{a.value=!1}},c=e=>{o.value=o.value.filter(t=>t.id!==e)},l=e=>{console.log(`Restoring conversation:`,e.prompt)},u=e=>{let t=new Date,n=t.getTime()-e.getTime(),r=Math.floor(n/(1e3*60)),i=Math.floor(n/(1e3*60*60)),a=Math.floor(n/(1e3*60*60*24));return r<60?`${r}m ago`:i<24?`${i}h ago`:`${a}d ago`};return Ra(()=>{s()}),(e,t)=>(H(),U(`div`,ub,[G(`div`,db,[G(`div`,fb,[K(I(Mh),{class:`text-neutral-300 size-5`}),t[0]||=G(`h2`,{class:`text-lg text-neutral-200 font-medium`},`Conversation History`,-1)]),t[1]||=G(`p`,{class:`text-neutral-400 text-sm mt-1`},` View and restore previous conversations `,-1)]),G(`main`,pb,[a.value?(H(),U(`div`,mb,t[2]||=[G(`div`,{class:`animate-spin w-6 h-6 border-2 border-neutral-600 border-t-neutral-300 rounded-full mx-auto mb-2`},null,-1),G(`p`,{class:`text-neutral-400`},`Loading history...`,-1)])):o.value.length===0?(H(),U(`div`,hb,[K(I(Lh),{class:`text-neutral-600 size-12 mx-auto mb-4`}),t[3]||=G(`h3`,{class:`text-neutral-300 text-lg mb-2`},`No History Yet`,-1),t[4]||=G(`p`,{class:`text-neutral-500`},` Your conversation history will appear here once you start using the plugin. `,-1)])):(H(),U(`div`,gb,[(H(!0),U(B,null,to(o.value,e=>(H(),U(`div`,{key:e.id,class:`bg-neutral-800 rounded-lg p-4 border border-neutral-700 hover:border-neutral-600 transition-colors`},[G(`div`,_b,[G(`div`,vb,[K(I(Eh),{class:`size-3`}),G(`span`,null,Xe(u(e.timestamp)),1)]),K(zm,{variant:`ghost`,size:`sm`,class:`text-neutral-500 hover:text-red-400 h-6 w-6 p-0`,onClick:t=>c(e.id)},{default:R(()=>[K(I(Wh),{class:`size-3`})]),_:2},1032,[`onClick`])]),G(`h4`,yb,Xe(e.prompt),1),G(`p`,bb,Xe(e.preview),1),K(zm,{variant:`outline`,size:`sm`,class:`text-neutral-300 border-neutral-600 hover:border-neutral-500`,onClick:t=>l(e)},{default:R(()=>t[5]||=[q(` Restore Conversation `)]),_:2,__:[5]},1032,[`onClick`])]))),128))]))])]))}}),Sb=xb,Cb=z({__name:`Tabs`,props:{defaultValue:{},orientation:{},dir:{},activationMode:{},modelValue:{},unmountOnHide:{type:Boolean},asChild:{type:Boolean},as:{},class:{}},emits:[`update:modelValue`],setup(e,{emit:t}){let n=e,r=t,i=Um(n,`class`),a=Qf(i,r);return(e,t)=>(H(),W(I(vp),il({"data-slot":`tabs`},I(a),{class:I(Pm)(`flex flex-col gap-2`,n.class)}),{default:R(()=>[ro(e.$slots,`default`)]),_:3},16,[`class`]))}}),wb=Cb,Tb=z({__name:`TabsContent`,props:{value:{},forceMount:{type:Boolean},asChild:{type:Boolean},as:{},class:{}},setup(e){let t=e,n=Um(t,`class`);return(e,r)=>(H(),W(I(yp),il({"data-slot":`tabs-content`,class:I(Pm)(`flex-1 outline-none`,t.class)},I(n)),{default:R(()=>[ro(e.$slots,`default`)]),_:3},16,[`class`]))}}),Eb=Tb,Db=z({__name:`TabsList`,props:{loop:{type:Boolean},asChild:{type:Boolean},as:{},class:{}},setup(e){let t=e,n=Um(t,`class`);return(e,r)=>(H(),W(I(bp),il({"data-slot":`tabs-list`},I(n),{class:I(Pm)(`bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]`,t.class)}),{default:R(()=>[ro(e.$slots,`default`)]),_:3},16,[`class`]))}}),Ob=Db,kb=z({__name:`TabsTrigger`,props:{value:{},disabled:{type:Boolean},asChild:{type:Boolean},as:{},class:{}},setup(e){let t=e,n=Um(t,`class`),r=Zf(n);return(e,n)=>(H(),W(I(xp),il({"data-slot":`tabs-trigger`},I(r),{class:I(Pm)(`data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4`,t.class)}),{default:R(()=>[ro(e.$slots,`default`)]),_:3},16,[`class`]))}}),Ab=kb;const jb={key:0,class:`space-y-0`},Mb={class:`flex items-center justify-between py-2 px-1`},Nb={class:`flex items-center space-x-2`},Pb={class:`text-xs font-medium text-neutral-300`},Fb={class:`flex items-center space-x-1`},Ib={key:0,class:`pb-2 px-1`},Lb={key:0,class:`text-xs ml-1 opacity-50`},Rb={class:`bg-neutral-900/40 rounded p-2 border border-neutral-600/50`},zb={class:`text-xs text-neutral-300 whitespace-pre-wrap font-mono leading-tight`},Bb={class:`bg-neutral-900/40 rounded p-2 border border-neutral-600/50`},Vb={key:0},Hb={class:`text-xs text-neutral-300 whitespace-pre-wrap font-mono leading-tight`},Ub={key:1,class:`text-xs text-neutral-500 italic`};var Wb=z({__name:`ToolCallDisplay`,props:{toolCalls:{default:()=>[]},toolResults:{default:()=>[]}},setup(e){let t=e,n=F(new Set),r=e=>{n.value.has(e)?n.value.delete(e):n.value.add(e)},i=e=>JSON.stringify(e,null,2),a=e=>t.toolResults&&t.toolResults[e]!==void 0;return(e,t)=>e.toolCalls&&e.toolCalls.length>0?(H(),U(`div`,jb,[(H(!0),U(B,null,to(e.toolCalls,(o,s)=>(H(),U(`div`,{key:s,class:`border-t border-neutral-600 first:border-t-0`},[G(`div`,Mb,[G(`div`,Nb,[K(zm,{variant:`ghost`,size:`sm`,class:`text-neutral-400 hover:text-neutral-200 h-5 w-5 p-0`,onClick:e=>r(s)},{default:R(()=>[n.value.has(s)?(H(),W(I(bh),{key:1,class:`size-3`})):(H(),W(I(xh),{key:0,class:`size-3`}))]),_:2},1032,[`onClick`]),K(I(Dh),{class:`text-blue-400 size-3`}),G(`span`,Pb,Xe(o.name),1)]),G(`div`,Fb,[K(I(Rh),{class:`text-yellow-400 size-2.5`}),a(s)?(H(),W(I(Sh),{key:0,class:`text-green-400 size-2.5`})):el(``,!0)])]),n.value.has(s)?(H(),U(`div`,Ib,[K(I(wb),{"default-value":`args`,class:`w-full`},{default:R(()=>[K(I(Ob),{class:`grid w-full grid-cols-2 h-8`},{default:R(()=>[K(I(Ab),{value:`args`,class:`text-xs`},{default:R(()=>t[0]||=[q(` Args `)]),_:1,__:[0]}),K(I(Ab),{value:`results`,class:`text-xs`,disabled:!a(s)},{default:R(()=>[t[1]||=q(` Results `),a(s)?el(``,!0):(H(),U(`span`,Lb,`(empty)`))]),_:2,__:[1]},1032,[`disabled`])]),_:2},1024),K(I(Eb),{value:`args`,class:`mt-2`},{default:R(()=>[G(`div`,Rb,[G(`pre`,zb,Xe(i(o.args)),1)])]),_:2},1024),K(I(Eb),{value:`results`,class:`mt-2`},{default:R(()=>[G(`div`,Bb,[a(s)?(H(),U(`div`,Vb,[G(`pre`,Hb,Xe(i(e.toolResults[s])),1)])):(H(),U(`div`,Ub,` No results available `))])]),_:2},1024)]),_:2},1024)])):el(``,!0)]))),128))])):el(``,!0)}}),Gb=Wb;const Kb={class:`flex flex-col h-full`},qb={class:`px-3 py-2 border-b border-neutral-700`},Jb={class:`flex items-center justify-between`},Yb={class:`flex items-center space-x-1.5`},Xb={class:`text-sm text-neutral-200 font-medium truncate`},Zb={class:`flex-1 overflow-y-auto py-4 space-y-4`},Qb={class:`flex-1 min-w-0`},$b={key:0,class:`flex items-center justify-between mb-1`},ex={class:`flex items-center space-x-2`},tx={class:`text-sm font-medium text-neutral-200`},nx={class:`text-xs text-neutral-500`},rx={key:0,class:`text-xs text-blue-400 bg-blue-900/30 px-1.5 py-0.5 rounded-full border border-blue-700/50`,title:`Multiple messages grouped together`},ix={key:0,class:`whitespace-pre-wrap mb-3`};var ax=z({__name:`ViewConversation`,props:{activeThread:{default:null},activeMessages:{default:()=>[]},isGenerating:{type:Boolean,default:!1},formatTime:{type:Function,default:e=>e.toLocaleTimeString([],{hour:`2-digit`,minute:`2-digit`})}},emits:[`command-submit`,`copy-message`,`regenerate-response`,`clear-conversation`],setup(e,{emit:t}){let n=$o(`useAiPlugin`),r=e,i=t,a=async e=>{i(`command-submit`,e)},o=async e=>{i(`copy-message`,e)},s=()=>{i(`regenerate-response`)},c=()=>{i(`clear-conversation`)};return(e,t)=>(H(),U(`div`,Kb,[G(`div`,qb,[G(`div`,Jb,[G(`div`,Yb,[K(I(Lh),{class:`text-neutral-300 size-4`}),G(`h2`,Xb,Xe(e.activeThread?.title||`New Conversation`),1)]),K(zm,{variant:`ghost`,size:`sm`,class:`text-neutral-400 hover:text-neutral-200 h-6 w-6 p-0`,onClick:c,title:`Clear conversation`},{default:R(()=>[K(I(Wh),{class:`size-3`})]),_:1})])]),G(`main`,Zb,[(H(!0),U(B,null,to(e.activeMessages,t=>(H(),U(`div`,{key:t.id,class:`flex space-x-2 px-2`},[G(`div`,Qb,[t.content||!t.toolCalls||t.toolCalls.length===0?(H(),U(`div`,$b,[G(`div`,ex,[G(`span`,tx,Xe(t.role===`user`?`You`:`Assistant`),1),G(`span`,nx,Xe(e.formatTime(t.timestamp)),1),t.metadata?.isGrouped?(H(),U(`span`,rx,` grouped `)):el(``,!0)])])):el(``,!0),G(`div`,{class:j([`prose prose-sm max-w-none rounded-lg p-3 border`,t.metadata?.isGrouped?`border-blue-700/30 bg-blue-950/10`:``,!t.content&&t.toolCalls&&t.toolCalls.length>0?`mt-0`:``])},[t.content?(H(),U(`div`,ix,Xe(t.content),1)):el(``,!0),t.toolCalls&&t.toolCalls.length>0?(H(),W(Gb,{key:1,"tool-calls":t.toolCalls,"tool-results":t.toolResults},null,8,[`tool-calls`,`tool-results`])):el(``,!0)],2)])]))),128))]),K(nb,{onCommandSubmit:a,disabled:e.isGenerating,placeholder:`Type your message...`,"status-text":`Enter to send`},null,8,[`disabled`])]))}}),ox=ax;function sx(e,t,n){let r=null,i=()=>{r&&a(),r=e.events.on(t,n)},a=()=>{r&&(e.app.vault.offref(r),r=null)},o=()=>{a(),i()};return Ra(()=>{i()}),Va(()=>{a()}),{startListening:i,stopListening:a,restartListening:o,isListening:()=>r!==null}}const cx={class:`grid grid-rows-[auto_1fr] h-full`},lx={class:`flex items-center justify-center space-x-0.5 border-b border-neutral-700 py-1 px-2`,id:`quick-actions`};var ux=z({__name:`Sidepanel`,setup(e){let t=$o(`useAiPlugin`),n=F(`home`),r=e=>{n.value=e},{activeThread:i,activeMessages:a,activeThreadId:o,hasActiveThread:s,isGenerating:c,currentAssistantMessage:l,createAndActivateThread:u,addMessage:d,removeMessage:f,clearAllThreads:p,startMessageGeneration:m,finishMessageGeneration:h,setActiveThread:g,hasThread:_}=lb(),v=async(e,n=!0)=>{if(!(!e.trim()||c.value)){if(n&&r(`conversation`),!o.value){let e=u();g(e.id)}if(o.value){d(o.value,{role:`user`,content:e.trim()}),m(o.value);try{t.events.trigger(`canvas:generate`,o.value,e)}catch(e){console.error(`Failed to send message:`,e),h(`Sorry, I encountered an error while processing your request. Please try again.`,`error`)}}}},y=async e=>{await v(e,!0)},b=async e=>{await v(e.prompt,!0)},x=async e=>{try{await navigator.clipboard.writeText(e),console.log(`Message copied to clipboard`)}catch(e){console.error(`Failed to copy message:`,e)}},S=()=>{if(!a.value||a.value.length<2)return;let e=[...a.value].reverse().find(e=>e.role===`user`);if(e&&o.value){let t=[...a.value].reverse().find(t=>t.role===`assistant`&&t.timestamp>e.timestamp);t&&f(o.value,t.id),v(e.content,!1)}},C=()=>{p();let e=u(`New Conversation`);d(e.id,{role:`assistant`,content:`Hello! I'm here to help you generate content for your Obsidian canvas. What would you like to create today?`}),t.events.trigger(`conversation:new-thread`,e.id)},w=()=>{if(!s.value){let e=u(`New Conversation`);d(e.id,{role:`assistant`,content:`Hello! I'm here to help you generate content for your Obsidian canvas. What would you like to create today?`})}},ee=(e,t)=>{if(!_(e)){console.warn(`Thread ${e} not found, cannot handle step event`);return}let n={pending:`info`,running:`info`,success:`success`,error:`error`},r=n[t.status]||`info`,i=t.text;t.error&&t.error.message!==i&&(i+=`\n\n**Error:** ${t.error.message}`),t.stepType===`initial`?d(o.value,{role:`assistant`,content:i,level:r,toolCalls:t.toolCalls,toolResults:t.toolResults,metadata:{stepType:t.stepType,stepNumber:t.stepNumber,...t.metadata}}):t.stepType===`complete`?h(i,r):d(o.value,{role:`assistant`,content:i,level:r,toolCalls:t.toolCalls,toolResults:t.toolResults,metadata:{stepType:t.stepType,stepNumber:t.stepNumber,...t.metadata}})};sx(t,`add-step`,ee);let te=()=>{let e=t.manifest.id;try{Iy(t.app),Fy(t.app,e)}catch(e){console.warn(`Failed to open specific settings tab, falling back to general settings:`,e),Iy(t.app)}},T=e=>e.toLocaleTimeString([],{hour:`2-digit`,minute:`2-digit`});return w(),(e,t)=>(H(),U(`div`,cx,[G(`div`,lx,[K(zm,{variant:`ghost`,size:`sm`,class:j([`h-7 w-7 p-0`,n.value===`home`?`text-neutral-200 bg-neutral-700`:`text-neutral-400 hover:text-neutral-200`]),onClick:t[0]||=e=>r(`home`),title:`Home`},{default:R(()=>[K(I(Nh),{class:`size-3`})]),_:1},8,[`class`]),K(zm,{variant:`ghost`,size:`sm`,class:j([`h-7 w-7 p-0`,n.value===`history`?`text-neutral-200 bg-neutral-700`:`text-neutral-400 hover:text-neutral-200`]),onClick:t[1]||=e=>r(`history`),title:`History`},{default:R(()=>[K(I(Mh),{class:`size-3`})]),_:1},8,[`class`]),K(zm,{variant:`ghost`,size:`sm`,class:j([`h-7 w-7 p-0`,n.value===`conversation`?`text-neutral-200 bg-neutral-700`:`text-neutral-400 hover:text-neutral-200`]),onClick:t[2]||=e=>r(`conversation`),title:`Conversation`},{default:R(()=>[K(I(Lh),{class:`size-3`})]),_:1},8,[`class`]),t[3]||=G(`div`,{class:`h-4 w-px bg-neutral-600 mx-1`},null,-1),K(zm,{variant:`ghost`,size:`sm`,class:`text-neutral-400 hover:text-neutral-200 h-7 w-7 p-0`,title:`Refresh`},{default:R(()=>[K(I(Vh),{class:`size-3`})]),_:1}),K(zm,{variant:`ghost`,size:`sm`,class:`text-neutral-400 hover:text-neutral-200 h-7 w-7 p-0`,onClick:te,title:`Settings`},{default:R(()=>[K(I(Hh),{class:`size-3`})]),_:1}),K(zm,{variant:`ghost`,size:`sm`,class:`text-neutral-400 hover:text-neutral-200 h-7 w-7 p-0`,title:`Export`},{default:R(()=>[K(I(Oh),{class:`size-3`})]),_:1})]),(H(),W(Za(n.value===`home`?cb:n.value===`history`?Sb:ox),{class:`flex-1 overflow-y-auto`,onCommandSubmit:y,onPresetSelected:b,"active-thread":I(i),"active-messages":I(a),"is-generating":I(c),"format-time":T,onCopyMessage:x,onRegenerateResponse:S,onClearConversation:C},null,40,[`active-thread`,`active-messages`,`is-generating`]))]))}}),dx=ux,fx=class extends u.ItemView{plugin;vueApp;shadowRoot;vueContainer;constructor(e,t){super(e),this.plugin=t}getViewType(){return`useai-sidepanel`}getDisplayText(){return`UseAI Sidepanel`}async onOpen(){if(this.shadowRoot)return;this.containerEl.empty();let e=document.createElement(`div`);e.classList.add(`h-full`),this.containerEl.appendChild(e),this.shadowRoot=e.attachShadow({mode:`open`}),this.vueContainer=document.createElement(`div`),this.vueContainer.classList.add(`h-full`),this.shadowRoot.appendChild(this.vueContainer),await this.loadStylesIntoShadowDOM(),this.vueApp=ef(dx),this.vueApp.provide(`useAiPlugin`,this.plugin),this.vueApp.mount(this.vueContainer)}async loadStylesIntoShadowDOM(){if(this.shadowRoot)try{let e=this.plugin.manifest.dir||`useai`,t=`${e}/styles.css`,n=await this.plugin.app.vault.adapter.read(t),r=document.createElement(`style`);r.textContent=n,this.shadowRoot.appendChild(r)}catch(e){console.warn(`Failed to load CSS styles via adapter, trying alternative methods:`,e)}}async onClose(){this.vueApp&&(this.vueApp.unmount(),this.vueApp=void 0),this.shadowRoot&&(this.shadowRoot=void 0,this.vueContainer=void 0),this.containerEl.empty()}};function px(e,t){let n=Object.keys(t).map(n=>mx(e,n,t[n]));return n.length===1?n[0]:function(){n.forEach(e=>e())}}function mx(e,t,n){let r=e[t],i=e.hasOwnProperty(t),a=i?r:function(){return Object.getPrototypeOf(e)[t].apply(this,arguments)},o=n(a);return r&&Object.setPrototypeOf(o,r),Object.setPrototypeOf(s,o),e[t]=s,c;function s(...n){return o===a&&e[t]===s&&c(),o.apply(this,n)}function c(){e[t]===s&&(i?e[t]=a:delete e[t]),o!==a&&(o=a,Object.setPrototypeOf(s,r||Function))}}const hx=new WeakSet,gx=new WeakSet,_x=new WeakSet,vx=new WeakSet,yx=(e,t)=>{if(!t.menu)return!1;let n=t.menu.constructor.prototype;return gx.has(n)?!0:(e.register(px(n,{render:t=>function(...n){let r=t.call(this,...n);if(this.menuEl.children.length===0||this.canvas.selection.size!==1)return r;let i=this.canvas.selection.values().next().value;return!i||Object.prototype.hasOwnProperty.call(i,`path`)||Object.prototype.hasOwnProperty.call(i,`bgPath`)||e.events.trigger(`canvas:node-menu`,this,this.canvas,i),r}})),gx.add(n),!0)},bx=(e,t)=>{if(hx.has(t))return!0;let n=Object.getPrototypeOf(t);return e.register(px(n,{addNode(e){return function(...t){let n=e.call(this,...t);return n}},addEdge:e=>function(...t){return t[0].color=t[0].from?.node?.color,e.call(this,...t)},showCreationMenu:n=>function(...r){let i=r[0],a=r[1];return e.events.trigger(`canvas:creation-menu`,i,t,a),n.call(this,...r)}})),hx.add(t),!0},xx=(e,t)=>{let n=t.nodes;return n.size===0?(vx.has(t)||(Sx(e,t),vx.add(t)),!1):Cx(e,t)},Sx=(e,t)=>{if(!hx.has(t)){let n=Object.getPrototypeOf(t);e.register(px(n,{addNode(t){return function(...n){let r=t.call(this,...n);return vx.has(this)&&setTimeout(()=>{Cx(e,this)&&vx.delete(this)},0),r}}}))}},Cx=(e,t)=>{let n=t.nodes;if(n.size===0)return!1;let r=Object.getPrototypeOf(n.values().next().value);return _x.has(r)?!0:(e.register(px(r,{render:e=>function(...t){let n=e.call(this,...t),r=this;return this.nodeEl.getAttribute(`data-patched`)===null&&this.nodeEl.setAttribute(`data-patched`,`true`),n},showMenu:e=>function(...t){let n=t[0],r=this;return n.addSeparator(),n.addItem(e=>{e.setTitle(`Split list to notes`),e.setIcon(`lucide-list`),e.onClick(()=>{})}),e.call(this,...t)}})),_x.add(r),!0)},wx=e=>{let t=e.app.workspace.getLeavesOfType(`canvas`);console.log(`found`,t.length,`canvas leaves`);for(let n of t){let t=n.view.canvas;if(!t)continue;console.log(`canvas`,t);let r=yx(e,t),i=bx(e,t),a=xx(e,t)}return!0};
/*! *****************************************************************************

Copyright (c) Microsoft Corporation.



Permission to use, copy, modify, and/or distribute this software for any

purpose with or without fee is hereby granted.



THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH

REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY

AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,

INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM

LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR

OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR

PERFORMANCE OF THIS SOFTWARE.

***************************************************************************** */
function Tx(e,t,n,r){function i(e){return e instanceof n?e:new n(function(t){t(e)})}return new(n||=Promise)(function(n,a){function o(e){try{c(r.next(e))}catch(e){a(e)}}function s(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){e.done?n(e.value):i(e.value).then(o,s)}c((r=r.apply(e,t||[])).next())})}const Ex=/(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/i,Dx=`Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36,gzip(gfe)`,Ox=/<text start="([^"]*)" dur="([^"]*)">([^<]*)<\/text>/g;var kx=class extends Error{constructor(e){super(`[YoutubeTranscript] 🚨 ${e}`)}},Ax=class extends kx{constructor(){super(`YouTube is receiving too many requests from this IP and now requires solving a captcha to continue`)}},jx=class extends kx{constructor(e){super(`The video is no longer available (${e})`)}},Mx=class extends kx{constructor(e){super(`Transcript is disabled on this video (${e})`)}},Nx=class extends kx{constructor(e){super(`No transcripts are available for this video (${e})`)}},Px=class extends kx{constructor(e,t,n){super(`No transcripts are available in ${e} this video (${n}). Available languages: ${t.join(`, `)}`)}},Fx=class{static fetchTranscript(e,t){var n;return Tx(this,void 0,void 0,function*(){let r=this.retrieveVideoId(e),i=yield fetch(`https://www.youtube.com/watch?v=${r}`,{headers:Object.assign(Object.assign({},t?.lang&&{"Accept-Language":t.lang}),{"User-Agent":Dx})}),a=yield i.text(),o=a.split(`"captions":`);if(o.length<=1)throw a.includes(`class="g-recaptcha"`)?new Ax:a.includes(`"playabilityStatus":`)?new Mx(e):new jx(e);let s=(n=(()=>{try{return JSON.parse(o[1].split(`,"videoDetails`)[0].replace(`
`,``))}catch{return}})())?.playerCaptionsTracklistRenderer;if(!s)throw new Mx(e);if(!(`captionTracks`in s))throw new Nx(e);if(t?.lang&&!s.captionTracks.some(e=>e.languageCode===t?.lang))throw new Px(t?.lang,s.captionTracks.map(e=>e.languageCode),e);let c=(t?.lang?s.captionTracks.find(e=>e.languageCode===t?.lang):s.captionTracks[0]).baseUrl,l=yield fetch(c,{headers:Object.assign(Object.assign({},t?.lang&&{"Accept-Language":t.lang}),{"User-Agent":Dx})});if(!l.ok)throw new Nx(e);let u=yield l.text(),d=[...u.matchAll(Ox)];return d.map(e=>{var n;return{text:e[3],duration:parseFloat(e[2]),offset:parseFloat(e[1]),lang:(n=t?.lang)??s.captionTracks[0].languageCode}})})}static retrieveVideoId(e){if(e.length===11)return e;let t=e.match(Ex);if(t&&t.length)return t[1];throw new kx(`Impossible to retrieve Youtube video ID.`)}};async function Ix(e){let t=e.match(/(?:https?:\/\/)?(?:www\.)?youtube\.com\/watch\?v=([^&]+)/)?.[1];if(!t)throw Error(`Failed to get YouTube ID`);try{let e=await Fx.fetchTranscript(t);return e.reduce((e,t)=>e+t.text+`
`,``)}catch(e){return console.error(`Error fetching YouTube transcript:`,e),`Transcript service is currently unavailable. Please try again later.`}}var Lx=o((exports,t)=>{(function(n,r){typeof exports==`object`&&typeof t==`object`?t.exports=r():typeof define==`function`&&define.amd?define([],r):typeof exports==`object`?exports.Defuddle=r():n.Defuddle=r()})(typeof self<`u`?self:void 0,()=>(()=>{"use strict";var e={0:(e,t,n)=>{Object.defineProperty(t,`__esModule`,{value:!0}),t.mathRules=t.createCleanMathEl=void 0;let r=n(282);t.createCleanMathEl=(e,t,n,r)=>{let i=e.createElement(`math`);if(i.setAttribute(`xmlns`,`http://www.w3.org/1998/Math/MathML`),i.setAttribute(`display`,r?`block`:`inline`),i.setAttribute(`data-latex`,n||``),t?.mathml){let n=e.createElement(`div`);n.innerHTML=t.mathml;let r=n.querySelector(`math`);r&&(i.innerHTML=r.innerHTML)}else n&&(i.textContent=n);return i},t.mathRules=[{selector:r.mathSelectors,element:`math`,transform:(e,n)=>{if(!function(e){return`classList`in e&&`getAttribute`in e&&`querySelector`in e}(e))return e;let i=(0,r.getMathMLFromElement)(e),a=(0,r.getBasicLatexFromElement)(e),o=(0,r.isBlockDisplay)(e),s=(0,t.createCleanMathEl)(n,i,a,o);return e.parentElement&&e.parentElement.querySelectorAll(`
					/* MathJax scripts and previews */
					script[type^="math/"],
					.MathJax_Preview,

					/* External math library scripts */
					script[type="text/javascript"][src*="mathjax"],
					script[type="text/javascript"][src*="katex"]
				`).forEach(e=>e.remove()),s}}]},20:(e,t,n)=>{Object.defineProperty(t,`__esModule`,{value:!0}),t.GrokExtractor=void 0;let r=n(181);class i extends r.ConversationExtractor{constructor(e,t){super(e,t),this.messageContainerSelector=`.relative.group.flex.flex-col.justify-center.w-full`,this.messageBubbles=e.querySelectorAll(this.messageContainerSelector),this.footnotes=[],this.footnoteCounter=0}canExtract(){return!!this.messageBubbles&&this.messageBubbles.length>0}extractMessages(){let e=[];return this.footnotes=[],this.footnoteCounter=0,this.messageBubbles&&this.messageBubbles.length!==0&&this.messageBubbles.forEach(t=>{var n;let r=t.classList.contains(`items-end`),i=t.classList.contains(`items-start`);if(!r&&!i)return;let a=t.querySelector(`.message-bubble`);if(!a)return;let o=``,s=``,c=``;if(r)o=a.textContent||``,s=`user`,c=`You`;else if(i){s=`assistant`,c=`Grok`;let e=a.cloneNode(!0);(n=e.querySelector(`.relative.border.border-border-l1.bg-surface-base`))==null||n.remove(),o=e.innerHTML,o=this.processFootnotes(o)}o.trim()&&e.push({author:c,content:o.trim(),metadata:{role:s}})}),e}getFootnotes(){return this.footnotes}getMetadata(){var e;let t=this.getTitle(),n=(e=this.messageBubbles)?.length||0;return{title:t,site:`Grok`,url:this.url,messageCount:n,description:`Grok conversation with ${n} messages`}}getTitle(){var e,t;let n=(e=this.document.title)?.trim();if(n&&n!==`Grok`&&!n.startsWith(`Grok by `))return n.replace(/\s-\s*Grok$/,``).trim();let r=this.document.querySelector(`${this.messageContainerSelector}.items-end`);if(r){let e=r.querySelector(`.message-bubble`);if(e){let n=(t=e.textContent)?.trim()||``;return n.length>50?n.slice(0,50)+`...`:n}}return`Grok Conversation`}processFootnotes(e){return e.replace(/<a\s+(?:[^>]*?\s+)?href="([^"]*)"[^>]*>(.*?)<\/a>/gi,(e,t,n)=>{if(!t||t.startsWith(`#`)||!t.match(/^https?:\/\//i))return e;let r;if(this.footnotes.find(e=>e.url===t))r=this.footnotes.findIndex(e=>e.url===t)+1;else{this.footnoteCounter++,r=this.footnoteCounter;let e=t;try{let n=new URL(t).hostname.replace(/^www\./,``);e=`<a href="${t}" target="_blank" rel="noopener noreferrer">${n}</a>`}catch{e=`<a href="${t}" target="_blank" rel="noopener noreferrer">${t}</a>`,console.warn(`GrokExtractor: Could not parse URL for footnote: ${t}`)}this.footnotes.push({url:t,text:e})}return`${n}<sup id="fnref:${r}" class="footnote-ref"><a href="#fn:${r}" class="footnote-link">${r}</a></sup>`})}}t.GrokExtractor=i},181:(e,t,n)=>{Object.defineProperty(t,`__esModule`,{value:!0}),t.ConversationExtractor=void 0;let r=n(279),i=n(628);class a extends r.BaseExtractor{getFootnotes(){return[]}extract(){var e;let t=this.extractMessages(),n=this.getMetadata(),r=this.getFootnotes(),a=this.createContentHtml(t,r),o=document.implementation.createHTMLDocument(),s=o.createElement(`article`);s.innerHTML=a,o.body.appendChild(s);let c=new i.Defuddle(o).parse(),l=c.content;return{content:l,contentHtml:l,extractedContent:{messageCount:t.length.toString()},variables:{title:n.title||`Conversation`,site:n.site,description:n.description||`${n.site} conversation with ${t.length} messages`,wordCount:(e=c.wordCount)?.toString()||``}}}createContentHtml(e,t){return`${e.map((t,n)=>{let r=t.timestamp?`<div class="message-timestamp">${t.timestamp}</div>`:``,i=/<p[^>]*>[\s\S]*?<\/p>/i.test(t.content)?t.content:`<p>${t.content}</p>`,a=t.metadata?Object.entries(t.metadata).map(([e,t])=>`data-${e}="${t}"`).join(` `):``;return`\n\t\t\t<div class="message message-${t.author.toLowerCase()}" ${a}>\n\t\t\t\t<div class="message-header">\n\t\t\t\t\t<p class="message-author"><strong>${t.author}</strong></p>\n\t\t\t\t\t${r}\n\t\t\t\t</div>\n\t\t\t\t<div class="message-content">\n\t\t\t\t\t${i}\n\t\t\t\t</div>\n\t\t\t</div>${n<e.length-1?`
<hr>`:``}`}).join(`
`).trim()}\n${t.length>0?`\n\t\t\t<div id="footnotes">\n\t\t\t\t<ol>\n\t\t\t\t\t${t.map((e,t)=>`\n\t\t\t\t\t\t<li class="footnote" id="fn:${t+1}">\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t<a href="${e.url}" target="_blank">${e.text}</a>&nbsp;<a href="#fnref:${t+1}" class="footnote-backref">\u21a9</a>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t`).join(``)}\n\t\t\t\t</ol>\n\t\t\t</div>`:``}`.trim()}}t.ConversationExtractor=a},248:(e,t,n)=>{Object.defineProperty(t,`__esModule`,{value:!0}),t.TwitterExtractor=void 0;let r=n(279);class i extends r.BaseExtractor{constructor(e,t){var n;super(e,t),this.mainTweet=null,this.threadTweets=[];let r=e.querySelector(`[aria-label="Timeline: Conversation"]`);if(!r){let t=e.querySelector(`article[data-testid="tweet"]`);return void(t&&(this.mainTweet=t))}let i=Array.from(r.querySelectorAll(`article[data-testid="tweet"]`)),a=(n=r.querySelector(`section, h2`))?.parentElement;a&&i.forEach((e,t)=>{if(a.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING)return i.splice(t),!1}),this.mainTweet=i[0]||null,this.threadTweets=i.slice(1)}canExtract(){return!!this.mainTweet}extract(){let e=this.extractTweet(this.mainTweet),t=this.threadTweets.map(e=>this.extractTweet(e)).join(`
<hr>
`),n=`\n\t\t\t<div class="tweet-thread">\n\t\t\t\t<div class="main-tweet">\n\t\t\t\t\t${e}\n\t\t\t\t</div>\n\t\t\t\t${t?`\n\t\t\t\t\t<hr>\n\t\t\t\t\t<div class="thread-tweets">\n\t\t\t\t\t\t${t}\n\t\t\t\t\t</div>\n\t\t\t\t`:``}\n\t\t\t</div>\n\t\t`.trim(),r=this.getTweetId(),i=this.getTweetAuthor();return{content:n,contentHtml:n,extractedContent:{tweetId:r,tweetAuthor:i},variables:{title:`Thread by ${i}`,author:i,site:`X (Twitter)`,description:this.createDescription(this.mainTweet)}}}formatTweetText(e){if(!e)return``;let t=document.createElement(`div`);return t.innerHTML=e,t.querySelectorAll(`a`).forEach(e=>{var t;let n=(t=e.textContent)?.trim()||``;e.replaceWith(n)}),t.querySelectorAll(`span, div`).forEach(e=>{e.replaceWith(...Array.from(e.childNodes))}),t.innerHTML.split(`
`).map(e=>e.trim()).filter(e=>e).map(e=>`<p>${e}</p>`).join(`
`)}extractTweet(e){var t,n,r;if(!e)return``;let i=e.cloneNode(!0);i.querySelectorAll(`img[src*="/emoji/"]`).forEach(e=>{if(e.tagName.toLowerCase()===`img`&&e.getAttribute(`alt`)){let t=e.getAttribute(`alt`);t&&e.replaceWith(t)}});let a=(t=i.querySelector(`[data-testid="tweetText"]`))?.innerHTML||``,o=this.formatTweetText(a),s=this.extractImages(e),c=this.extractUserInfo(e),l=(r=(n=e.querySelector(`[aria-labelledby*="id__"]`))?.querySelector(`[data-testid="User-Name"]`))?.closest(`[aria-labelledby*="id__"]`),u=l?this.extractTweet(l):``;return`\n\t\t\t<div class="tweet">\n\t\t\t\t<div class="tweet-header">\n\t\t\t\t\t<span class="tweet-author"><strong>${c.fullName}</strong> <span class="tweet-handle">${c.handle}</span></span>\n\t\t\t\t\t${c.date?`<a href="${c.permalink}" class="tweet-date">${c.date}</a>`:``}\n\t\t\t\t</div>\n\t\t\t\t${o?`<div class="tweet-text">${o}</div>`:``}\n\t\t\t\t${s.length?`\n\t\t\t\t\t<div class="tweet-media">\n\t\t\t\t\t\t${s.join(`
`)}\n\t\t\t\t\t</div>\n\t\t\t\t`:``}\n\t\t\t\t${u?`\n\t\t\t\t\t<blockquote class="quoted-tweet">\n\t\t\t\t\t\t${u}\n\t\t\t\t\t</blockquote>\n\t\t\t\t`:``}\n\t\t\t</div>\n\t\t`.trim()}extractUserInfo(e){var t,n,r,i,a,o,s,c,l;let u=e.querySelector(`[data-testid="User-Name"]`);if(!u)return{fullName:``,handle:``,date:``,permalink:``};let d=u.querySelectorAll(`a`),f=(n=(t=d?.[0])?.textContent)?.trim()||``,p=(i=(r=d?.[1])?.textContent)?.trim()||``;f&&p||(f=(o=(a=u.querySelector(`span[style*="color: rgb(15, 20, 25)"] span`))?.textContent)?.trim()||``,p=(c=(s=u.querySelector(`span[style*="color: rgb(83, 100, 113)"]`))?.textContent)?.trim()||``);let m=e.querySelector(`time`),h=m?.getAttribute(`datetime`)||``;return{fullName:f,handle:p,date:h?new Date(h).toISOString().split(`T`)[0]:``,permalink:(l=m?.closest(`a`))?.href||``}}extractImages(e){var t,n;let r=[`[data-testid="tweetPhoto"]`,`[data-testid="tweet-image"]`,`img[src*="media"]`],i=[],a=(n=(t=e.querySelector(`[aria-labelledby*="id__"]`))?.querySelector(`[data-testid="User-Name"]`))?.closest(`[aria-labelledby*="id__"]`);for(let t of r)e.querySelectorAll(t).forEach(e=>{var t,n;if(!a?.contains(e)&&e.tagName.toLowerCase()===`img`&&e.getAttribute(`alt`)){let r=(t=e.getAttribute(`src`))?.replace(/&name=\w+$/,`&name=large`)||``,a=(n=e.getAttribute(`alt`))?.replace(/\s+/g,` `).trim()||``;i.push(`<img src="${r}" alt="${a}" />`)}});return i}getTweetId(){let e=this.url.match(/status\/(\d+)/);return e?.[1]||``}getTweetAuthor(){var e,t,n;let r=(e=this.mainTweet)?.querySelector(`[data-testid="User-Name"]`),i=r?.querySelectorAll(`a`),a=(n=(t=i?.[1])?.textContent)?.trim()||``;return a.startsWith(`@`)?a:`@${a}`}createDescription(e){var t;return e?((t=e.querySelector(`[data-testid="tweetText"]`))?.textContent||``).trim().slice(0,140).replace(/\s+/g,` `):``}}t.TwitterExtractor=i},258:(e,t,n)=>{Object.defineProperty(t,`__esModule`,{value:!0}),t.YoutubeExtractor=void 0;let r=n(279);class i extends r.BaseExtractor{constructor(e,t,n){super(e,t,n),this.videoElement=e.querySelector(`video`),this.schemaOrgData=n}canExtract(){return!0}extract(){let e=this.getVideoData(),t=e.description||``,n=this.formatDescription(t),r=`<iframe width="560" height="315" src="https://www.youtube.com/embed/${this.getVideoId()}?si=_m0qv33lAuJFoGNh" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><br>${n}`;return{content:r,contentHtml:r,extractedContent:{videoId:this.getVideoId(),author:e.author||``},variables:{title:e.name||``,author:e.author||``,site:`YouTube`,image:Array.isArray(e.thumbnailUrl)&&e.thumbnailUrl[0]||``,published:e.uploadDate,description:t.slice(0,200).trim()}}}formatDescription(e){return`<p>${e.replace(/\n/g,`<br>`)}</p>`}getVideoData(){return this.schemaOrgData&&(Array.isArray(this.schemaOrgData)?this.schemaOrgData.find(e=>e[`@type`]===`VideoObject`):this.schemaOrgData[`@type`]===`VideoObject`?this.schemaOrgData:null)||{}}getVideoId(){return new URLSearchParams(new URL(this.url).search).get(`v`)||``}}t.YoutubeExtractor=i},279:(e,t)=>{Object.defineProperty(t,`__esModule`,{value:!0}),t.BaseExtractor=void 0,t.BaseExtractor=class{constructor(e,t,n){this.document=e,this.url=t,this.schemaOrgData=n}}},282:(e,t)=>{Object.defineProperty(t,`__esModule`,{value:!0}),t.mathSelectors=t.isBlockDisplay=t.getBasicLatexFromElement=t.getMathMLFromElement=void 0,t.getMathMLFromElement=e=>{if(e.tagName.toLowerCase()===`math`){let t=e.getAttribute(`display`)===`block`;return{mathml:e.outerHTML,latex:e.getAttribute(`alttext`)||null,isBlock:t}}let t=e.getAttribute(`data-mathml`);if(t){let e=document.createElement(`div`);e.innerHTML=t;let n=e.querySelector(`math`);if(n){let e=n.getAttribute(`display`)===`block`;return{mathml:n.outerHTML,latex:n.getAttribute(`alttext`)||null,isBlock:e}}}let n=e.querySelector(`.MJX_Assistive_MathML, mjx-assistive-mml`);if(n){let e=n.querySelector(`math`);if(e){let t=e.getAttribute(`display`),r=n.getAttribute(`display`),i=t===`block`||r===`block`;return{mathml:e.outerHTML,latex:e.getAttribute(`alttext`)||null,isBlock:i}}}let r=e.querySelector(`.katex-mathml math`);return r?{mathml:r.outerHTML,latex:null,isBlock:!1}:null},t.getBasicLatexFromElement=e=>{var t,n,r;let i=e.getAttribute(`data-latex`);if(i)return i;if(e.tagName.toLowerCase()===`img`&&e.classList.contains(`latex`)){let t=e.getAttribute(`alt`);if(t)return t;let n=e.getAttribute(`src`);if(n){let e=n.match(/latex\.php\?latex=([^&]+)/);if(e)return decodeURIComponent(e[1]).replace(/\+/g,` `).replace(/%5C/g,`\\`)}}let a=e.querySelector(`annotation[encoding="application/x-tex"]`);if(a?.textContent)return a.textContent.trim();if(e.matches(`.katex`)){let t=e.querySelector(`.katex-mathml annotation[encoding="application/x-tex"]`);if(t?.textContent)return t.textContent.trim()}if(e.matches(`script[type="math/tex"]`)||e.matches(`script[type="math/tex; mode=display"]`))return(t=e.textContent)?.trim()||null;if(e.parentElement){let t=e.parentElement.querySelector(`script[type="math/tex"], script[type="math/tex; mode=display"]`);if(t)return(n=t.textContent)?.trim()||null}return e.getAttribute(`alt`)||(r=e.textContent)?.trim()||null},t.isBlockDisplay=e=>{if(e.getAttribute(`display`)===`block`)return!0;let t=e.className.toLowerCase();if(t.includes(`display`)||t.includes(`block`)||e.closest(`.katex-display, .MathJax_Display, [data-display="block"]`))return!0;let n=e.previousElementSibling;if(n?.tagName.toLowerCase()===`p`||e.matches(`.mwe-math-fallback-image-display`))return!0;if(e.matches(`.katex`))return e.closest(`.katex-display`)!==null;if(e.hasAttribute(`display`))return e.getAttribute(`display`)===`true`;if(e.matches(`script[type="math/tex; mode=display"]`))return!0;if(e.hasAttribute(`display`))return e.getAttribute(`display`)===`true`;let r=e.closest(`[display]`);return!!r&&r.getAttribute(`display`)===`true`},t.mathSelectors=`img.latex[src*="latex.php"],span.MathJax,mjx-container,script[type="math/tex"],script[type="math/tex; mode=display"],.MathJax_Preview + script[type="math/tex"],.MathJax_Display,.MathJax_SVG,.MathJax_MathML,.mwe-math-element,.mwe-math-fallback-image-inline,.mwe-math-fallback-image-display,.mwe-math-mathml-inline,.mwe-math-mathml-display,.katex,.katex-display,.katex-mathml,.katex-html,[data-katex],script[type="math/katex"],math,[data-math],[data-latex],[data-tex],script[type^="math/"],annotation[encoding="application/x-tex"]`.split(`,`).join(`,`)},397:(e,t,n)=>{Object.defineProperty(t,`__esModule`,{value:!0}),t.ClaudeExtractor=void 0;let r=n(181);class i extends r.ConversationExtractor{constructor(e,t){super(e,t),this.articles=e.querySelectorAll(`div[data-testid="user-message"], div[data-testid="assistant-message"], div.font-claude-message`)}canExtract(){return!!this.articles&&this.articles.length>0}extractMessages(){let e=[];return this.articles&&this.articles.forEach(t=>{let n,r;if(t.hasAttribute(`data-testid`)){if(t.getAttribute(`data-testid`)!==`user-message`)return;n=`you`,r=t.innerHTML}else{if(!t.classList.contains(`font-claude-message`))return;n=`assistant`,r=t.innerHTML}r&&e.push({author:n===`you`?`You`:`Claude`,content:r.trim(),metadata:{role:n}})}),e}getMetadata(){let e=this.getTitle(),t=this.extractMessages();return{title:e,site:`Claude`,url:this.url,messageCount:t.length,description:`Claude conversation with ${t.length} messages`}}getTitle(){var e,t,n,r,i;let a=(e=this.document.title)?.trim();if(a&&a!==`Claude`)return a.replace(/ - Claude$/,``);let o=(n=(t=this.document.querySelector(`header .font-tiempos`))?.textContent)?.trim();if(o)return o;let s=(i=(r=this.articles)?.item(0))?.querySelector(`[data-testid="user-message"]`);if(s){let e=s.textContent||``;return e.length>50?e.slice(0,50)+`...`:e}return`Claude Conversation`}}t.ClaudeExtractor=i},458:(e,t,n)=>{Object.defineProperty(t,`__esModule`,{value:!0}),t.HackerNewsExtractor=void 0;let r=n(279);class i extends r.BaseExtractor{constructor(e,t){super(e,t),this.mainPost=e.querySelector(`.fatitem`),this.isCommentPage=this.detectCommentPage(),this.mainComment=this.isCommentPage?this.findMainComment():null}detectCommentPage(){var e;return!!(e=this.mainPost)?.querySelector(`.navs a[href*="parent"]`)}findMainComment(){var e;return(e=this.mainPost)?.querySelector(`.comment`)||null}canExtract(){return!!this.mainPost}extract(){let e=this.getPostContent(),t=this.extractComments(),n=this.createContentHtml(e,t),r=this.getPostTitle(),i=this.getPostAuthor(),a=this.createDescription(),o=this.getPostDate();return{content:n,contentHtml:n,extractedContent:{postId:this.getPostId(),postAuthor:i},variables:{title:r,author:i,site:`Hacker News`,description:a,published:o}}}createContentHtml(e,t){return`\n\t\t\t<div class="hackernews-post">\n\t\t\t\t<div class="post-content">\n\t\t\t\t\t${e}\n\t\t\t\t</div>\n\t\t\t\t${t?`\n\t\t\t\t\t<hr>\n\t\t\t\t\t<h2>Comments</h2>\n\t\t\t\t\t<div class="hackernews-comments">\n\t\t\t\t\t\t${t}\n\t\t\t\t\t</div>\n\t\t\t\t`:``}\n\t\t\t</div>\n\t\t`.trim()}getPostContent(){var e,t,n,r,i,a;if(!this.mainPost)return``;if(this.isCommentPage&&this.mainComment){let a=(e=this.mainComment.querySelector(`.hnuser`))?.textContent||`[deleted]`,o=(t=this.mainComment.querySelector(`.commtext`))?.innerHTML||``,s=this.mainComment.querySelector(`.age`),c=(s?.getAttribute(`title`)||``).split(`T`)[0]||``,l=(r=(n=this.mainComment.querySelector(`.score`))?.textContent)?.trim()||``,u=(i=this.mainPost.querySelector(`.navs a[href*="parent"]`))?.getAttribute(`href`)||``;return`\n\t\t\t\t<div class="comment main-comment">\n\t\t\t\t\t<div class="comment-metadata">\n\t\t\t\t\t\t<span class="comment-author"><strong>${a}</strong></span> \u2022\n\t\t\t\t\t\t<span class="comment-date">${c}</span>\n\t\t\t\t\t\t${l?` \u2022 <span class="comment-points">${l}</span>`:``}\n\t\t\t\t\t\t${u?` \u2022 <a href="https://news.ycombinator.com/${u}" class="parent-link">parent</a>`:``}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="comment-content">${o}</div>\n\t\t\t\t</div>\n\t\t\t`.trim()}let o=this.mainPost.querySelector(`tr.athing`),s=(o?.nextElementSibling,(a=o?.querySelector(`.titleline a`))?.getAttribute(`href`)||``),c=``;s&&(c+=`<p><a href="${s}" target="_blank">${s}</a></p>`);let l=this.mainPost.querySelector(`.toptext`);return l&&(c+=`<div class="post-text">${l.innerHTML}</div>`),c}extractComments(){let e=Array.from(this.document.querySelectorAll(`tr.comtr`));return this.processComments(e)}processComments(e){var t,n,r,i;let a=``,o=new Set,s=-1,c=[];for(let l of e){let e=l.getAttribute(`id`);if(!e||o.has(e))continue;o.add(e);let u=(t=l.querySelector(`.ind img`))?.getAttribute(`width`)||`0`,d=parseInt(u)/40,f=l.querySelector(`.commtext`),p=(n=l.querySelector(`.hnuser`))?.textContent||`[deleted]`,m=l.querySelector(`.age`),h=(i=(r=l.querySelector(`.score`))?.textContent)?.trim()||``;if(!f)continue;let g=`https://news.ycombinator.com/item?id=${e}`,_=(m?.getAttribute(`title`)||``).split(`T`)[0]||``;if(d===0){for(;c.length>0;)a+=`</blockquote>`,c.pop();a+=`<blockquote>`,c=[0],s=0}else if(d<s)for(;c.length>0&&c[c.length-1]>=d;)a+=`</blockquote>`,c.pop();else d>s&&(a+=`<blockquote>`,c.push(d));a+=`<div class="comment">\n\t<div class="comment-metadata">\n\t\t<span class="comment-author"><strong>${p}</strong></span> \u2022\n\t\t<a href="${g}" class="comment-link">${_}</a>\n\t\t${h?` \u2022 <span class="comment-points">${h}</span>`:``}\n\t</div>\n\t<div class="comment-content">${f.innerHTML}</div>\n</div>`,s=d}for(;c.length>0;)a+=`</blockquote>`,c.pop();return a}getPostId(){let e=this.url.match(/id=(\d+)/);return e?.[1]||``}getPostTitle(){var e,t,n,r,i;if(this.isCommentPage&&this.mainComment){let n=(e=this.mainComment.querySelector(`.hnuser`))?.textContent||`[deleted]`,r=(t=this.mainComment.querySelector(`.commtext`))?.textContent||``;return`Comment by ${n}: ${r.trim().slice(0,50)+(r.length>50?`...`:``)}`}return(i=(r=(n=this.mainPost)?.querySelector(`.titleline`))?.textContent)?.trim()||``}getPostAuthor(){var e,t,n;return(n=(t=(e=this.mainPost)?.querySelector(`.hnuser`))?.textContent)?.trim()||``}createDescription(){let e=this.getPostTitle(),t=this.getPostAuthor();return this.isCommentPage?`Comment by ${t} on Hacker News`:`${e} - by ${t} on Hacker News`}getPostDate(){if(!this.mainPost)return``;let e=this.mainPost.querySelector(`.age`);return(e?.getAttribute(`title`)||``).split(`T`)[0]||``}}t.HackerNewsExtractor=i},552:(e,t)=>{Object.defineProperty(t,`__esModule`,{value:!0}),t.isElement=function(e){return e.nodeType===n.ELEMENT_NODE},t.isTextNode=function(e){return e.nodeType===n.TEXT_NODE},t.isCommentNode=function(e){return e.nodeType===n.COMMENT_NODE},t.getComputedStyle=function(e){let t=r(e.ownerDocument);return t?t.getComputedStyle(e):null},t.getWindow=r,t.logDebug=function(e,...t){typeof window<`u`&&window.defuddleDebug&&console.log(`Defuddle:`,e,...t)};let n={ELEMENT_NODE:1,ATTRIBUTE_NODE:2,TEXT_NODE:3,CDATA_SECTION_NODE:4,ENTITY_REFERENCE_NODE:5,ENTITY_NODE:6,PROCESSING_INSTRUCTION_NODE:7,COMMENT_NODE:8,DOCUMENT_NODE:9,DOCUMENT_TYPE_NODE:10,DOCUMENT_FRAGMENT_NODE:11,NOTATION_NODE:12};function r(e){return e.defaultView?e.defaultView:e.ownerWindow?e.ownerWindow:e.window?e.window:null}},608:(e,t)=>{Object.defineProperty(t,`__esModule`,{value:!0}),t.MetadataExtractor=void 0,t.MetadataExtractor=class{static extract(e,t,n){var r,i;let a=``,o=``;try{if(o=(r=e.location)?.href||``,o||=this.getMetaContent(n,`property`,`og:url`)||this.getMetaContent(n,`property`,`twitter:url`)||this.getSchemaProperty(t,`url`)||this.getSchemaProperty(t,`mainEntityOfPage.url`)||this.getSchemaProperty(t,`mainEntity.url`)||this.getSchemaProperty(t,`WebSite.url`)||(i=e.querySelector(`link[rel="canonical"]`))?.getAttribute(`href`)||``,o)try{a=new URL(o).hostname.replace(/^www\./,``)}catch(e){console.warn(`Failed to parse URL:`,e)}}catch{let t=e.querySelector(`base[href]`);if(t)try{o=t.getAttribute(`href`)||``,a=new URL(o).hostname.replace(/^www\./,``)}catch(e){console.warn(`Failed to parse base URL:`,e)}}return{title:this.getTitle(e,t,n),description:this.getDescription(e,t,n),domain:a,favicon:this.getFavicon(e,o,n),image:this.getImage(e,t,n),published:this.getPublished(e,t,n),author:this.getAuthor(e,t,n),site:this.getSite(e,t,n),schemaOrgData:t,wordCount:0,parseTime:0}}static getAuthor(e,t,n){let r;if(r=this.getMetaContent(n,`name`,`sailthru.author`)||this.getMetaContent(n,`property`,`author`)||this.getMetaContent(n,`name`,`author`)||this.getMetaContent(n,`name`,`byl`)||this.getMetaContent(n,`name`,`authorList`),r)return r;let i=this.getSchemaProperty(t,`author.name`)||this.getSchemaProperty(t,`author.[].name`);if(i){let e=i.split(`,`).map(e=>e.trim().replace(/,$/,``).trim()).filter(Boolean);if(e.length>0){let t=[...new Set(e)];return t.length>10&&(t=t.slice(0,10)),t.join(`, `)}}let a=[];if([`[itemprop="author"]`,`.author`,`[href*="author"]`,`.authors a`].forEach(t=>{e.querySelectorAll(t).forEach(e=>{var t;(t=e.textContent)&&t.split(`,`).forEach(e=>{let t=e.trim().replace(/,$/,``).trim(),n=t.toLowerCase();t&&n!==`author`&&n!==`authors`&&a.push(t)})})}),a.length>0){let e=[...new Set(a.map(e=>e.trim()).filter(Boolean))];if(e.length>0)return e.length>10&&(e=e.slice(0,10)),e.join(`, `)}return r=this.getMetaContent(n,`name`,`copyright`)||this.getSchemaProperty(t,`copyrightHolder.name`)||this.getMetaContent(n,`property`,`og:site_name`)||this.getSchemaProperty(t,`publisher.name`)||this.getSchemaProperty(t,`sourceOrganization.name`)||this.getSchemaProperty(t,`isPartOf.name`)||this.getMetaContent(n,`name`,`twitter:creator`)||this.getMetaContent(n,`name`,`application-name`),r||``}static getSite(e,t,n){return this.getSchemaProperty(t,`publisher.name`)||this.getMetaContent(n,`property`,`og:site_name`)||this.getSchemaProperty(t,`WebSite.name`)||this.getSchemaProperty(t,`sourceOrganization.name`)||this.getMetaContent(n,`name`,`copyright`)||this.getSchemaProperty(t,`copyrightHolder.name`)||this.getSchemaProperty(t,`isPartOf.name`)||this.getMetaContent(n,`name`,`application-name`)||this.getAuthor(e,t,n)||``}static getTitle(e,t,n){var r,i;let a=this.getMetaContent(n,`property`,`og:title`)||this.getMetaContent(n,`name`,`twitter:title`)||this.getSchemaProperty(t,`headline`)||this.getMetaContent(n,`name`,`title`)||this.getMetaContent(n,`name`,`sailthru.title`)||(i=(r=e.querySelector(`title`))?.textContent)?.trim()||``;return this.cleanTitle(a,this.getSite(e,t,n))}static cleanTitle(e,t){if(!e||!t)return e;let n=t.replace(/[.*+?^${}()|[\]\\]/g,`\\$&`),r=[`\\s*[\\|\\-\u2013\u2014]\\s*${n}\\s*$`,`^\\s*${n}\\s*[\\|\\-\u2013\u2014]\\s*`];for(let t of r){let n=new RegExp(t,`i`);if(n.test(e)){e=e.replace(n,``);break}}return e.trim()}static getDescription(e,t,n){return this.getMetaContent(n,`name`,`description`)||this.getMetaContent(n,`property`,`description`)||this.getMetaContent(n,`property`,`og:description`)||this.getSchemaProperty(t,`description`)||this.getMetaContent(n,`name`,`twitter:description`)||this.getMetaContent(n,`name`,`sailthru.description`)||``}static getImage(e,t,n){return this.getMetaContent(n,`property`,`og:image`)||this.getMetaContent(n,`name`,`twitter:image`)||this.getSchemaProperty(t,`image.url`)||this.getMetaContent(n,`name`,`sailthru.image.full`)||``}static getFavicon(e,t,n){var r,i;let a=this.getMetaContent(n,`property`,`og:image:favicon`);if(a)return a;let o=(r=e.querySelector(`link[rel='icon']`))?.getAttribute(`href`);if(o)return o;let s=(i=e.querySelector(`link[rel='shortcut icon']`))?.getAttribute(`href`);if(s)return s;if(t)try{return new URL(`/favicon.ico`,t).href}catch(e){console.warn(`Failed to construct favicon URL:`,e)}return``}static getPublished(e,t,n){var r,i;return this.getSchemaProperty(t,`datePublished`)||this.getMetaContent(n,`name`,`publishDate`)||this.getMetaContent(n,`property`,`article:published_time`)||(i=(r=e.querySelector(`abbr[itemprop="datePublished"]`))?.title)?.trim()||this.getTimeElement(e)||this.getMetaContent(n,`name`,`sailthru.date`)||``}static getMetaContent(e,t,n){var r,i;let a=e.find(e=>{let r=t===`name`?e.name:e.property;return r?.toLowerCase()===n.toLowerCase()});return a&&(i=(r=a.content)?.trim())!=null?i:``}static getTimeElement(e){var t,n,r,i;let a=Array.from(e.querySelectorAll(`time`))[0];return a&&(i=(n=(t=a.getAttribute(`datetime`))?.trim())??(r=a.textContent)?.trim())!=null?i:``}static getSchemaProperty(e,t,n=``){if(!e)return n;let r=(e,t,n,i=!0)=>{if(typeof e==`string`)return t.length===0?[e]:[];if(!e||typeof e!=`object`)return[];if(Array.isArray(e)){let a=t[0];if(/^\\[\\d+\\]$/.test(a)){let o=parseInt(a.slice(1,-1));return e[o]?r(e[o],t.slice(1),n,i):[]}return t.length===0&&e.every(e=>typeof e==`string`||typeof e==`number`)?e.map(String):e.flatMap(e=>r(e,t,n,i))}let[a,...o]=t;if(!a)return typeof e==`string`?[e]:typeof e==`object`&&e.name?[e.name]:[];if(e.hasOwnProperty(a))return r(e[a],o,n?`${n}.${a}`:a,!0);if(!i){let i=[];for(let a in e)if(typeof e[a]==`object`){let o=r(e[a],t,n?`${n}.${a}`:a,!1);i.push(...o)}if(i.length>0)return i}return[]};try{let i=r(e,t.split(`.`),``,!0);return i.length===0&&(i=r(e,t.split(`.`),``,!1)),i.length>0?i.filter(Boolean).join(`, `):n}catch(e){return console.error(`Error in getSchemaProperty for ${t}:`,e),n}}}},610:(e,t,n)=>{Object.defineProperty(t,`__esModule`,{value:!0}),t.standardizeFootnotes=function(e){let t=e.ownerDocument;if(!t)return void console.warn(`standardizeFootnotes: No document available`);new i(t).standardizeFootnotes(e)};let r=n(640);class i{constructor(e){this.doc=e}createFootnoteItem(e,t,n){let r=typeof t==`string`?this.doc:t.ownerDocument,i=r.createElement(`li`);if(i.className=`footnote`,i.id=`fn:${e}`,typeof t==`string`){let e=r.createElement(`p`);e.innerHTML=t,i.appendChild(e)}else{let e=Array.from(t.querySelectorAll(`p`));if(e.length===0){let e=r.createElement(`p`);e.innerHTML=t.innerHTML,i.appendChild(e)}else e.forEach(e=>{let t=r.createElement(`p`);t.innerHTML=e.innerHTML,i.appendChild(t)})}let a=i.querySelector(`p:last-of-type`)||i;return n.forEach((e,t)=>{let i=r.createElement(`a`);i.href=`#${e}`,i.title=`return to article`,i.className=`footnote-backref`,i.innerHTML=`↩`,t<n.length-1&&(i.innerHTML+=` `),a.appendChild(i)}),i}collectFootnotes(e){let t={},n=1,i=new Set;return e.querySelectorAll(r.FOOTNOTE_LIST_SELECTORS).forEach(e=>{if(e.matches(`div.footnote[data-component-name="FootnoteToDOM"]`)){let r=e.querySelector(`a.footnote-number`),a=e.querySelector(`.footnote-content`);if(r&&a){let e=r.id.replace(`footnote-`,``).toLowerCase();e&&!i.has(e)&&(t[n]={content:a,originalId:e,refs:[]},i.add(e),n++)}return}e.querySelectorAll(`li, div[role="listitem"]`).forEach(e=>{var r,a,o,s;let c=``,l=null,u=e.querySelector(`.citations`);if((r=u?.id)?.toLowerCase().startsWith(`r`)){c=u.id.toLowerCase();let e=u.querySelector(`.citation-content`);e&&(l=e)}else{if(e.id.toLowerCase().startsWith(`bib.bib`))c=e.id.replace(`bib.bib`,``).toLowerCase();else if(e.id.toLowerCase().startsWith(`fn:`))c=e.id.replace(`fn:`,``).toLowerCase();else if(e.id.toLowerCase().startsWith(`fn`))c=e.id.replace(`fn`,``).toLowerCase();else if(e.hasAttribute(`data-counter`))c=(o=(a=e.getAttribute(`data-counter`))?.replace(/\.$/,``))?.toLowerCase()||``;else{let t=(s=e.id.split(`/`).pop())?.match(/cite_note-(.+)/);c=t?t[1].toLowerCase():e.id.toLowerCase()}l=e}c&&!i.has(c)&&(t[n]={content:l||e,originalId:c,refs:[]},i.add(c),n++)})}),t}findOuterFootnoteContainer(e){let t=e,n=e.parentElement;for(;n&&(n.tagName.toLowerCase()===`span`||n.tagName.toLowerCase()===`sup`);)t=n,n=n.parentElement;return t}createFootnoteReference(e,t){let n=this.doc.createElement(`sup`);n.id=t;let r=this.doc.createElement(`a`);return r.href=`#fn:${e}`,r.textContent=e,n.appendChild(r),n}standardizeFootnotes(e){let t=this.collectFootnotes(e),n=e.querySelectorAll(r.FOOTNOTE_INLINE_REFERENCES),i=new Map;n.forEach(e=>{var n,r,a,o;if(!e)return;let s=``,c=``;if(e.matches(`a[id^="ref-link"]`))s=(n=e.textContent)?.trim()||``;else if(e.matches(`a[role="doc-biblioref"]`)){let t=e.getAttribute(`data-xml-rid`);if(t)s=t;else{let t=e.getAttribute(`href`);t!=null&&t.startsWith(`#core-R`)&&(s=t.replace(`#core-`,``))}}else if(e.matches(`a.footnote-anchor, span.footnote-hovercard-target a`)){let t=(r=e.id)?.replace(`footnote-anchor-`,``)||``;t&&(s=t.toLowerCase())}else if(e.matches(`cite.ltx_cite`)){let t=e.querySelector(`a`);if(t){let e=t.getAttribute(`href`);if(e){let t=(a=e.split(`/`).pop())?.match(/bib\.bib(\d+)/);t&&(s=t[1].toLowerCase())}}}else if(e.matches(`sup.reference`)){let t=e.querySelectorAll(`a`);Array.from(t).forEach(e=>{var t;let n=e.getAttribute(`href`);if(n){let e=(t=n.split(`/`).pop())?.match(/(?:cite_note|cite_ref)-(.+)/);e&&(s=e[1].toLowerCase())}})}else if(e.matches(`sup[id^="fnref:"]`))s=e.id.replace(`fnref:`,``).toLowerCase();else if(e.matches(`sup[id^="fnr"]`))s=e.id.replace(`fnr`,``).toLowerCase();else if(e.matches(`span.footnote-reference`))s=e.getAttribute(`data-footnote-id`)||``;else if(e.matches(`span.footnote-link`))s=e.getAttribute(`data-footnote-id`)||``,c=e.getAttribute(`data-footnote-content`)||``;else if(e.matches(`a.citation`))s=(o=e.textContent)?.trim()||``,c=e.getAttribute(`href`)||``;else if(e.matches(`a[id^="fnref"]`))s=e.id.replace(`fnref`,``).toLowerCase();else{let t=e.getAttribute(`href`);if(t){let e=t.replace(/^[#]/,``);s=e.toLowerCase()}}if(s){let n=Object.entries(t).find(([e,t])=>t.originalId===s.toLowerCase());if(n){let[t,r]=n,a=r.refs.length>0?`fnref:${t}-${r.refs.length+1}`:`fnref:${t}`;r.refs.push(a);let o=this.findOuterFootnoteContainer(e);o.tagName.toLowerCase()===`sup`?(i.has(o)||i.set(o,[]),i.get(o).push(this.createFootnoteReference(t,a))):o.replaceWith(this.createFootnoteReference(t,a))}}}),i.forEach((e,t)=>{if(e.length>0){let n=this.doc.createDocumentFragment();e.forEach(e=>{let t=e.querySelector(`a`);if(t){let r=this.doc.createElement(`sup`);r.id=e.id,r.appendChild(t.cloneNode(!0)),n.appendChild(r)}}),t.replaceWith(n)}});let a=this.doc.createElement(`div`);a.id=`footnotes`;let o=this.doc.createElement(`ol`);Object.entries(t).forEach(([e,t])=>{let n=this.createFootnoteItem(parseInt(e),t.content,t.refs);o.appendChild(n)}),e.querySelectorAll(r.FOOTNOTE_LIST_SELECTORS).forEach(e=>e.remove()),o.children.length>0&&(a.appendChild(o),e.appendChild(a))}}},628:(e,t,n)=>{Object.defineProperty(t,`__esModule`,{value:!0}),t.Defuddle=void 0;let r=n(608),i=n(917),a=n(640),o=n(840),s=n(968),c=n(552);t.Defuddle=class{constructor(e,t={}){this.doc=e,this.options=t,this.debug=t.debug||!1}parse(){let e=this.parseInternal();if(e.wordCount<200){console.log(`Initial parse returned very little content, trying again`);let t=this.parseInternal({removePartialSelectors:!1});if(t.wordCount>e.wordCount)return this._log(`Retry produced more content`),t}return e}parseInternal(e={}){var t,n,a;let c=Date.now(),l=Object.assign(Object.assign({removeExactSelectors:!0,removePartialSelectors:!0},this.options),e),u=this._extractSchemaOrgData(this.doc),d=[];this.doc.querySelectorAll(`meta`).forEach(e=>{let t=e.getAttribute(`name`),n=e.getAttribute(`property`),r=e.getAttribute(`content`);r&&d.push({name:t,property:n,content:this._decodeHTMLEntities(r)})});let f=r.MetadataExtractor.extract(this.doc,u,d);try{let e=l.url||this.doc.URL,r=i.ExtractorRegistry.findExtractor(this.doc,e,u);if(r&&r.canExtract()){let e=r.extract(),i=Date.now();return{content:e.contentHtml,title:(t=e.variables)?.title||f.title,description:f.description,domain:f.domain,favicon:f.favicon,image:f.image,published:(n=e.variables)?.published||f.published,author:(a=e.variables)?.author||f.author,site:f.site,schemaOrgData:f.schemaOrgData,wordCount:this.countWords(e.contentHtml),parseTime:Math.round(i-c),extractorType:r.constructor.name.replace(`Extractor`,``).toLowerCase(),metaTags:d}}let p=this._evaluateMediaQueries(this.doc),m=this.findSmallImages(this.doc),h=this.doc.cloneNode(!0);this.applyMobileStyles(h,p);let g=this.findMainContent(h);if(!g){let e=Date.now();return Object.assign(Object.assign({content:this.doc.body.innerHTML},f),{wordCount:this.countWords(this.doc.body.innerHTML),parseTime:Math.round(e-c),metaTags:d})}this.removeSmallImages(h,m),this.removeHiddenElements(h),s.ContentScorer.scoreAndRemove(h,this.debug),(l.removeExactSelectors||l.removePartialSelectors)&&this.removeBySelector(h,l.removeExactSelectors,l.removePartialSelectors),(0,o.standardizeContent)(g,f,this.doc,this.debug);let _=g.outerHTML,v=Date.now();return Object.assign(Object.assign({content:_},f),{wordCount:this.countWords(_),parseTime:Math.round(v-c),metaTags:d})}catch(e){console.error(`Defuddle`,`Error processing document:`,e);let t=Date.now();return Object.assign(Object.assign({content:this.doc.body.innerHTML},f),{wordCount:this.countWords(this.doc.body.innerHTML),parseTime:Math.round(t-c),metaTags:d})}}countWords(e){let t=this.doc.createElement(`div`);return t.innerHTML=e,(t.textContent||``).trim().replace(/\s+/g,` `).split(` `).filter(e=>e.length>0).length}_log(...e){this.debug&&console.log(`Defuddle:`,...e)}_evaluateMediaQueries(e){let t=[],n=/max-width[^:]*:\s*(\d+)/;try{let r=Array.from(e.styleSheets).filter(e=>{try{return e.cssRules,!0}catch(e){return e instanceof DOMException&&e.name,!1}});r.flatMap(e=>{try{return typeof CSSMediaRule>`u`?[]:Array.from(e.cssRules).filter(e=>e instanceof CSSMediaRule&&e.conditionText.includes(`max-width`))}catch(e){return this.debug&&console.warn(`Defuddle: Failed to process stylesheet:`,e),[]}}).forEach(e=>{let r=e.conditionText.match(n);if(r){let n=parseInt(r[1]);a.MOBILE_WIDTH<=n&&Array.from(e.cssRules).filter(e=>e instanceof CSSStyleRule).forEach(e=>{try{t.push({selector:e.selectorText,styles:e.style.cssText})}catch(e){this.debug&&console.warn(`Defuddle: Failed to process CSS rule:`,e)}})}})}catch(e){console.error(`Defuddle: Error evaluating media queries:`,e)}return t}applyMobileStyles(e,t){t.forEach(({selector:t,styles:n})=>{try{e.querySelectorAll(t).forEach(e=>{e.setAttribute(`style`,(e.getAttribute(`style`)||``)+n)})}catch(e){console.error(`Defuddle`,`Error applying styles for selector:`,t,e)}})}removeHiddenElements(e){let t=0,n=new Set,r=Array.from(e.getElementsByTagName(`*`));for(let i=0;i<r.length;i+=100){let a=r.slice(i,i+100),o=a.map(t=>{var n,r;try{return(n=t.ownerDocument.defaultView)?.getComputedStyle(t)}catch{let n=t.getAttribute(`style`);if(!n)return null;let i=e.createElement(`style`);i.textContent=`* { ${n} }`,e.head.appendChild(i);let a=(r=t.ownerDocument.defaultView)?.getComputedStyle(t);return e.head.removeChild(i),a}});a.forEach((e,r)=>{let i=o[r];!i||i.display!==`none`&&i.visibility!==`hidden`&&i.opacity!==`0`||(n.add(e),t++)})}this._log(`Removed hidden elements:`,t)}removeBySelector(e,t=!0,n=!0){let r=Date.now(),i=0,o=0,s=new Set;if(t&&e.querySelectorAll(a.EXACT_SELECTORS.join(`,`)).forEach(e=>{e!=null&&e.parentNode&&(s.add(e),i++)}),n){let t=a.PARTIAL_SELECTORS.join(`|`),n=new RegExp(t,`i`),r=a.TEST_ATTRIBUTES.map(e=>`[${e}]`).join(`,`);e.querySelectorAll(r).forEach(e=>{if(s.has(e))return;let t=a.TEST_ATTRIBUTES.map(t=>t===`class`?e.className&&typeof e.className==`string`?e.className:``:t===`id`?e.id||``:e.getAttribute(t)||``).join(` `).toLowerCase();t.trim()&&n.test(t)&&(s.add(e),o++)})}s.forEach(e=>e.remove());let c=Date.now();this._log(`Removed clutter elements:`,{exactSelectors:i,partialSelectors:o,total:s.size,processingTime:`${(c-r).toFixed(2)}ms`})}findSmallImages(e){let t=new Set,n=/scale\(([\d.]+)\)/,r=Date.now(),i=0,a=[...Array.from(e.getElementsByTagName(`img`)),...Array.from(e.getElementsByTagName(`svg`))];if(a.length===0)return t;let o=a.map(e=>({element:e,naturalWidth:e.tagName.toLowerCase()===`img`&&parseInt(e.getAttribute(`width`)||`0`)||0,naturalHeight:e.tagName.toLowerCase()===`img`&&parseInt(e.getAttribute(`height`)||`0`)||0,attrWidth:parseInt(e.getAttribute(`width`)||`0`),attrHeight:parseInt(e.getAttribute(`height`)||`0`)}));for(let e=0;e<o.length;e+=50){let r=o.slice(e,e+50);try{let e=r.map(({element:e})=>{var t;try{return(t=e.ownerDocument.defaultView)?.getComputedStyle(e)}catch{return null}}),a=r.map(({element:e})=>{try{return e.getBoundingClientRect()}catch{return null}});r.forEach((r,o)=>{var s;try{let c=e[o],l=a[o];if(!c)return;let u=c.transform,d=u?parseFloat((s=u.match(n))?.[1]||`1`):1,f=[r.naturalWidth,r.attrWidth,parseInt(c.width)||0,l?l.width*d:0].filter(e=>typeof e==`number`&&e>0),p=[r.naturalHeight,r.attrHeight,parseInt(c.height)||0,l?l.height*d:0].filter(e=>typeof e==`number`&&e>0);if(f.length>0&&p.length>0){let e=Math.min(...f),n=Math.min(...p);if(e<33||n<33){let e=this.getElementIdentifier(r.element);e&&(t.add(e),i++)}}}catch(e){this.debug&&console.warn(`Defuddle: Failed to process element dimensions:`,e)}})}catch(e){this.debug&&console.warn(`Defuddle: Failed to process batch:`,e)}}let s=Date.now();return this._log(`Found small elements:`,{count:i,processingTime:`${(s-r).toFixed(2)}ms`}),t}removeSmallImages(e,t){let n=0;[`img`,`svg`].forEach(r=>{let i=e.getElementsByTagName(r);Array.from(i).forEach(e=>{let r=this.getElementIdentifier(e);r&&t.has(r)&&(e.remove(),n++)})}),this._log(`Removed small elements:`,n)}getElementIdentifier(e){if(e.tagName.toLowerCase()===`img`){let t=e.getAttribute(`data-src`);if(t)return`src:${t}`;let n=e.getAttribute(`src`)||``,r=e.getAttribute(`srcset`)||``,i=e.getAttribute(`data-srcset`);if(n)return`src:${n}`;if(r)return`srcset:${r}`;if(i)return`srcset:${i}`}let t=e.id||``,n=e.className||``,r=e.tagName.toLowerCase()===`svg`&&e.getAttribute(`viewBox`)||``;return t?`id:${t}`:r?`viewBox:${r}`:n?`class:${n}`:null}findMainContent(e){let t=[];if(a.ENTRY_POINT_ELEMENTS.forEach((n,r)=>{e.querySelectorAll(n).forEach(e=>{let n=40*(a.ENTRY_POINT_ELEMENTS.length-r);n+=s.ContentScorer.scoreElement(e),t.push({element:e,score:n})})}),t.length===0)return this.findContentByScoring(e);if(t.sort((e,t)=>t.score-e.score),this.debug&&this._log(`Content candidates:`,t.map(e=>({element:e.element.tagName,selector:this.getElementSelector(e.element),score:e.score}))),t.length===1&&t[0].element.tagName.toLowerCase()===`body`){let t=this.findTableBasedContent(e);if(t)return t}return t[0].element}findTableBasedContent(e){if(!Array.from(e.getElementsByTagName(`table`)).some(e=>{let t=parseInt(e.getAttribute(`width`)||`0`),n=this.getComputedStyle(e);return t>400||n?.width.includes(`px`)&&parseInt(n.width)>400||e.getAttribute(`align`)===`center`||e.className.toLowerCase().includes(`content`)||e.className.toLowerCase().includes(`article`)}))return null;let t=Array.from(e.getElementsByTagName(`td`));return s.ContentScorer.findBestElement(t)}findContentByScoring(e){let t=[];return a.BLOCK_ELEMENTS.forEach(n=>{Array.from(e.getElementsByTagName(n)).forEach(e=>{let n=s.ContentScorer.scoreElement(e);n>0&&t.push({score:n,element:e})})}),t.length>0?t.sort((e,t)=>t.score-e.score)[0].element:null}getElementSelector(e){let t=[],n=e;for(;n&&n!==this.doc.documentElement;){let e=n.tagName.toLowerCase();n.id?e+=`#`+n.id:n.className&&typeof n.className==`string`&&(e+=`.`+n.className.trim().split(/\s+/).join(`.`)),t.unshift(e),n=n.parentElement}return t.join(` > `)}getComputedStyle(e){return(0,c.getComputedStyle)(e)}_extractSchemaOrgData(e){let t=e.querySelectorAll(`script[type="application/ld+json"]`),n=[];t.forEach(e=>{let t=e.textContent||``;try{t=t.replace(/\/\*[\s\S]*?\*\/|^\s*\/\/.*$/gm,``).replace(/^\s*<!\[CDATA\[([\s\S]*?)\]\]>\s*$/,`$1`).replace(/^\s*(\*\/|\/\*)\s*|\s*(\*\/|\/\*)\s*$/g,``).trim();let e=JSON.parse(t);e[`@graph`]&&Array.isArray(e[`@graph`])?n.push(...e[`@graph`]):n.push(e)}catch(e){console.error(`Defuddle: Error parsing schema.org data:`,e),this.debug&&console.error(`Defuddle: Problematic JSON content:`,t)}});let r=e=>{if(typeof e==`string`)return this._decodeHTMLEntities(e);if(Array.isArray(e))return e.map(r);if(typeof e==`object`&&e){let t={};for(let n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=r(e[n]));return t}return e};return n.map(r)}_decodeHTMLEntities(e){let t=this.doc.createElement(`textarea`);return t.innerHTML=e,t.value}}},632:(e,t,n)=>{Object.defineProperty(t,`__esModule`,{value:!0}),t.ChatGPTExtractor=void 0;let r=n(181);class i extends r.ConversationExtractor{constructor(e,t){super(e,t),this.articles=e.querySelectorAll(`article[data-testid^="conversation-turn-"]`),this.footnotes=[],this.footnoteCounter=0}canExtract(){return!!this.articles&&this.articles.length>0}extractMessages(){let e=[];return this.footnotes=[],this.footnoteCounter=0,this.articles&&this.articles.forEach(t=>{var n,r;let i=t.querySelector(`h5.sr-only, h6.sr-only`),a=(r=(n=i?.textContent)?.trim())?.replace(/:\s*$/,``)||``,o=``,s=t.getAttribute(`data-message-author-role`);s&&(o=s);let c=t.innerHTML||``;c=c.replace(/\u200B/g,``);let l=document.createElement(`div`);l.innerHTML=c,l.querySelectorAll(`h5.sr-only, h6.sr-only, span[data-state="closed"]`).forEach(e=>e.remove()),c=l.innerHTML,c=c.replace(/(&ZeroWidthSpace;)?(<span[^>]*?>\s*<a(?=[^>]*?href="([^"]+)")(?=[^>]*?target="_blank")(?=[^>]*?rel="noopener")[^>]*?>[\s\S]*?<\/a>\s*<\/span>)/gi,(e,t,n,r)=>{let i=``,a=``;try{i=new URL(r).hostname.replace(/^www\./,``);let e=r.split(`#:~:text=`);if(e.length>1){a=decodeURIComponent(e[1]),a=a.replace(/%2C/g,`,`);let t=a.split(`,`);a=t.length>1&&t[0].trim()?` \u2014 ${t[0].trim()}...`:t[0].trim()?` \u2014 ${a.trim()}`:``}}catch(e){console.error(`Failed to parse URL: ${r}`,e),i=r}let o,s=this.footnotes.findIndex(e=>e.url===r);return s===-1?(this.footnoteCounter++,o=this.footnoteCounter,this.footnotes.push({url:r,text:`<a href="${r}">${i}</a>${a}`})):o=s+1,`<sup id="fnref:${o}"><a href="#fn:${o}">${o}</a></sup>`}),c=c.replace(/<p[^>]*>\s*<\/p>/g,``),e.push({author:a,content:c.trim(),metadata:{role:o||`unknown`}})}),e}getFootnotes(){return this.footnotes}getMetadata(){let e=this.getTitle(),t=this.extractMessages();return{title:e,site:`ChatGPT`,url:this.url,messageCount:t.length,description:`ChatGPT conversation with ${t.length} messages`}}getTitle(){var e,t,n;let r=(e=this.document.title)?.trim();if(r&&r!==`ChatGPT`)return r;let i=(n=(t=this.articles)?.item(0))?.querySelector(`.text-message`);if(i){let e=i.textContent||``;return e.length>50?e.slice(0,50)+`...`:e}return`ChatGPT Conversation`}}t.ChatGPTExtractor=i},640:(e,t)=>{Object.defineProperty(t,`__esModule`,{value:!0}),t.ALLOWED_ATTRIBUTES_DEBUG=t.ALLOWED_ATTRIBUTES=t.ALLOWED_EMPTY_ELEMENTS=t.FOOTNOTE_LIST_SELECTORS=t.FOOTNOTE_INLINE_REFERENCES=t.PARTIAL_SELECTORS=t.TEST_ATTRIBUTES=t.EXACT_SELECTORS=t.INLINE_ELEMENTS=t.PRESERVE_ELEMENTS=t.BLOCK_ELEMENTS=t.MOBILE_WIDTH=t.ENTRY_POINT_ELEMENTS=void 0,t.ENTRY_POINT_ELEMENTS=[`#post`,`.post-content`,`.article-content`,`#article-content`,`.article_post`,`.article-wrapper`,`.entry-content`,`.content-article`,`.post`,`.markdown-body`,`article`,`[role="article"]`,`main`,`[role="main"]`,`body`],t.MOBILE_WIDTH=600,t.BLOCK_ELEMENTS=[`div`,`section`,`article`,`main`,`aside`,`header`,`footer`,`nav`,`content`],t.PRESERVE_ELEMENTS=new Set([`pre`,`code`,`table`,`thead`,`tbody`,`tr`,`td`,`th`,`ul`,`ol`,`li`,`dl`,`dt`,`dd`,`figure`,`figcaption`,`picture`,`details`,`summary`,`blockquote`,`form`,`fieldset`]),t.INLINE_ELEMENTS=new Set([`a`,`span`,`strong`,`em`,`i`,`b`,`u`,`code`,`br`,`small`,`sub`,`sup`,`mark`,`date`,`del`,`ins`,`q`,`abbr`,`cite`,`relative-time`,`time`,`font`]),t.EXACT_SELECTORS=`noscript,script:not([type^="math/"]),style,meta,link,.ad:not([class*="gradient"]),[class^="ad-" i],[class$="-ad" i],[id^="ad-" i],[id$="-ad" i],[role="banner" i],[alt*="advert" i],.promo,.Promo,#barrier-page,.alert,[id="comments" i],[id="comment" i],header,.header:not(.banner),#header,#Header,#banner,#Banner,nav,.navigation,#navigation,.hero,[role="navigation" i],[role="dialog" i],[role*="complementary" i],[class*="pagination" i],.menu,#menu,#siteSub,.previous,.author,.Author,[class$="_bio"],#categories,.contributor,.date,#date,[data-date],.entry-meta,.meta,.tags,#tags,.toc,.Toc,#toc,.headline,#headline,#title,#Title,#articleTag,[href*="/category"],[href*="/categories"],[href*="/tag/"],[href*="/tags/"],[href*="/topics"],[href*="author"],[href*="#toc"],[href="#top"],[href="#Top"],[href="#page-header"],[href="#content"],[href="#site-content"],[href="#main-content"],[href^="#main"],[src*="author"],footer,.aside,aside,button,canvas,date,dialog,fieldset,form,input:not([type="checkbox"]),label,option,select,textarea,time,relative-time,[hidden],[aria-hidden="true"]:not([class*="math"]),[style*="display: none"]:not([class*="math"]),[style*="display:none"]:not([class*="math"]),[style*="visibility: hidden"],[style*="visibility:hidden"],.hidden,.invisible,instaread-player,iframe:not([src*="youtube"]):not([src*="youtu.be"]):not([src*="vimeo"]):not([src*="twitter"]):not([src*="x.com"]):not([src*="datawrapper"]),[class="logo" i],#logo,#Logo,#newsletter,#Newsletter,.subscribe,.noprint,[data-print-layout="hide" i],[data-block="donotprint" i],[class*="clickable-icon" i],li span[class*="ltx_tag" i][class*="ltx_tag_item" i],a[href^="#"][class*="anchor" i],a[href^="#"][class*="ref" i],[data-container*="most-viewed" i],.sidebar,.Sidebar,#sidebar,#Sidebar,#sitesub,[data-link-name*="skip" i],[aria-label*="skip" i],#skip-link,.copyright,#copyright,#rss,#feed,.gutter,#primaryaudio,#NYT_ABOVE_MAIN_CONTENT_REGION,[data-testid="photoviewer-children-figure"] > span,table.infobox,.pencraft:not(.pc-display-contents),[data-optimizely="related-articles-section" i],[data-orientation="vertical"]`.split(`,`),t.TEST_ATTRIBUTES=[`class`,`id`,`data-test`,`data-testid`,`data-test-id`,`data-qa`,`data-cy`],t.PARTIAL_SELECTORS=`a-statement.access-wall.activitypub.actioncall.addcomment.advert.adlayout.ad-tldr.ad-placement.ads-container._ad_.after_content.after_main_article.afterpost.allterms.-alert-.alert-box.appendix._archive.around-the-web.aroundpages.article-author.article-badges.article-banner.article-bottom-section.article-bottom.article-category.article-card.article-citation.article__copy.article_date.article-date.article-end .article_header.article-header.article__header.article__hero.article__info.article-info.article-meta.article_meta.article__meta.articlename.article-subject.article_subject.article-snippet.article-separator.article--share.article--topics.articletags.article-tags.article_tags.articletitle.article-title.article_title.articletopics.article-topics.article--lede.articlewell.associated-people.audio-card.author-bio.author-box.author-info.author_info.authorm.author-mini-bio.author-name.author-publish-info.authored-by.avatar.back-to-top.backlink_container.backlinks-section.bio-block.biobox.blog-pager.bookmark-.-bookmark.bottominfo.bottomnav.bottom-of-article.bottom-wrapper.brand-bar.breadcrumb.brdcrumb.button-wrapper.buttons-container.btn-.-btn.byline.captcha.card-text.card-media.card-post.carouselcontainer.carousel-container.cat_header.catlinks._categories.card-author.card-content.chapter-list.collections.comments.commentbox.comment-button.commentcomp.comment-content.comment-count.comment-form.comment-number.comment-respond.comment-thread.comment-wrap.complementary.consent.contact-.content-card.content-topics.contentpromo.context-bar.context-widget.core-collateral.cover-.created-date.creative-commons_.c-subscribe._cta.-cta.cta-.cta_.current-issue.custom-list-number.dateline.dateheader.date-header.date-pub.disclaimer.disclosure.discussion.discuss_.disqus.donate.donation.dropdown.eletters.emailsignup.engagement-widget.enhancement.entry-author-info.entry-categories.entry-date.entry-title.entry-utility.-error.error-.eyebrow.expand-reduce.external-anchor.externallinkembedwrapper.extra-services.extra-title.facebook.fancy-box.favorite.featured-content.feature_feed.feedback.feed-links.field-site-sections.fixheader.floating-vid.follower.footer.footnote-back.footnoteback.form-group.for-you.frontmatter.further-reading.fullbleedheader.gated-.gh-feed.gist-meta.goog-.graph-view.hamburger.header_logo.header-logo.header-pattern.hero-list.hide-for-print.hide-print.hide-when-no-script.hidden-print.hidden-sidenote.hidden-accessibility.infoline.instacartIntegration.interlude.interaction.itemendrow.invisible.jumplink.jump-to-.keepreading.keep-reading.keep_reading.keyword_wrap.kicker.labstab.-labels.language-name.lastupdated.latest-content.-ledes-.-license.license-.lightbox-popup.like-button.link-box.links-grid.links-title.listing-dynamic-terms.list-tags.listinks.loading.loa-info.logo_container.ltx_role_refnum.ltx_tag_bibitem.ltx_error.masthead.marketing.media-inquiry.-menu.menu-.metadata.might-like.minibio.more-about._modal.-modal.more-.morenews.morestories.more_wrapper.most-read.move-helper.mw-editsection.mw-cite-backlink.mw-indicators.mw-jump-link.nav-.nav_.navigation-post.next-.newsgallery.news-story-title.newsletter_.newsletterbanner.newslettercontainer.newsletter-form.newsletter-signup.newslettersignup.newsletterwidget.newsletterwrapper.not-found.notessection.nomobile.noprint.open-slideshow.originally-published.other-blogs.outline-view.pagehead.page-header.page-title.paywall_message.-partners.permission-.plea.popular.popup_links.pop_stories.pop-up.post-author.post-bottom.post__category.postcomment.postdate.post-date.post_date.post-details.post-feeds.postinfo.post-info.post_info.post-inline-date.post-links.postlist.post_list.post_meta.post-meta.postmeta.post_more.postnavi.post-navigation.postpath.post-preview.postsnippet.post_snippet.post-snippet.post-subject.posttax.post-tax.post_tax.posttag.post_tag.post-tag.post_time.posttitle.post-title.post_title.post__title.post-ufi-button.prev-post.prevnext.prev_next.prev-next.previousnext.press-inquiries.print-none.print-header.print:hidden.privacy-notice.privacy-settings.profile.promo_article.promo-bar.promo-box.pubdate.pub_date.pub-date.publish_date.publish-date.publication-date.publicationName.qr-code.qr_code.quick_up._rail.ratingssection.read_also.readmore.read-next.read_next.read_time.read-time.reading_time.reading-time.reading-list.recent-.recent-articles.recentpost.recent_post.recent-post.recommend.redirectedfrom.recirc.register.related.relevant.reversefootnote._rss.rss-link.screen-reader-text.scroll_to.scroll-to._search.-search.section-nav.series-banner.share-box.sharedaddy.share-icons.sharelinks.share-post.share-print.share-section.show-for-print.sidebartitle.sidebar-content.sidebar-wrapper.sideitems.sidebar-author.sidebar-item.side-box.side-logo.sign-in-gate.similar-.similar_.similars-.site-index.site-header.siteheader.site-logo.site-name.site-wordpress.skip-content.skip-to-content.c-skip-link._skip-link.-slider.slug-wrap.social-author.social-shar.social-date.speechify-ignore.speedbump.sponsor.springercitation.sr-only._stats.story-date.story-navigation.storyreadtime.storysmall.storypublishdate.subject-label.subhead.submenu.-subscribe-.subscriber-drive.subscription-._tags.tags__item.tag_list.taxonomy.table-of-contents.tabs-.terminaltout.time-rubric.timestamp.time-read.time-to-read.tip_off.tiptout.-tout-.toc-container.toggle-caption.tooltip.topbar.topic-list.topic-subnav.top-wrapper.tree-item.trending.trust-feat.trust-badge.trust-project.twitter.u-hide.upsell.viewbottom.visually-hidden.welcomebox.widget_pages`.split(`.`),t.FOOTNOTE_INLINE_REFERENCES=[`sup.reference`,`cite.ltx_cite`,`sup[id^="fnr"]`,`span[id^="fnr"]`,`span[class*="footnote_ref"]`,`span.footnote-link`,`a.citation`,`a[id^="ref-link"]`,`a[href^="#fn"]`,`a[href^="#cite"]`,`a[href^="#reference"]`,`a[href^="#footnote"]`,`a[href^="#r"]`,`a[href^="#b"]`,`a[href*="cite_note"]`,`a[href*="cite_ref"]`,`a.footnote-anchor`,`span.footnote-hovercard-target a`,`a[role="doc-biblioref"]`,`a[id^="fnref"]`,`a[id^="ref-link"]`].join(`,`),t.FOOTNOTE_LIST_SELECTORS=[`div.footnote ol`,`div.footnotes ol`,`div[role="doc-endnotes"]`,`div[role="doc-footnotes"]`,`ol.footnotes-list`,`ol.footnotes`,`ol.references`,`ol[class*="article-references"]`,`section.footnotes ol`,`section[role="doc-endnotes"]`,`section[role="doc-footnotes"]`,`section[role="doc-bibliography"]`,`ul.footnotes-list`,`ul.ltx_biblist`,`div.footnote[data-component-name="FootnoteToDOM"]`].join(`,`),t.ALLOWED_EMPTY_ELEMENTS=new Set(`area.audio.base.br.circle.col.defs.ellipse.embed.figure.g.hr.iframe.img.input.line.link.mask.meta.object.param.path.pattern.picture.polygon.polyline.rect.source.stop.svg.td.th.track.use.video.wbr`.split(`.`)),t.ALLOWED_ATTRIBUTES=new Set(`alt.allow.allowfullscreen.aria-label.checked.colspan.controls.data-latex.data-src.data-srcset.data-lang.dir.display.frameborder.headers.height.href.lang.role.rowspan.src.srcset.title.type.width.accent.accentunder.align.columnalign.columnlines.columnspacing.columnspan.data-mjx-texclass.depth.displaystyle.fence.frame.framespacing.linethickness.lspace.mathsize.mathvariant.maxsize.minsize.movablelimits.notation.rowalign.rowlines.rowspacing.rowspan.rspace.scriptlevel.separator.stretchy.symmetric.voffset.xmlns`.split(`.`)),t.ALLOWED_ATTRIBUTES_DEBUG=new Set([`class`,`id`])},649:(e,t,n)=>{Object.defineProperty(t,`__esModule`,{value:!0}),t.imageRules=void 0;let r=n(552),i=/^data:image\/([^;]+);base64,/,a=/\.(jpg|jpeg|png|webp)\s+\d/,o=/^\s*\S+\.(jpg|jpeg|png|webp)\S*\s*$/,s=/\.(jpg|jpeg|png|webp|gif|avif)(\?.*)?$/i,c=/\s(\d+)w/,l=/dpr=(\d+(?:\.\d+)?)/,u=/^([^\s]+)/,d=/^[\w\-\.\/\\]+\.(jpg|jpeg|png|gif|webp|svg)$/i,f=/^\d{4}-\d{2}-\d{2}$/;function p(e,t,n){let i=n.createElement(`figure`);i.appendChild(e.cloneNode(!0));let a=n.createElement(`figcaption`),o=function(e){let t=[],n=new Set,i=e=>{var a;if((0,r.isTextNode)(e)){let r=(a=e.textContent)?.trim()||``;r&&!n.has(r)&&(t.push(r),n.add(r))}else if((0,r.isElement)(e)){let t=e.childNodes;for(let e=0;e<t.length;e++)i(t[e])}},a=e.childNodes;for(let e=0;e<a.length;e++)i(a[e]);return t.length>0?t.join(` `):e.innerHTML}(t);return a.innerHTML=o,i.appendChild(a),i}function m(e,t){t.setAttribute(`srcset`,e);let n=te(e);n&&v(n)&&t.setAttribute(`src`,n)}function h(e,t,n){for(let r=0;r<e.attributes.length;r++){let i=e.attributes[r];n.includes(i.name)||t.setAttribute(i.name,i.value)}}function g(e){let t=e.match(i);if(!t||t[1]===`svg+xml`)return!1;let n=t[0].length;return e.length-n<133}function _(e){return e.startsWith(`data:image/svg+xml`)}function v(e){return!e.startsWith(`data:`)&&!(!e||e.trim()===``)&&(s.test(e)||e.includes(`image`)||e.includes(`img`)||e.includes(`photo`))}function y(e){return b(e)?!0:e.querySelectorAll(`img, video, picture, source`).length>0}function b(e){let t=e.tagName.toLowerCase();return t===`img`||t===`video`||t===`picture`||t===`source`}function x(e){if(b(e))return e;let t=e.querySelectorAll(`picture`);if(t.length>0)return t[0];let n=e.querySelectorAll(`img`),r=[];for(let e=0;e<n.length;e++){let t=n[e],i=t.getAttribute(`src`)||``,a=t.getAttribute(`alt`)||``;i.includes(`data:image/svg+xml`)||g(i)||!a.trim()&&n.length>1||r.push(t)}if(r.length>0)return r[0];let i=e.querySelectorAll(`video`);if(i.length>0)return i[0];let a=e.querySelectorAll(`source`);if(a.length>0)return a[0];let o=e.querySelectorAll(`img, picture, source, video`);return o.length>0?o[0]:null}function S(e){var t,n,r,i;let a=e.querySelector(`figcaption`);if(a)return a;let o=new Set,s=[`[class*="caption"]`,`[class*="description"]`,`[class*="alt"]`,`[class*="title"]`,`[class*="credit"]`,`[class*="text"]`,`[class*="post-thumbnail-text"]`,`[class*="image-caption"]`,`[class*="photo-caption"]`,`[aria-label]`,`[title]`].join(`, `),c=e.querySelectorAll(s);for(let e=0;e<c.length;e++){let n=c[e];if(b(n))continue;let r=(t=n.textContent)?.trim();if(r&&r.length>0&&!o.has(r))return o.add(r),n}let l=e.querySelector(`img`);if(l&&l.hasAttribute(`alt`)){let t=l.getAttribute(`alt`);if(t&&t.trim().length>0){let n=e.ownerDocument.createElement(`div`);return n.textContent=t,n}}if(e.parentElement){let t=e.parentElement.children;for(let r=0;r<t.length;r++){let i=t[r];if(i!==e&&Array.from(i.classList).some(e=>e.includes(`caption`)||e.includes(`credit`)||e.includes(`text`)||e.includes(`description`))){let e=(n=i.textContent)?.trim();if(e&&e.length>0)return i}}}let u=e.querySelectorAll(`img`);for(let e=0;e<u.length;e++){let t=u[e];if(!t.parentElement)continue;let n=t.nextElementSibling;for(;n;){if([`EM`,`STRONG`,`SPAN`,`I`,`B`,`SMALL`,`CITE`].includes(n.tagName)){let e=(r=n.textContent)?.trim();if(e&&e.length>0)return n}n=n.nextElementSibling}}for(let e=0;e<u.length;e++){let t=u[e],n=t.parentElement;if(!n)continue;let r=n.querySelectorAll(`em, strong, span, i, b, small, cite`);for(let e=0;e<r.length;e++){let n=r[e];if(n===t)continue;let a=(i=n.textContent)?.trim();if(a&&a.length>0)return n}}return null}function C(e){var t;let n=(t=e.textContent)?.trim()||``;return!(n.length<10||n.startsWith(`http://`)||n.startsWith(`https://`))&&!d.test(n)&&!n.match(/^\d+$/)&&!f.test(n)}function w(e,t){let n=e.tagName.toLowerCase();if(n===`img`)return ee(e,t);if(n===`picture`){let n=e.querySelector(`img`);return n?ee(n,t):e.cloneNode(!0)}return n===`source`?function(e,t){let n=t.createElement(`img`),r=e.getAttribute(`srcset`);r&&m(r,n);let i=e.parentElement;if(i){let e=i.querySelectorAll(`img`),t=[];for(let n=0;n<e.length;n++){let r=e[n],i=r.getAttribute(`src`)||``;g(i)||_(i)||i===``||t.push(r)}if(t.length>0){if(h(t[0],n,[`src`,`srcset`]),!n.hasAttribute(`src`)||!v(n.getAttribute(`src`)||``)){let e=t[0].getAttribute(`src`);e&&v(e)&&n.setAttribute(`src`,e)}}else{let e=i.querySelector(`img[data-src]`);if(e&&(h(e,n,[`src`,`srcset`]),!n.hasAttribute(`src`)||!v(n.getAttribute(`src`)||``))){let t=e.getAttribute(`data-src`);t&&v(t)&&n.setAttribute(`src`,t)}}}return n}(e,t):e.cloneNode(!0)}function ee(e,t){let n=e.getAttribute(`src`)||``;if(g(n)||_(n)){let n=e.parentElement;if(n){let r=n.querySelectorAll(`source`),i=[];for(let e=0;e<r.length;e++){let t=r[e];t.hasAttribute(`data-srcset`)&&t.getAttribute(`data-srcset`)!==``&&i.push(t)}if(i.length>0){let n=t.createElement(`img`),r=e.getAttribute(`data-src`);return r&&!_(r)&&n.setAttribute(`src`,r),h(e,n,[`src`]),n}}}return e.cloneNode(!0)}function te(e){let t=e.split(`,`);if(t.length===0)return null;let n=t[0].trim().match(u);if(n&&n[1]){let e=n[1];if(_(e)){for(let e=1;e<t.length;e++){let n=t[e].trim().match(u);if(n&&n[1]&&!_(n[1]))return n[1]}return null}return e}return null}function T(e){if(e.length===0)return null;if(e.length===1)return e[0];for(let t=0;t<e.length;t++)if(!e[t].hasAttribute(`media`))return e[t];let t=null,n=0;for(let r=0;r<e.length;r++){let i=e[r],a=i.getAttribute(`srcset`);if(!a)continue;let o=a.match(c),s=a.match(l);if(o&&o[1]){let e=parseInt(o[1],10)*(s?parseFloat(s[1]):1);e>n&&(n=e,t=i)}}return t||e[0]}t.imageRules=[{selector:`picture`,element:`picture`,transform:(e,t)=>{let n=e.querySelectorAll(`source`),r=e.querySelector(`img`);if(!r){console.warn(`Picture element without img fallback:`,e.outerHTML);let r=T(n);if(r){let n=r.getAttribute(`srcset`);if(n){let r=t.createElement(`img`);return m(n,r),e.innerHTML=``,e.appendChild(r),e}}return e}let i=null,a=null;if(n.length>0){let e=T(n);e&&(i=e.getAttribute(`srcset`),i&&(a=te(i)))}if(i&&r.setAttribute(`srcset`,i),a&&v(a))r.setAttribute(`src`,a);else if(!r.hasAttribute(`src`)||!v(r.getAttribute(`src`)||``)){let e=te(r.getAttribute(`srcset`)||i||``);e&&v(e)&&r.setAttribute(`src`,e)}return n.forEach(e=>e.remove()),e}},{selector:`uni-image-full-width`,element:`figure`,transform:(e,t)=>{var n;let r=t.createElement(`figure`),i=t.createElement(`img`),a=e.querySelector(`img`);if(!a)return console.warn(`uni-image-full-width without img:`,e.outerHTML),r;let o=a.getAttribute(`src`),s=a.getAttribute(`data-loading`);if(s)try{let e=JSON.parse(s);e.desktop&&v(e.desktop)&&(o=e.desktop)}catch(e){console.warn(`Failed to parse data-loading attribute:`,s,e)}if(!o||!v(o))return console.warn(`Could not find valid src for uni-image-full-width:`,e.outerHTML),r;i.setAttribute(`src`,o);let c=a.getAttribute(`alt`);c||=e.getAttribute(`alt-text`),c&&i.setAttribute(`alt`,c),r.appendChild(i);let l=e.querySelector(`figcaption`);if(l){let e=(n=l.textContent)?.trim();if(e&&e.length>5){let n=t.createElement(`figcaption`),i=l.querySelector(`.rich-text p`);i?n.innerHTML=i.innerHTML:n.textContent=e,r.appendChild(n)}}return r}},{selector:`img[data-src], img[data-srcset], img[loading="lazy"], img.lazy, img.lazyload`,element:`img`,transform:(e,t)=>{let n=e.getAttribute(`src`)||``,r=function(e){if(e.hasAttribute(`data-src`)||e.hasAttribute(`data-srcset`))return!0;for(let t=0;t<e.attributes.length;t++){let n=e.attributes[t];if(n.name!==`src`&&(n.name.startsWith(`data-`)&&/\.(jpg|jpeg|png|webp|gif)(\?.*)?$/i.test(n.value)||/\.(jpg|jpeg|png|webp|gif)(\?.*)?$/i.test(n.value)))return!0}return!1}(e);g(n)&&r&&e.removeAttribute(`src`);let i=e.getAttribute(`data-src`);i&&!e.getAttribute(`src`)&&e.setAttribute(`src`,i);let s=e.getAttribute(`data-srcset`);s&&!e.getAttribute(`srcset`)&&e.setAttribute(`srcset`,s);for(let t=0;t<e.attributes.length;t++){let n=e.attributes[t];n.name!==`src`&&n.name!==`srcset`&&n.name!==`alt`&&(a.test(n.value)?e.setAttribute(`srcset`,n.value):o.test(n.value)&&e.setAttribute(`src`,n.value))}return e.classList.remove(`lazy`,`lazyload`),e.removeAttribute(`data-ll-status`),e.removeAttribute(`data-src`),e.removeAttribute(`data-srcset`),e.removeAttribute(`loading`),e}},{selector:`span:has(img)`,element:`span`,transform:(e,t)=>{try{if(!y(e))return e;let n=x(e);if(!n)return e;let r=S(e),i=w(n,t);if(r&&C(r)){let e=p(i,r,t);return r.parentNode&&r.parentNode.removeChild(r),e}return i}catch(t){return console.warn(`Error processing span with image:`,t),e}}},{selector:`figure, p:has([class*="caption"])`,element:`figure`,transform:(e,t)=>{try{if(!y(e))return e;let n=x(e);if(!n)return e;let r=S(e);if(r&&C(r)){let i=x(e),a;return i?a=i:(console.warn(`Figure rule couldn't find current image element in:`,e.outerHTML),a=w(n,t)),p(a,r,t)}return e}catch(t){return console.warn(`Error processing complex image element:`,t),e}}}]},732:(e,t,n)=>{Object.defineProperty(t,`__esModule`,{value:!0}),t.GeminiExtractor=void 0;let r=n(181);class i extends r.ConversationExtractor{constructor(e,t){super(e,t),this.messageCount=null,this.conversationContainers=e.querySelectorAll(`div.conversation-container`),this.footnotes=[]}canExtract(){return!!this.conversationContainers&&this.conversationContainers.length>0}extractMessages(){this.messageCount=0;let e=[];return this.conversationContainers?(this.extractSources(),this.conversationContainers.forEach(t=>{let n=t.querySelector(`user-query`);if(n){let t=n.querySelector(`.query-text`);if(t){let n=t.innerHTML||``;e.push({author:`You`,content:n.trim(),metadata:{role:`user`}})}}let r=t.querySelector(`model-response`);if(r){let t=r.querySelector(`.model-response-text .markdown`),n=r.querySelector(`#extended-response-markdown-content`)||t;if(n){let t=n.innerHTML||``,r=document.createElement(`div`);r.innerHTML=t,r.querySelectorAll(`.table-content`).forEach(e=>{e.classList.remove(`table-content`)}),t=r.innerHTML,e.push({author:`Gemini`,content:t.trim(),metadata:{role:`assistant`}})}}}),this.messageCount=e.length,e):e}extractSources(){let e=this.document.querySelectorAll(`browse-item`);e&&e.length>0&&e.forEach(e=>{var t,n,r,i;let a=e.querySelector(`a`);if(a instanceof HTMLAnchorElement){let e=a.href,o=(n=(t=a.querySelector(`.domain`))?.textContent)?.trim()||``,s=(i=(r=a.querySelector(`.title`))?.textContent)?.trim()||``;e&&(o||s)&&this.footnotes.push({url:e,text:s?`${o}: ${s}`:o})}})}getFootnotes(){return this.footnotes}getMetadata(){var e;let t=this.getTitle(),n=(e=this.messageCount)??this.extractMessages().length;return{title:t,site:`Gemini`,url:this.url,messageCount:n,description:`Gemini conversation with ${n} messages`}}getTitle(){var e,t,n,r,i;let a=(e=this.document.title)?.trim();if(a&&a!==`Gemini`&&!a.includes(`Gemini`))return a;let o=(n=(t=this.document.querySelector(`.title-text`))?.textContent)?.trim();if(o)return o;let s=(i=(r=this.conversationContainers)?.item(0))?.querySelector(`.query-text`);if(s){let e=s.textContent||``;return e.length>50?e.slice(0,50)+`...`:e}return`Gemini Conversation`}}t.GeminiExtractor=i},754:(e,t,n)=>{Object.defineProperty(t,`__esModule`,{value:!0}),t.codeBlockRules=void 0;let r=n(552),i=[/^language-(\w+)$/,/^lang-(\w+)$/,/^(\w+)-code$/,/^code-(\w+)$/,/^syntax-(\w+)$/,/^code-snippet__(\w+)$/,/^highlight-(\w+)$/,/^(\w+)-snippet$/,/(?:^|\s)(?:language|lang|brush|syntax)-(\w+)(?:\s|$)/i],a=new Set(`abap.actionscript.ada.adoc.agda.antlr4.applescript.arduino.armasm.asciidoc.aspnet.atom.bash.batch.c.clojure.cmake.cobol.coffeescript.cpp.c++.crystal.csharp.cs.dart.django.dockerfile.dotnet.elixir.elm.erlang.fortran.fsharp.gdscript.gitignore.glsl.golang.gradle.graphql.groovy.haskell.hs.haxe.hlsl.html.idris.java.javascript.js.jsx.jsdoc.json.jsonp.julia.kotlin.latex.lisp.elisp.livescript.lua.makefile.markdown.md.markup.masm.mathml.matlab.mongodb.mysql.nasm.nginx.nim.nix.objc.ocaml.pascal.perl.php.postgresql.powershell.prolog.puppet.python.regex.rss.ruby.rb.rust.scala.scheme.shell.sh.solidity.sparql.sql.ssml.svg.swift.tcl.terraform.tex.toml.typescript.ts.tsx.unrealscript.verilog.vhdl.webassembly.wasm.xml.yaml.yml.zig`.split(`.`));t.codeBlockRules=[{selector:[`pre`,`div[class*="prismjs"]`,`.syntaxhighlighter`,`.highlight`,`.highlight-source`,`.wp-block-syntaxhighlighter-code`,`.wp-block-code`,`div[class*="language-"]`].join(`, `),element:`pre`,transform:(e,t)=>{if(!(e=>`classList`in e&&`getAttribute`in e&&`querySelector`in e)(e))return e;let n=e=>{var t;let n=e.getAttribute(`data-lang`)||e.getAttribute(`data-language`);if(n)return n.toLowerCase();let r=Array.from(e.classList||[]);if((t=e.classList)?.contains(`syntaxhighlighter`)){let e=r.find(e=>![`syntaxhighlighter`,`nogutter`].includes(e));if(e&&a.has(e.toLowerCase()))return e.toLowerCase()}for(let e of r)for(let t of i){let n=e.toLowerCase().match(t);if(n&&n[1]&&a.has(n[1].toLowerCase()))return n[1].toLowerCase()}for(let e of r)if(a.has(e.toLowerCase()))return e.toLowerCase();return``},o=``,s=e;for(;s&&!o;){o=n(s);let e=s.querySelector(`code`);!o&&e&&(o=n(e)),s=s.parentElement}let c=e=>{if((0,r.isTextNode)(e))return e.textContent||``;let t=``;if((0,r.isElement)(e)){if(e.tagName===`BR`)return`
`;if(e.matches(`div[class*="line"], span[class*="line"], .ec-line, [data-line-number], [data-line]`)){let t=e.querySelector(`.code, .content, [class*="code-"], [class*="content-"]`);if(t)return(t.textContent||``)+`
`;let n=e.querySelector(`.line-number, .gutter, [class*="line-number"], [class*="gutter"]`);return n?Array.from(e.childNodes).filter(e=>!n.contains(e)).map(e=>c(e)).join(``)+`
`:e.textContent+`
`}e.childNodes.forEach(e=>{t+=c(e)})}return t},l=``;e.matches(`.syntaxhighlighter, .wp-block-syntaxhighlighter-code`)&&(l=(e=>{let t=e.querySelector(`.syntaxhighlighter table .code .container`);if(t)return Array.from(t.children).map(e=>{let t=Array.from(e.querySelectorAll(`code`)).map(e=>{var t;let n=e.textContent||``;return(t=e.classList)!=null&&t.contains(`spaces`)&&(n=` `.repeat(n.length)),n}).join(``);return t||e.textContent||``}).join(`
`);let n=e.querySelectorAll(`.code .line`);return n.length>0?Array.from(n).map(e=>{let t=Array.from(e.querySelectorAll(`code`)).map(e=>e.textContent||``).join(``);return t||e.textContent||``}).join(`
`):``})(e)),l||=c(e),l=l.replace(/^\s+|\s+$/g,``).replace(/\t/g,`    `).replace(/\n{3,}/g,`

`).replace(/\u00a0/g,` `).replace(/^\n+/,``).replace(/\n+$/,``);let u=t.createElement(`pre`),d=t.createElement(`code`);return o&&(d.setAttribute(`data-lang`,o),d.setAttribute(`class`,`language-${o}`)),d.textContent=l,u.appendChild(d),u}}]},840:(e,t,n)=>{Object.defineProperty(t,`__esModule`,{value:!0}),t.standardizeContent=function(e,t,n,i=!1){(function(e){let t=e=>{if((0,l.isElement)(e)){let t=e.tagName.toLowerCase();if(t===`pre`||t===`code`)return}if((0,l.isTextNode)(e)){let t=e.textContent||``,n=t.replace(/\xA0+/g,t=>{var n,r,i,a;if(t.length===1){let t=(r=(n=e.previousSibling)?.textContent)?.slice(-1),o=(a=(i=e.nextSibling)?.textContent)?.charAt(0);if(t?.match(/\w/)&&o?.match(/\w/))return`\xA0`}return` `.repeat(t.length)});n!==t&&(e.textContent=n)}e.hasChildNodes()&&Array.from(e.childNodes).forEach(t)};t(e)})(e),function(e){let t=0;Array.from(e.getElementsByTagName(`*`)).forEach(e=>{Array.from(e.childNodes).forEach(e=>{(0,l.isCommentNode)(e)&&(e.remove(),t++)})}),(0,l.logDebug)(`Removed HTML comments:`,t)}(e),function(e,t,n){let i=e=>e.replace(/\u00A0/g,` `).replace(/\s+/g,` `).trim().toLowerCase(),a=e.getElementsByTagName(`h1`);Array.from(a).forEach(e=>{var t;let i=n.createElement(`h2`);i.innerHTML=e.innerHTML,Array.from(e.attributes).forEach(e=>{r.ALLOWED_ATTRIBUTES.has(e.name)&&i.setAttribute(e.name,e.value)}),(t=e.parentNode)==null||t.replaceChild(i,e)});let o=e.getElementsByTagName(`h2`);if(o.length>0){let e=o[0],n=i(e.textContent||``),r=i(t);r&&r===n&&e.remove()}}(e,t.title,n),(0,o.standardizeFootnotes)(e),function(e,t){let n=0;u.forEach(r=>{e.querySelectorAll(r.selector).forEach(e=>{if(r.transform){let i=r.transform(e,t);e.replaceWith(i),n++}})}),e.querySelectorAll(`lite-youtube`).forEach(e=>{let r=e.getAttribute(`videoid`);if(!r)return;let i=t.createElement(`iframe`);i.width=`560`,i.height=`315`,i.src=`https://www.youtube.com/embed/${r}`,i.title=e.getAttribute(`videotitle`)||`YouTube video player`,i.frameBorder=`0`,i.allow=`accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share`,i.setAttribute(`allowfullscreen`,``),e.replaceWith(i),n++}),(0,l.logDebug)(`Converted embedded elements:`,n)}(e,n),i?(f(e,i),d(e),p(e),(0,l.logDebug)(`Debug mode: Skipping div flattening to preserve structure`)):(m(e,n),f(e,i),function(e){let t=0,n=0,i=!0;for(;i;){n++,i=!1;let a=Array.from(e.getElementsByTagName(`*`)).filter(e=>{if(r.ALLOWED_EMPTY_ELEMENTS.has(e.tagName.toLowerCase()))return!1;let t=e.textContent||``,n=t.trim().length===0,i=t.includes(`\xA0`),a=!e.hasChildNodes()||Array.from(e.childNodes).every(e=>{if((0,l.isTextNode)(e)){let t=e.textContent||``;return t.trim().length===0&&!t.includes(`\xA0`)}return!1});if(e.tagName.toLowerCase()===`div`){let t=Array.from(e.children);if(t.length>0&&t.every(e=>{var t;if(e.tagName.toLowerCase()!==`span`)return!1;let n=(t=e.textContent)?.trim()||``;return n===`,`||n===``||n===` `}))return!0}return n&&!i&&a});a.length>0&&(a.forEach(e=>{e.remove(),t++}),i=!0)}(0,l.logDebug)(`Removed empty elements:`,t,`iterations:`,n)}(e),d(e),m(e,n),p(e),function(e,t){let n=0,r=Date.now(),i=e=>{var t;if((0,l.isElement)(e)){let t=e.tagName.toLowerCase();if(t===`pre`||t===`code`)return}if(Array.from(e.childNodes).forEach(i),(0,l.isTextNode)(e)){let r=e.textContent||``;if(!r||r.match(/^[\u200C\u200B\u200D\u200E\u200F\uFEFF\xA0\s]*$/))(t=e.parentNode)==null||t.removeChild(e),n++;else{let t=r.replace(/\n{3,}/g,`

`).replace(/^[\n\r\t]+/,``).replace(/[\n\r\t]+$/,``).replace(/[ \t]*\n[ \t]*/g,`
`).replace(/[ \t]{3,}/g,` `).replace(/^[ ]+$/,` `).replace(/\s+([,.!?:;])/g,`$1`).replace(/[\u200C\u200B\u200D\u200E\u200F\uFEFF]+/g,``).replace(/(?:\xA0){2,}/g,`\xA0`);t!==r&&(e.textContent=t,n+=r.length-t.length)}}},a=e=>{var r;if(!(0,l.isElement)(e))return;let i=e.tagName.toLowerCase();if(i===`pre`||i===`code`)return;Array.from(e.childNodes).filter(l.isElement).forEach(a),e.normalize();let o=(r=(0,l.getComputedStyle)(e))?.display===`block`,s=o?/^[\n\r\t \u200C\u200B\u200D\u200E\u200F\uFEFF\xA0]*$/:/^[\n\r\t\u200C\u200B\u200D\u200E\u200F\uFEFF]*$/,c=o?/^[\n\r\t \u200C\u200B\u200D\u200E\u200F\uFEFF\xA0]*$/:/^[\n\r\t\u200C\u200B\u200D\u200E\u200F\uFEFF]*$/;for(;e.firstChild&&(0,l.isTextNode)(e.firstChild)&&(e.firstChild.textContent||``).match(s);)e.removeChild(e.firstChild),n++;for(;e.lastChild&&(0,l.isTextNode)(e.lastChild)&&(e.lastChild.textContent||``).match(c);)e.removeChild(e.lastChild),n++;if(!o){let n=Array.from(e.childNodes);for(let r=0;r<n.length-1;r++){let i=n[r],a=n[r+1];if((0,l.isElement)(i)||(0,l.isElement)(a)){let n=a.textContent||``,r=i.textContent||``,o=n.match(/^[,.!?:;)\]]/),s=r.match(/[,.!?:;(\[]\s*$/),c=(0,l.isTextNode)(i)&&(i.textContent||``).endsWith(` `)||(0,l.isTextNode)(a)&&(a.textContent||``).startsWith(` `);if(!o&&!s&&!c){let n=t.createTextNode(` `);e.insertBefore(n,a)}}}}};i(e),a(e);let o=Date.now();(0,l.logDebug)(`Removed empty lines:`,{charactersRemoved:n,processingTime:`${(o-r).toFixed(2)}ms`})}(e,n))};let r=n(640),i=n(0),a=n(754),o=n(610),s=n(864),c=n(649),l=n(552),u=[...i.mathRules,...a.codeBlockRules,...s.headingRules,...c.imageRules,{selector:`div[data-testid^="paragraph"], div[role="paragraph"]`,element:`p`,transform:(e,t)=>{let n=t.createElement(`p`);return n.innerHTML=e.innerHTML,Array.from(e.attributes).forEach(e=>{r.ALLOWED_ATTRIBUTES.has(e.name)&&n.setAttribute(e.name,e.value)}),n}},{selector:`div[role="list"]`,element:`ul`,transform:(e,t)=>{var n;let r=e.querySelector(`div[role="listitem"] .label`),i=((n=r?.textContent)?.trim()||``).match(/^\d+\)/),a=t.createElement(i?`ol`:`ul`);return e.querySelectorAll(`div[role="listitem"]`).forEach(e=>{let n=t.createElement(`li`),r=e.querySelector(`.content`);r&&(r.querySelectorAll(`div[role="paragraph"]`).forEach(e=>{let n=t.createElement(`p`);n.innerHTML=e.innerHTML,e.replaceWith(n)}),r.querySelectorAll(`div[role="list"]`).forEach(e=>{var n;let r=e.querySelector(`div[role="listitem"] .label`),i=((n=r?.textContent)?.trim()||``).match(/^\d+\)/),a=t.createElement(i?`ol`:`ul`);e.querySelectorAll(`div[role="listitem"]`).forEach(e=>{let n=t.createElement(`li`),r=e.querySelector(`.content`);r&&(r.querySelectorAll(`div[role="paragraph"]`).forEach(e=>{let n=t.createElement(`p`);n.innerHTML=e.innerHTML,e.replaceWith(n)}),n.innerHTML=r.innerHTML),a.appendChild(n)}),e.replaceWith(a)}),n.innerHTML=r.innerHTML),a.appendChild(n)}),a}},{selector:`div[role="listitem"]`,element:`li`,transform:(e,t)=>{let n=e.querySelector(`.content`);return n?(n.querySelectorAll(`div[role="paragraph"]`).forEach(e=>{let n=t.createElement(`p`);n.innerHTML=e.innerHTML,e.replaceWith(n)}),n):e}}];function d(e){let t=0,n=t=>{let r=``,i=t.nextSibling;for(;i;)((0,l.isTextNode)(i)||(0,l.isElement)(i))&&(r+=i.textContent||``),i=i.nextSibling;if(r.trim())return!0;let a=t.parentElement;return!(!a||a===e)&&n(a)};Array.from(e.querySelectorAll(`h1, h2, h3, h4, h5, h6`)).reverse().forEach(e=>{n(e)||(e.remove(),t++)}),t>0&&(0,l.logDebug)(`Removed trailing headings:`,t)}function f(e,t){let n=0,i=e=>{if(e.tagName.toLowerCase()===`svg`||e.namespaceURI===`http://www.w3.org/2000/svg`)return;let i=Array.from(e.attributes),a=e.tagName.toLowerCase();i.forEach(i=>{let o=i.name.toLowerCase(),s=i.value;o===`id`&&(s.startsWith(`fnref:`)||s.startsWith(`fn:`)||s===`footnotes`)||o===`class`&&(a===`code`&&s.startsWith(`language-`)||s===`footnote-backref`)||(t?r.ALLOWED_ATTRIBUTES.has(o)||r.ALLOWED_ATTRIBUTES_DEBUG.has(o)||o.startsWith(`data-`)||(e.removeAttribute(i.name),n++):r.ALLOWED_ATTRIBUTES.has(o)||(e.removeAttribute(i.name),n++))})};i(e),e.querySelectorAll(`*`).forEach(i),(0,l.logDebug)(`Stripped attributes:`,n)}function p(e){let t=0,n=Date.now(),r=Array.from(e.getElementsByTagName(`br`)),i=[],a=()=>{if(i.length>2)for(let e=2;e<i.length;e++)i[e].remove(),t++;i=[]};r.forEach(e=>{var t;let n=!1;if(i.length>0){let r=i[i.length-1],a=e.previousSibling;for(;a&&(0,l.isTextNode)(a)&&!(t=a.textContent)?.trim();)a=a.previousSibling;a===r&&(n=!0)}n?i.push(e):(a(),i=[e])}),a();let o=Date.now();(0,l.logDebug)(`Standardized br elements:`,{removed:t,processingTime:`${(o-n).toFixed(2)}ms`})}function m(e,t){let n=0,i=Date.now(),a=!0;function o(e){var t;for(let n of e.childNodes)if((0,l.isTextNode)(n)&&(t=n.textContent)?.trim()||(0,l.isElement)(n)&&r.INLINE_ELEMENTS.has(n.nodeName.toLowerCase()))return!0;return!1}let s=e=>{let t=e.tagName.toLowerCase();if(r.PRESERVE_ELEMENTS.has(t))return!0;let n=e.getAttribute(`role`);if(n&&[`article`,`main`,`navigation`,`banner`,`contentinfo`].includes(n))return!0;let i=e.className;return typeof i==`string`&&i.toLowerCase().match(/(?:article|main|content|footnote|reference|bibliography)/)?!0:!!Array.from(e.children).some(e=>r.PRESERVE_ELEMENTS.has(e.tagName.toLowerCase())||e.getAttribute(`role`)===`article`||e.className&&typeof e.className==`string`&&e.className.toLowerCase().match(/(?:article|main|content|footnote|reference|bibliography)/))},c=e=>{var t;if(o(e))return!1;if(!(t=e.textContent)?.trim())return!0;let n=Array.from(e.children);if(n.length===0||n.every(e=>{let t=e.tagName.toLowerCase();return r.BLOCK_ELEMENTS.includes(t)||t===`p`||t===`h1`||t===`h2`||t===`h3`||t===`h4`||t===`h5`||t===`h6`||t===`ul`||t===`ol`||t===`pre`||t===`blockquote`||t===`figure`}))return!0;let i=e.className.toLowerCase();if(/(?:wrapper|container|layout|row|col|grid|flex|outer|inner|content-area)/i.test(i))return!0;let a=Array.from(e.childNodes).filter(e=>{var t;return(0,l.isTextNode)(e)&&(t=e.textContent)?.trim()});return a.length===0?!0:!(!(n.length>0)||n.some(e=>{let t=e.tagName.toLowerCase();return r.INLINE_ELEMENTS.has(t)}))},u=i=>{var a,u;if(!i.isConnected||s(i))return!1;let d=i.tagName.toLowerCase();if(!r.ALLOWED_EMPTY_ELEMENTS.has(d)&&!i.children.length&&!(a=i.textContent)?.trim())return i.remove(),n++,!0;if(i.parentElement===e){let e=Array.from(i.children);if(e.length>0&&!e.some(e=>{let t=e.tagName.toLowerCase();return r.INLINE_ELEMENTS.has(t)})){let e=t.createDocumentFragment();for(;i.firstChild;)e.appendChild(i.firstChild);return i.replaceWith(e),n++,!0}}if(c(i)){if(!Array.from(i.children).some(e=>{let t=e.tagName.toLowerCase();return r.INLINE_ELEMENTS.has(t)})){let e=t.createDocumentFragment();for(;i.firstChild;)e.appendChild(i.firstChild);return i.replaceWith(e),n++,!0}let e=t.createDocumentFragment();for(;i.firstChild;)e.appendChild(i.firstChild);return i.replaceWith(e),n++,!0}let f=Array.from(i.childNodes);if(f.length>0&&f.every(e=>(0,l.isTextNode)(e)||(0,l.isElement)(e)&&r.INLINE_ELEMENTS.has(e.nodeName.toLowerCase()))&&(u=i.textContent)?.trim()){let e=t.createElement(`p`);for(;i.firstChild;)e.appendChild(i.firstChild);return i.replaceWith(e),n++,!0}if(i.children.length===1){let e=i.firstElementChild,t=e.tagName.toLowerCase();if(r.BLOCK_ELEMENTS.includes(t)&&!s(e))return i.replaceWith(e),n++,!0}let p=0,m=i.parentElement;for(;m;){let e=m.tagName.toLowerCase();r.BLOCK_ELEMENTS.includes(e)&&p++,m=m.parentElement}if(p>0&&!o(i)){let e=t.createDocumentFragment();for(;i.firstChild;)e.appendChild(i.firstChild);return i.replaceWith(e),n++,!0}return!1},d=()=>{let t=Array.from(e.children).filter(e=>r.BLOCK_ELEMENTS.includes(e.tagName.toLowerCase())),n=!1;return t.forEach(e=>{u(e)&&(n=!0)}),n},f=()=>{let t=Array.from(e.querySelectorAll(r.BLOCK_ELEMENTS.join(`,`))).sort((e,t)=>{let n=e=>{let t=0,n=e.parentElement;for(;n;){let e=n.tagName.toLowerCase();r.BLOCK_ELEMENTS.includes(e)&&t++,n=n.parentElement}return t};return n(t)-n(e)}),n=!1;return t.forEach(e=>{u(e)&&(n=!0)}),n},p=()=>{let i=Array.from(e.querySelectorAll(r.BLOCK_ELEMENTS.join(`,`))),a=!1;return i.forEach(e=>{let r=Array.from(e.children);if(r.length>0&&r.every(e=>e.tagName.toLowerCase()===`p`)||!s(e)&&c(e)){let r=t.createDocumentFragment();for(;e.firstChild;)r.appendChild(e.firstChild);e.replaceWith(r),n++,a=!0}}),a};do a=!1,d()&&(a=!0),f()&&(a=!0),p()&&(a=!0);while(a);let m=Date.now();(0,l.logDebug)(`Flattened wrapper elements:`,{count:n,processingTime:`${(m-i).toFixed(2)}ms`})}},864:(e,t,n)=>{Object.defineProperty(t,`__esModule`,{value:!0}),t.headingRules=void 0;let r=n(640);t.headingRules=[{selector:`h1, h2, h3, h4, h5, h6`,element:`keep`,transform:e=>{var t;let n=e.ownerDocument;if(!n)return console.warn(`No document available`),e;let i=n.createElement(e.tagName);Array.from(e.attributes).forEach(e=>{r.ALLOWED_ATTRIBUTES.has(e.name)&&i.setAttribute(e.name,e.value)});let a=e.cloneNode(!0),o=new Map;Array.from(a.querySelectorAll(`*`)).forEach(e=>{var t,n,r,i,s,c;let l=!1;if(e.tagName.toLowerCase()===`a`){let n=e.getAttribute(`href`);(n!=null&&n.includes(`#`)||n!=null&&n.startsWith(`#`))&&(o.set(e,(t=e.textContent)?.trim()||``),l=!0)}if(e.classList.contains(`anchor`)&&(o.set(e,(n=e.textContent)?.trim()||``),l=!0),e.tagName.toLowerCase()===`button`&&(l=!0),(e.tagName.toLowerCase()===`span`||e.tagName.toLowerCase()===`div`)&&e.querySelector(`a[href^="#"]`)){let t=e.querySelector(`a[href^="#"]`);t&&o.set(e,(r=t.textContent)?.trim()||``),l=!0}if(l){let t=e.parentElement;t&&t!==a&&(i=t.textContent)?.trim()===(s=e.textContent)?.trim()&&o.set(t,(c=e.textContent)?.trim()||``)}}),Array.from(a.querySelectorAll(`*`)).filter(e=>{if(e.tagName.toLowerCase()===`a`){let t=e.getAttribute(`href`);return t?.includes(`#`)||t?.startsWith(`#`)}return!!e.classList.contains(`anchor`)||e.tagName.toLowerCase()===`button`||!(e.tagName.toLowerCase()!==`span`&&e.tagName.toLowerCase()!==`div`||!e.querySelector(`a[href^="#"]`))}).forEach(e=>e.remove());let s=(t=a.textContent)?.trim()||``;return!s&&o.size>0&&(s=Array.from(o.values())[0]),i.textContent=s,i}}]},917:(e,t,n)=>{Object.defineProperty(t,`__esModule`,{value:!0}),t.ExtractorRegistry=void 0;let r=n(959),i=n(248),a=n(258),o=n(458),s=n(632),c=n(397),l=n(20),u=n(732);class d{static initialize(){this.register({patterns:[`twitter.com`,/\/x\.com\/.*/],extractor:i.TwitterExtractor}),this.register({patterns:[`reddit.com`,`old.reddit.com`,`new.reddit.com`,/^https:\/\/[^\/]+\.reddit\.com/],extractor:r.RedditExtractor}),this.register({patterns:[`youtube.com`,`youtu.be`,/youtube\.com\/watch\?v=.*/,/youtu\.be\/.*/],extractor:a.YoutubeExtractor}),this.register({patterns:[/news\.ycombinator\.com\/item\?id=.*/],extractor:o.HackerNewsExtractor}),this.register({patterns:[/^https?:\/\/chatgpt\.com\/(c|share)\/.*/],extractor:s.ChatGPTExtractor}),this.register({patterns:[/^https?:\/\/claude\.ai\/(chat|share)\/.*/],extractor:c.ClaudeExtractor}),this.register({patterns:[/^https?:\/\/grok\.com\/(chat|share)(\/.*)?$/],extractor:l.GrokExtractor}),this.register({patterns:[/^https?:\/\/gemini\.google\.com\/app\/.*/],extractor:u.GeminiExtractor})}static register(e){this.mappings.push(e)}static findExtractor(e,t,n){try{let r=new URL(t).hostname;if(this.domainCache.has(r)){let i=this.domainCache.get(r);return i?new i(e,t,n):null}for(let{patterns:i,extractor:a}of this.mappings)if(i.some(e=>e instanceof RegExp?e.test(t):r.includes(e)))return this.domainCache.set(r,a),new a(e,t,n);return this.domainCache.set(r,null),null}catch(e){return console.error(`Error in findExtractor:`,e),null}}static clearCache(){this.domainCache.clear()}}t.ExtractorRegistry=d,d.mappings=[],d.domainCache=new Map,d.initialize()},959:(e,t,n)=>{Object.defineProperty(t,`__esModule`,{value:!0}),t.RedditExtractor=void 0;let r=n(279);class i extends r.BaseExtractor{constructor(e,t){super(e,t),this.shredditPost=e.querySelector(`shreddit-post`)}canExtract(){return!!this.shredditPost}extract(){var e,t;let n=this.getPostContent(),r=this.extractComments(),i=this.createContentHtml(n,r),a=(t=(e=this.document.querySelector(`h1`))?.textContent)?.trim()||``,o=this.getSubreddit(),s=this.getPostAuthor(),c=this.createDescription(n);return{content:i,contentHtml:i,extractedContent:{postId:this.getPostId(),subreddit:o,postAuthor:s},variables:{title:a,author:s,site:`r/${o}`,description:c}}}getPostContent(){var e,t,n,r;return((t=(e=this.shredditPost)?.querySelector(`[slot="text-body"]`))?.innerHTML||``)+((r=(n=this.shredditPost)?.querySelector(`#post-image`))?.outerHTML||``)}createContentHtml(e,t){return`\n\t\t\t<div class="reddit-post">\n\t\t\t\t<div class="post-content">\n\t\t\t\t\t${e}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t${t?`\n\t\t\t\t<hr>\n\t\t\t\t<h2>Comments</h2>\n\t\t\t\t<div class="reddit-comments">\n\t\t\t\t\t${t}\n\t\t\t\t</div>\n\t\t\t`:``}\n\t\t`.trim()}extractComments(){let e=Array.from(this.document.querySelectorAll(`shreddit-comment`));return this.processComments(e)}getPostId(){let e=this.url.match(/comments\/([a-zA-Z0-9]+)/);return e?.[1]||``}getSubreddit(){let e=this.url.match(/\/r\/([^/]+)/);return e?.[1]||``}getPostAuthor(){var e;return(e=this.shredditPost)?.getAttribute(`author`)||``}createDescription(e){var t;if(!e)return``;let n=document.createElement(`div`);return n.innerHTML=e,(t=n.textContent)?.trim().slice(0,140).replace(/\s+/g,` `)||``}processComments(e){var t;let n=``,r=-1,i=[];for(let a of e){let e=parseInt(a.getAttribute(`depth`)||`0`),o=a.getAttribute(`author`)||``,s=a.getAttribute(`score`)||`0`,c=a.getAttribute(`permalink`)||``,l=(t=a.querySelector(`[slot="comment"]`))?.innerHTML||``,u=a.querySelector(`faceplate-timeago`),d=u?.getAttribute(`ts`)||``,f=d?new Date(d).toISOString().split(`T`)[0]:``;if(e===0){for(;i.length>0;)n+=`</blockquote>`,i.pop();n+=`<blockquote>`,i=[0],r=0}else if(e<r)for(;i.length>0&&i[i.length-1]>=e;)n+=`</blockquote>`,i.pop();else e>r&&(n+=`<blockquote>`,i.push(e));n+=`<div class="comment">\n\t<div class="comment-metadata">\n\t\t<span class="comment-author"><strong>${o}</strong></span> \u2022\n\t\t<a href="https://reddit.com${c}" class="comment-link">${s} points</a> \u2022\n\t\t<span class="comment-date">${f}</span>\n\t</div>\n\t<div class="comment-content">${l}</div>\n</div>`,r=e}for(;i.length>0;)n+=`</blockquote>`,i.pop();return n}}t.RedditExtractor=i},968:(e,t,n)=>{Object.defineProperty(t,`__esModule`,{value:!0}),t.ContentScorer=void 0;let r=n(640),i=[`admonition`,`article`,`content`,`entry`,`image`,`img`,`font`,`figure`,`figcaption`,`pre`,`main`,`post`,`story`,`table`],a=`advertisement.all rights reserved.banner.cookie.comments.copyright.follow me.follow us.footer.header.homepage.login.menu.more articles.more like this.most read.nav.navigation.newsletter.newsletter.popular.privacy.recommended.register.related.responses.share.sidebar.sign in.sign up.signup.social.sponsored.subscribe.subscribe.terms.trending`.split(`.`),o=[`ad`,`banner`,`cookie`,`copyright`,`footer`,`header`,`homepage`,`menu`,`nav`,`newsletter`,`popular`,`privacy`,`recommended`,`related`,`rights`,`share`,`sidebar`,`social`,`sponsored`,`subscribe`,`terms`,`trending`,`widget`];class s{constructor(e,t=!1){this.doc=e,this.debug=t}static scoreElement(e){let t=0,n=e.textContent||``,i=n.split(/\s+/).length;t+=i,t+=10*e.getElementsByTagName(`p`).length,t-=5*(e.getElementsByTagName(`a`).length/(i||1)),t-=3*(e.getElementsByTagName(`img`).length/(i||1));try{let n=e.getAttribute(`style`)||``,r=e.getAttribute(`align`)||``;(n.includes(`float: right`)||n.includes(`text-align: right`)||r===`right`)&&(t+=5)}catch{}/\b(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*\s+\d{1,2},?\s+\d{4}\b/i.test(n)&&(t+=10),/\b(?:by|written by|author:)\s+[A-Za-z\s]+\b/i.test(n)&&(t+=10);let a=e.className.toLowerCase();if((a.includes(`content`)||a.includes(`article`)||a.includes(`post`))&&(t+=15),e.querySelector(r.FOOTNOTE_INLINE_REFERENCES)&&(t+=10),e.querySelector(r.FOOTNOTE_LIST_SELECTORS)&&(t+=10),t-=5*e.getElementsByTagName(`table`).length,e.tagName.toLowerCase()===`td`){let n=e.closest(`table`);if(n){let r=parseInt(n.getAttribute(`width`)||`0`),i=n.getAttribute(`align`)||``,a=n.className.toLowerCase();if(r>400||i===`center`||a.includes(`content`)||a.includes(`article`)){let r=Array.from(n.getElementsByTagName(`td`)),i=r.indexOf(e);i>0&&i<r.length-1&&(t+=10)}}}return t}static findBestElement(e,t=50){let n=null,r=0;return e.forEach(e=>{let t=this.scoreElement(e);t>r&&(r=t,n=e)}),r>t?n:null}static scoreAndRemove(e,t=!1){let n=Date.now(),i=0,a=new Set;Array.from(e.querySelectorAll(r.BLOCK_ELEMENTS.join(`,`))).forEach(e=>{a.has(e)||s.isLikelyContent(e)||s.scoreNonContentBlock(e)<0&&(a.add(e),i++)}),a.forEach(e=>e.remove());let o=Date.now();t&&console.log(`Defuddle`,`Removed non-content blocks:`,{count:i,processingTime:`${(o-n).toFixed(2)}ms`})}static isLikelyContent(e){let t=e.getAttribute(`role`);if(t&&[`article`,`main`,`contentinfo`].includes(t))return!0;let n=e.className.toLowerCase(),r=e.id.toLowerCase();for(let e of i)if(n.includes(e)||r.includes(e))return!0;let a=(e.textContent||``).split(/\s+/).length,o=e.getElementsByTagName(`p`).length;return a>50&&o>1||a>100||a>30&&o>0}static scoreNonContentBlock(e){if(e.querySelector(r.FOOTNOTE_LIST_SELECTORS))return 0;let t=0,n=e.textContent||``,i=n.split(/\s+/).length;if(i<3)return 0;for(let e of a)n.toLowerCase().includes(e)&&(t-=10);let s=e.getElementsByTagName(`a`).length;s/(i||1)>.5&&(t-=15);let c=e.getElementsByTagName(`ul`).length+e.getElementsByTagName(`ol`).length;c>0&&s>3*c&&(t-=10);let l=e.className.toLowerCase(),u=e.id.toLowerCase();for(let e of o)(l.includes(e)||u.includes(e))&&(t-=8);return t}}t.ContentScorer=s}},t={};function n(r){var i=t[r];if(i!==void 0)return i.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}var r={};return(()=>{var e=r;let t=n(628);e.default=t.Defuddle})(),r=r.default})())}),Rx=l(Lx());async function zx(e,t,n){let r=await e.vault.read(t);if(n){let i=e.metadataCache.getFileCache(t);if(i){let e=(0,u.resolveSubpath)(i,n);if(!e)return console.warn(`Failed to get subpath`,{file:t,subpath:n}),r;if(e.start||e.end){let i=r.slice(e.start.offset,e.end?.offset);return i||(console.warn(`Failed to get subpath`,{file:t,subpath:n}),r)}}}return r}async function Bx(e){let t=new Rx.default(e.ownerDocument),n=t.parse();return n}async function Vx(e){return await Ix(e)}async function Hx(e){let t=e.app,n=e.getData();switch(n.type){case`text`:return n.text;case`file`:{let r=t.vault.getAbstractFileByPath(n.file);if(!r)return`ERROR when reading file ${n.file}, the file is not found, maybe it's deleted or moved`;if(r instanceof u.TFile){let i=await t.vault.read(r);return e.subpath?await zx(t,r,n.subpath):`## ${r.basename}\n${i}`}throw Error(`Failed to get file content`)}case`link`:{let t,r=n.url.includes(`youtube.com`);if(r)t=await Vx(n.url);else{let t=e.nodeEl.querySelector(`webview`);if(t){let e=await Bx(t);return JSON.stringify(e)}}return t??n.url}}}const Ux=async(e,t,n,r,i,a,o)=>{let s=o.find(e=>e.modelId===a);if(!s){new u.Notice(`Error: Active model not found. Please check plugin settings.`);return}let c=i.getData(),l=[];for(let[e,t]of i.nodes){if(t.type===`group`)continue;let n=await Hx(t);l.push({id:e,position:{x:t.x,y:t.y},size:{width:t.width,height:t.height},text:n??``})}let d=[];for(let[e,t]of i.edges){if(t.from.node.type===`group`||t.to.node.type===`group`)continue;d.push({label:t.label??``,from:{nodeId:t.from.node.id,side:t.from.side},to:{nodeId:t.to.node.id,side:t.to.side}})}let f={nodes:l,edges:d},p=Array.from(i.selection).map(e=>({nodeId:e.id})),m={modelName:s.modelId,provider:s.provider};mf(s)&&(m.credentials={accessKeyId:s.accessKeyId,secretAccessKey:s.secretAccessKey,region:s.region}),pf(s)&&(m.credentials={apiKey:s.apiKey}),hf(s)&&(m.credentials={apiKey:s.apiKey}),gf(s)&&(m.credentials={apiKey:s.apiKey});try{console.log(`modelConfig`,m),await sy(e,t,n,r,m,{selectedNodes:p,nodeGraph:f,filePath:i.view.file.path})}catch(e){new u.Notice(`Failed to generate AI content: `+e)}};var Wx=class extends u.PluginSettingTab{plugin;vueApp;shadowRoot;vueContainer;constructor(e,t){super(e,t),this.plugin=t}display(){if(this.shadowRoot)return;this.containerEl.empty();let e=document.createElement(`div`);this.containerEl.appendChild(e),this.shadowRoot=e.attachShadow({mode:`open`}),this.vueContainer=document.createElement(`div`),this.shadowRoot.appendChild(this.vueContainer),this.loadStylesIntoShadowDOM().then(()=>{this.vueApp=ef(f_),this.vueApp.provide(`useAiPlugin`,this.plugin),this.vueApp.mount(this.vueContainer)})}async loadStylesIntoShadowDOM(){if(this.shadowRoot)try{let e=this.plugin.manifest.dir||`useai`,t=`${e}/styles.css`,n=await this.plugin.app.vault.adapter.read(t),r=document.createElement(`style`);r.textContent=n,this.shadowRoot.appendChild(r)}catch(e){console.warn(`Failed to load CSS styles via adapter, trying alternative methods:`,e)}}hide(){this.vueApp&&(this.vueApp.unmount(),this.vueApp=void 0),this.shadowRoot&&(this.shadowRoot=void 0,this.vueContainer=void 0),this.containerEl.empty()}};const Gx=`useai-sidepanel`;var Kx=class extends u.Plugin{events;settings;currentThreadId=``;socket;socketConnectionStatus=`disconnected`;constructor(e,t,n){super(e,t),this.events=new p_,this.settings=g_}async onload(){this.currentThreadId=yy(16),await this.loadSettings(),this.setupSocketEventHandlers(),this.initializeSocketConnection(),this.setupClientHandlers(),this.registerView(Gx,e=>new fx(e,this)),this.addRibbonIcon(`sparkles`,`Open AI Prompt View`,()=>{this.activatePromptView()});let e=new Wx(this.app,this);this.addSettingTab(e),this.registerCommands(),this.patchObsidian(),this.registerEvents()}setupSocketEventHandlers(){this.registerEvent(this.events.on(`socket:connect-request`,e=>{this.connectSocket(e)})),this.registerEvent(this.events.on(`socket:disconnect-request`,()=>{this.disconnectSocket()})),this.registerEvent(this.events.on(`socket:reconnect-request`,()=>{this.reconnectSocket()}))}async connectSocket(e){let t=e||this.settings.socketAddress;if(!t?.trim()){this.updateSocketStatus(`error`,`Socket address is required!`);return}if(!(this.socketConnectionStatus===`connecting`||this.socketConnectionStatus===`connected`)){this.updateSocketStatus(`connecting`,void 0,t);try{this.socket&&(this.socket.disconnect(),this.socket=void 0),this.socket=oy(t,{transports:[`websocket`,`polling`],auth:{token:`123`},timeout:1e4}),this.setupSocketIOEventHandlers()}catch(e){let t=e instanceof Error?e.message:`Connection failed`;this.updateSocketStatus(`error`,t)}}}disconnectSocket(){this.socket&&(this.socket.disconnect(),this.socket=void 0),this.updateSocketStatus(`disconnected`)}async reconnectSocket(){this.disconnectSocket(),await new Promise(e=>setTimeout(e,1e3)),await this.connectSocket()}setupSocketIOEventHandlers(){this.socket&&(this.socket.on(`connect`,()=>{this.updateSocketStatus(`connected`,void 0,this.settings.socketAddress)}),this.socket.on(`disconnect`,e=>{this.updateSocketStatus(`disconnected`,e)}),this.socket.on(`reconnect`,()=>{this.updateSocketStatus(`connected`,void 0,this.settings.socketAddress)}),this.socket.on(`reconnect_attempt`,e=>{this.updateSocketStatus(`reconnecting`),this.events.trigger(`socket:reconnecting`,e)}),this.socket.io.on(`reconnect_error`,e=>{let t=e instanceof Error?e.message:`Reconnection failed`;this.updateSocketStatus(`error`,t)}),this.socket.on(`reconnect_failed`,()=>{this.updateSocketStatus(`error`,`Reconnection failed`)}),this.socket.on(`connect_error`,e=>{let t=e instanceof Error?e.message:`Connection failed`;this.updateSocketStatus(`error`,t)}),this.socket.on(`error`,e=>{let t=e instanceof Error?e.message:`Socket error`;this.updateSocketStatus(`error`,t)}))}updateSocketStatus(e,t,n){this.socketConnectionStatus=e;let r={status:e,address:n||this.settings.socketAddress,error:t,timestamp:new Date};switch(e){case`connected`:this.events.trigger(`socket:connected`,r.address);break;case`disconnected`:this.events.trigger(`socket:disconnected`,t);break;case`connecting`:this.events.trigger(`socket:connecting`,r.address);break;case`error`:this.events.trigger(`socket:error`,t||`Unknown error`);break;case`reconnecting`:break}this.events.trigger(`socket:status-changed`,r)}getSocketConnectionStatus(){return this.socketConnectionStatus}async initializeSocketConnection(){this.settings.socketAddress&&await this.connectSocket()}isMenuPatched(e){return e.menuEl.querySelector(`.gpt-menu-item`)!==null}appendMenuButton(e,t,n,r){let i=createEl(`button`,`clickable-icon gpt-menu-item`);(0,u.setTooltip)(i,n,{placement:`top`}),(0,u.setIcon)(i,t),i.addEventListener(`click`,r),e.menuEl.appendChild(i)}appendButtons(e,t,n){this.appendMenuButton(e,`lucide-sparkles`,`Generate with AI`,()=>{this.events.trigger(`canvas:generate`,this.currentThreadId,`The selected node is my requirement, understand it carefully then replace your answer right in the node`)}),this.appendMenuButton(e,`lucide-plus`,`Create new empty node`,()=>{ky(t,[n],{text:``,size:{width:350,height:350}})})}registerEvents(){this.registerEvent(this.events.on(`conversation:new-thread`,e=>{this.currentThreadId=e})),this.registerEvent(this.events.on(`canvas:node-menu`,(e,t,n)=>{let r=n.getData();this.isMenuPatched(e)||this.appendButtons(e,t,n)})),this.registerEvent(this.events.on(`canvas:generate`,async(e,t)=>{if(!this.socket){new u.Notice(`No socket connection`);return}let n=My(this.app);if(!n){new u.Notice(`No active canvas found`);return}await Ux(this.socket,e,this.settings.systemPrompt,t,n,this.settings.activeModelId,this.settings.models)}))}registerCommands(){this.addCommand({id:`canvas-generate-ai`,name:`Generate AI content for selected canvas node`,callback:()=>{this.events.trigger(`canvas:generate`,this.currentThreadId,`The selected node is my requirement, understand it carefully then replace your answer right in the node`)}}),this.addCommand({id:`open-settings`,name:`Open UseAI Plugin Settings`,callback:()=>{try{this.app.setting?.open(),setTimeout(()=>{this.app.setting?.openTabById(this.manifest.id)},100)}catch(e){console.warn(`Failed to open plugin settings:`,e),this.app.setting?.open()}}})}patchObsidian(){console.log(`patching obsidian`),this.app.workspace.onLayoutReady(()=>{if(wx(this))return;let e=this.app.workspace.on(`layout-change`,()=>{wx(this)&&this.app.workspace.offref(e)});this.registerEvent(e)})}async activatePromptView(){let{workspace:e}=this.app,t=null,n=e.getLeavesOfType(Gx);n.length>0?t=n[0]:(t=e.getRightLeaf(!1),t&&await t.setViewState({type:Gx,active:!0})),t&&e.revealLeaf(t)}async loadSettings(){this.settings=Object.assign({},g_,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}onunload(){console.log(`UseAI Plugin: Starting cleanup...`),this.socket&&(console.log(`UseAI Plugin: Disconnecting socket...`),this.disconnectSocket());try{let e=this.app.workspace.getLeavesOfType(Gx);e.length>0&&(console.log(`UseAI Plugin: Cleaning up ${e.length} sidepanel view(s)...`),e.forEach(e=>{try{e.detach()}catch(e){console.warn(`Error detaching sidepanel view:`,e)}}))}catch(e){console.warn(`Error cleaning up sidepanel views:`,e)}this.events&&(console.log(`UseAI Plugin: Cleaning up events...`),this.events=null),this.socketConnectionStatus=`disconnected`,this.socket=void 0,console.log(`UseAI Plugin: Cleanup completed`)}async setupClientHandlers(){if(!this.socket){new u.Notice(`No socket connection`);return}vy(this.socket,async e=>{this.app.internalPlugins.plugins[`global-search`].instance.openGlobalSearch(e);let t=this.app.workspace.getLeavesOfType(`search`)[0],n=await t.open(t.view),r=n.dom.resultDomLookup,i=Array.from(r.values()).map(e=>({title:e.file.name,path:e.file.path,content:e.content}));return i}),fy(this.socket,async(e,t,n,r,i)=>{let a=Ny(this.app,e);if(!a){new u.Notice(`No canvas found`);return}let o=a.nodes.get(t);if(!o){new u.Notice(`From node not found`);return}let s=a.nodes.get(r);if(!s){new u.Notice(`To node not found`);return}by(a,yy(16),{side:n,node:o},{side:i,node:s},{color:o.color})}),dy(this.socket,async(e,t)=>{let n=Ny(this.app,e);if(!n){new u.Notice(`No active canvas`);return}let r=n.edges.get(t);if(!r){new u.Notice(`Edge not found`);return}n.removeEdge(r)}),gy(this.socket,async(e,t,n)=>{let r=Ny(this.app,e);if(!r){new u.Notice(`No active canvas`);return}let i=r.nodes.get(t);if(!i){new u.Notice(`Node not found`);return}i.color=n,r.nodes.set(t,i),await r.requestSave(),await r.requestFrame()}),cy(this.socket,async e=>{new u.Notice(e)}),py(this.socket,async(e,t,n)=>{let r=Ny(this.app,e);if(!r){new u.Notice(`No active canvas`);return}this.events.trigger(`conversation:add-agent-message`,t,n)}),my(this.socket,async(e,t)=>{this.events.trigger(`add-step`,e,t)}),ly(this.socket,async(e,t,n)=>{let r=Ny(this.app,e);if(!r){new u.Notice(`No active canvas`);return}let i=r.nodes.get(t);if(!i){new u.Notice(`Node not found`);return}i.setText(n)}),uy(this.socket,async(e,t,n,r,i,a)=>{let o=Ny(this.app,e);if(!o)return new u.Notice(`No active canvas`),``;t.width<500&&(t.width=500),t.height<300&&(t.height=300);let s=[];for(let e of n){let t=o.nodes.get(e);if(!t)return new u.Notice(`Parent node not found`),``;s.push(t)}let c=await ky(o,s,{size:t,text:r,color:i},void 0,a);return`New node was created with id: `+c.id}),_y(this.socket,async(e,t)=>{let n=Ny(this.app,e);if(!n){new u.Notice(`No active canvas`);return}let r=n.nodes.get(t);if(!r){new u.Notice(`Node not found`);return}n.removeNode(r)}),hy(this.socket,async(e,t,n)=>{let r=Ny(this.app,e);if(!r){new u.Notice(`No active canvas`);return}let i=r.nodes.get(t);if(!i){new u.Notice(`Node not found`);return}if(i.nodeEl){let e=i.nodeEl.querySelector(`[data-status-badge="true"]`);e?e.textContent=n:(e=document.createElement(`div`),e.textContent=n,e.style.height=`20px`,e.style.position=`absolute`,e.style.top=`-10px`,e.style.right=`10px`,e.style.zIndex=`10`,e.style.padding=`0 5px`,e.style.backgroundColor=`rgba(0, 0, 0, 1)`,e.style.borderRadius=`5px`,e.style.fontSize=`12px`,e.style.cursor=`pointer`,e.style.display=`flex`,e.style.alignItems=`center`,e.style.color=`white`,e.setAttribute(`data-status-badge`,`true`),i.nodeEl.appendChild(e))}})}};exports.default=Kx;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,